{"version":3,"sources":["redux/actions/index.ts","redux/reducers/myJobs.ts","redux/reducers/userJobs.ts","redux/reducers/app.ts","redux/reducers/publicAppStats.ts","redux/reducers/userRunSummary.ts","redux/store.ts","redux/reducers/index.ts","components/JobStatus.tsx","components/JobLog/view.tsx","components/FlexTabs.tsx","components/UILink.tsx","components/NarrativeLink.tsx","components/JobInfo.tsx","components/JobDetail/view.tsx","lib/MetricsServiceClient.ts","redux/actions/utils.ts","components/JobDetail/state.tsx","components/JobDetail/index.ts","lib/Poller.ts","lib/PubSub.ts","components/Monitor.tsx","components/UserJobs/view.tsx","lib/CancelableRequest.ts","redux/actions/userJobs.ts","components/UserJobs/index.tsx","components/MyJobs/view.tsx","redux/actions/myJobs.ts","components/MyJobs/index.tsx","components/PublicAppStats/view.tsx","redux/actions/publicAppStats.ts","components/PublicAppStats/index.tsx","components/UserRunSummary/view.tsx","redux/actions/userRunSummary.ts","components/UserRunSummary/index.tsx","components/Main/view.tsx","components/Main/state.ts","redux/actions/app.ts","components/Main/index.tsx","components/ErrorBoundary.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionType","reducer","state","action","type","MY_JOBS_SEARCH_SUCCESS","views","myJobsView","searchState","SearchState","SEARCHED","rawJobs","jobs","jobsFetchedAt","searchExpression","myJobsSearchSuccess","MY_JOBS_SEARCH_START","SEARCHING","myJobsSearchStart","MY_JOBS_CANCEL_SUCCESS","myJobsCancelJobSuccess","USER_JOBS_SEARCH_START","userJobsView","userJobsSearchStart","USER_JOBS_SEARCH_SUCCESS","userJobsSearchSuccess","USER_JOBS_CANCEL_START","USER_JOBS_CANCEL_SUCCESS","cancelJobSuccess","MAIN_LOAD_SUCCESS","mainView","loadingState","ComponentLoadingState","SUCCESS","isAdmin","mainLoadSuccess","MAIN_UNLOAD","NONE","error","unload","PUBLIC_APP_STATS_SEARCH_START","publicAppStatsView","searchStart","PUBLIC_APP_STATS_SEARCH_SUCCESS","appStats","searchSuccess","JobStatus","USER_RUN_SUMMARY_SEARCH_START","userRunSummaryView","USER_RUN_SUMMARY_SEARCH_SUCCESS","userRunSummary","baseState","baseReducer","appReducer","myJobsReducer","userJobsReducer","publicAppStatsReducer","jobColor","status","QUEUED","RUNNING","CANCELED_QUEUED","CANCELED_RUNNING","FINISHED","ERRORED_QUEUED","ERRORED_RUNNING","Error","PlayState","JobStatusComponent","label","spin","jobStatusLabel","this","props","job","color","from","queuedAt","useClock","runAt","time","Date","finishAt","timing","showTiming","renderTiming","renderTag","React","Component","Tabs","selectedTabIndex","tabIndex","setState","tabs","map","tab","index","classNames","push","key","String","className","join","onClick","selectTab","title","component","renderTabs","renderTabBody","JobLogs","params","playLogTimer","bodyRef","currentJobStatus","createRef","playState","isPaused","isActive","scrollToBottom","current","scrollTop","scrollHeight","lastJobStatus","message","size","style","textAlign","fontStyle","backgroundColor","data-end","lines","log","length","rows","line","rowStyle","isError","lineNumber","renderLastLine","ref","dataSource","rowKey","logLine","pagination","scroll","y","rowClassName","Column","dataIndex","width","render","numberDisplay","Intl","NumberFormat","useGrouping","format","sorter","a","b","row","contentType","content","Papa","unparse","delimiter","logToTSV","JSON","stringify","logToJSON","logToText","logToCSV","filename","downloadLink","document","createElement","downloadContent","Blob","href","URL","createObjectURL","download","visibility","body","appendChild","click","removeChild","revokeObjectURL","param","downloadLog","PLAYING","PAUSED","playTooltip","pauseTooltip","irrelevant","renderPlayPauseTooltips","icon","disabled","onPlayLog","bind","onPauseLog","menu","onMenuClick","Item","overlay","renderPlayPause","renderToolbar","renderJobLog","UILink","path","openIn","target","children","rel","NarrativeLink","narrativeID","JobInfo","date","precision","to","jobStatus","id","narrativeTitle","renderNarrativeLink","appID","appTitle","renderSubmitted","renderQueuedFor","renderStateSpinner","renderRunFor","JobDetail","view","JobLogState","JOB_QUEUED","renderQueued","INITIAL_LOADING","renderLoading","ERROR","renderError","ACTIVE_LOADED","ACTIVE_LOADING","FINISHED_LOADED","Array","keys","i","flex","display","flexDirection","borderBottom","padding","overflowWrap","wordWrap","minHeight","overflowY","renderStatus","renderJobInfo","Fragment","renderMiniDetails","MetricsServiceClient","epoch_range","user_ids","callFunc","result","job_id","DynamicServiceClient","serviceJobToUIJob","username","getJobStatus","wsid","parseInt","app_id","narrative_name","creation_time","queuedElapsed","now","clientGroups","client_groups","user","makeJobQueued","exec_start_time","console","runElapsed","makeJobRunning","finish_time","makeJobFinished","makeJobErroredQueued","makeJobErroredRunning","makeJobCanceledQueued","makeJobCanceledRunning","compareStatus","some","extractTimeRange","timeRange","kind","preset","endDate","getTime","hourInMilliseconds","getTimeRange","start","end","module","JobLogsState","metricsClient","token","url","serviceWizardURL","jobID","getJob","job_state","skipLines","njsClient","NarrativeJobServiceClient","njsURL","getJobLogs","skip_lines","jobLog","is_error","poller","async","startingLines","getJobLog","newLog","startQueuedPolling","concat","loop","setTimeout","startRunningPolling","getInitialJobLog","connect","PollerState","userAuthorization","auth","app","config","services","NarrativeJobService","ServiceWizard","dispatch","ownProps","PubSubProxy","pubsub","subscriptions","messageID","handler","on","forEach","off","PubSub","sendQueue","messageListeners","allListeners","Map","queue","messageListener","get","listeners","listener","payload","ex","window","sendMessages","processQueue","set","uuid","v4","filter","l","Poller","statusTimer","statusCount","watchStartAt","watcherTimer","waitTimer","pubsubProxy","STOPPED","clearInterval","clearTimeout","updateOnProgress","startWaiting","STARTED","pollWatch","elapsed","stopPolling","POLLING","pollWatcherLoop","WAITING","warn","watchInterval","pollWaitProgressLoop","setInterval","pollInterval","progressSteps","runPoll","onPoll","startWatching","is","pause","play","startListeningForPollingEvent","onProgress","stopListeningForPollingEvent","MONITORING_INTERVAL","MONITORING_FEEDBACK_STEPS","WATCH_INTERVAL","Monitor","monitoringTimer","monitoringStatusTimer","pollWatcherTimer","searchListenerID","isMonitoring","pollWaitProgress","isPollingInitiated","pollingStartedAt","isPolling","isOpen","startOpen","progress","startPolling","startMonitoring","stopMonitoring","stop","showControls","monitoringStatus","monitor","buttonType","opener","defaultChecked","checkedChildren","unCheckedChildren","onChange","onToggleOpen","percent","showInfo","strokeWidth","strokeColor","toggleMonitoring","fontSize","jobStatusFilterOptions","value","UserJobs","currentQuery","showDates","currentJobStatusFilter","defaultTimeRange","isFilterOpen","selectedJob","currentSort","doSearch","send","event","preventDefault","forceSearch","jobStatusFilter","jobStatuses","jobStatusFilterOptionsToJobStatus","query","sort","search","dateString","existingTimeRange","valueOf","Infinity","onConfirm","cancelJob","okText","cancelText","defaultValue","onChangeTimeRange","dropdownMatchSelectWidth","Option","showTime","allowClear","moment","onRangeFromChange","onRangeToChange","dateControls","renderTimeRangeControl","layout","onSubmit","placeholder","onChangeQuery","renderTimeRangeSelectionControl","htmlType","onToggleFilterArea","isPollerRunning","showMonitoringControls","filters","checked","options","fontWeight","marginRight","onClickAny","onClickActive","onClickFinished","Group","onFilterChange","filterRow","filterRowStyle","margin","renderFilterInput","renderSearchInput","footer","onCloseModal","fontFamily","onCancel","visible","loading","position","showSizeChanger","e","onClickDetail","defaultSortOrder","_","renderJobAction","data-k-b-testhook-component","renderControlBar","renderJobsTable","renderJobDetail","CancelableRequest","pendingTasks","isCanceled","task","delete","cancel","cancelPending","request","userJobsSearchError","USER_JOBS_SEARCH_ERROR","userJobsSearchRequest","promise","getJobs","then","metrics","job_states","jobState","newID","userJobsCancelJobError","USER_JOBS_CANCEL_ERROR","UserJobsReduxAdapter","getState","code","searchTerms","split","term","RegExp","timeRangeStart","timeRangeEnd","spawn","done","newJobs","every","test","userJobsSearch","catch","err","userJobsCancelJob","MyJobs","defaultTimeRangePreset","data-k-b-testhook-button","onJobCancel","sortOrder","direction","myJobsSearchError","MY_JOBS_SEARCH_ERROR","myJobsSearchRequests","timeout","myJobsRefreshSearch","myJobsCancelJobError","MY_JOBS_CANCEL_ERROR","myJobsSearch","MY_JOBS_CANCEL_START","myJobsCancelJob","refreshSearch","PublicAppStats","onSearch","onSubmitSearch","stat","appId","onTableChange","moduleId","moduleTitle","localeCompare","functionId","functionTitle","align","runCount","errorCount","successRate","averageRunTime","duration","averageQueueTime","totalRunTime","renderAppStatsTable","calcAverage","total","count","searchError","PUBLIC_APP_STATS_SEARCH_ERROR","catalogUrl","Catalog","catalogClient","CatalogClient","getExecAggrStats","rawStats","stats","full_app_id","part","whole","number_of_calls","number_of_errors","total_exec_time","total_queue_time","expression","filtered","UserRunSummary","moduleName","functionName","renderTable","USER_RUN_SUMMARY_SEARCH_ERROR","begin","getExecAggrTable","isApp","func_mod","func","n","Main","defaultTabKey","activeTabKey","defaultActiveTabKey","setTitle","activeKey","renderMyJobsTab","userJobsTabLabel","renderPublicAppStatsTab","tabLabel","data-k-b-testhook-plugin","runtime","navigation","sendTitle","setView","setParams","mainLoadError","MAIN_LOAD_ERROR","Loader","LOADING","onLoad","MAIN_LOAD_START","catalogURL","ErrorBoundary","errorMessage","errorInfo","store","createStore","makeBaseStoreState","rawAppStats","makeInitialStoreState","compose","applyMiddleware","thunk","App","required","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46d6af2e.chunk.js","sourcesContent":["export enum ActionType {\n    MAIN_LOAD = 'main load',\n    MAIN_LOAD_START = 'main load start',\n    MAIN_LOAD_SUCCESS = 'main load success',\n    MAIN_LOAD_ERROR = 'main load error',\n    MAIN_UNLOAD = 'main/unload',\n\n    MY_JOBS_SEARCH = 'my jobs search',\n    MY_JOBS_SEARCH_START = 'my jobs search start',\n    MY_JOBS_SEARCH_SUCCESS = 'my jobs search success',\n    MY_JOBS_SEARCH_ERROR = 'my jobs search error',\n    My_JOBS_REFRESH_SEARCH = 'my jobs refresh search',\n\n    MY_JOBS_CANCEL = 'my jobs cancel',\n    MY_JOBS_CANCEL_START = 'my jobs cancel start',\n    MY_JOBS_CANCEL_SUCCESS = 'my jobs cancel success',\n    MY_JOBS_CANCEL_ERROR = 'my jobs cancel error',\n\n    USER_JOBS_SEARCH = 'user jobs search',\n    USER_JOBS_SEARCH_START = 'user jobs search start',\n    USER_JOBS_SEARCH_SUCCESS = 'user jobs search success',\n    USER_JOBS_SEARCH_ERROR = 'user jobs search error',\n\n    USER_JOBS_CANCEL = 'user jobs cancel',\n    USER_JOBS_CANCEL_START = 'user jobs cancel start',\n    USER_JOBS_CANCEL_SUCCESS = 'user jobs cancel success',\n    USER_JOBS_CANCEL_ERROR = 'user jobs cancel error',\n\n    PUBLIC_APP_STATS_SEARCH = 'publicAppStats/Search',\n    PUBLIC_APP_STATS_SEARCH_START = 'publicAppStats/Search/Start',\n    PUBLIC_APP_STATS_SEARCH_ERROR = 'publicAppStats/Search/Error',\n    PUBLIC_APP_STATS_SEARCH_SUCCESS = 'publicAppStats/Search/Success',\n\n    USER_RUN_SUMMARY_SEARCH = 'userRunSummary/Search',\n    USER_RUN_SUMMARY_SEARCH_START = 'userRunSummary/Search/Start',\n    USER_RUN_SUMMARY_SEARCH_ERROR = 'userRunSummary/Search/Error',\n    USER_RUN_SUMMARY_SEARCH_SUCCESS = 'userRunSummary/Search/Success'\n}\n\n// function fakeJobs() {\n//     function randomStatus(): JobStatus {\n//         const i = Math.floor(Math.random() * 4);\n//         return [JobStatus.QUEUED, JobStatus.RUNNING, JobStatus.FINISHED, JobStatus.ERRORED][i];\n//     }\n\n//     function createJobs(jobCount: number) {\n//         const testJobs: Array<Job> = [];\n\n//         const dayMs = 1000 * 60 * 60 * 24;\n//         const now = Date.now();\n\n//         for (let i = 0; i < jobCount; i++) {\n//             testJobs.push({\n//                 key: 'narrative_id_' + i,\n//                 narrativeTitle: 'narrative ' + i + ' here',\n//                 narrativeID: i,\n//                 appTitle: 'app here',\n//                 appID: String(i),\n//                 submittedAt: new Date(now - dayMs * (jobCount - i)).getTime(),\n//                 queuedAt: new Date(now - dayMs * (jobCount - i)).getTime(),\n//                 runAt: new Date(now - dayMs * (jobCount - i)).getTime(),\n//                 finishAt: new Date(now - dayMs * (jobCount - i)).getTime(),\n//                 queuedElapsed: 1000 * 100 * Math.random(),\n//                 runElapsed: 1000 * 100 * Math.random(),\n//                 status: randomStatus()\n//             });\n//         }\n\n//         return testJobs;\n//     }\n\n//     const jobCount = Math.floor(Math.random() * 200);\n\n//     return createJobs(jobCount);\n// }\n\n// async function fetchMyJobsx(): Promise<Array<Job>> {\n//     return new Promise((resolve, reject) => {\n//         window.setTimeout(() => {\n//             resolve(fakeJobs());\n//         }, 3000);\n//     });\n// }\n\n// All user jobs, for admins.\n// This is separate, because it exposes different information in the view.\n","import { Reducer } from 'react';\nimport { StoreState, SearchState } from '../store';\nimport { Action } from 'redux';\nimport { MyJobsSearchStart, MyJobsSearchSuccess, MyJobsCancelJobSuccess } from '../actions/myJobs';\nimport { ActionType } from '../actions';\n\nfunction myJobsSearchStart(state: StoreState, action: MyJobsSearchStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            myJobsView: {\n                ...state.views.myJobsView,\n                searchState: SearchState.SEARCHING\n            }\n        }\n    };\n}\n\nfunction myJobsSearchSuccess(state: StoreState, action: MyJobsSearchSuccess): StoreState {\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            myJobsView: {\n                ...state.views.myJobsView,\n                searchState: SearchState.SEARCHED,\n                rawJobs: action.rawJobs,\n                jobs: action.jobs,\n                jobsFetchedAt: action.jobsFetchedAt,\n                searchExpression: action.searchExpression\n            }\n        }\n    };\n    return newState;\n}\n\nfunction myJobsCancelJobSuccess(state: StoreState, action: MyJobsCancelJobSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            myJobsView: {\n                ...state.views.myJobsView\n                // TODO: should twiddle a cancellation status for the job.\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.MY_JOBS_SEARCH_SUCCESS:\n            return myJobsSearchSuccess(state, action as MyJobsSearchSuccess);\n        case ActionType.MY_JOBS_SEARCH_START:\n            return myJobsSearchStart(state, action as MyJobsSearchStart);\n        case ActionType.MY_JOBS_CANCEL_SUCCESS:\n            return myJobsCancelJobSuccess(state, action as MyJobsCancelJobSuccess);\n    }\n};\n\nexport default reducer;\n","import { StoreState, SearchState } from '../store';\nimport {\n    UserJobsSearchStart,\n    UserJobsSearchSuccess,\n    UserJobsCancelJobStart,\n    UserJobsCancelJobSuccess\n} from '../actions/userJobs';\nimport { Reducer } from 'react';\nimport { Action } from 'redux';\nimport { ActionType } from '../actions';\n\nfunction userJobsSearchStart(state: StoreState, action: UserJobsSearchStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userJobsView: {\n                ...state.views.userJobsView,\n                searchState: SearchState.SEARCHING\n            }\n        }\n    };\n}\n\nfunction userJobsSearchSuccess(state: StoreState, action: UserJobsSearchSuccess): StoreState {\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            userJobsView: {\n                ...state.views.userJobsView,\n                searchState: SearchState.SEARCHED,\n                rawJobs: action.rawJobs,\n                jobs: action.jobs,\n                jobsFetchedAt: action.jobsFetchedAt,\n                searchExpression: action.searchExpression\n            }\n        }\n    };\n    return newState;\n}\n\nfunction cancelJobStart(state: StoreState, action: UserJobsCancelJobStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userJobsView: {\n                ...state.views.userJobsView\n                // TODO: need cancelation state...\n            }\n        }\n    };\n}\n\nfunction cancelJobSuccess(state: StoreState, action: UserJobsCancelJobSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userJobsView: {\n                ...state.views.userJobsView\n                // TODO: need cancelation state...\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.USER_JOBS_SEARCH_START:\n            return userJobsSearchStart(state, action as UserJobsSearchStart);\n        case ActionType.USER_JOBS_SEARCH_SUCCESS:\n            return userJobsSearchSuccess(state, action as UserJobsSearchSuccess);\n        case ActionType.USER_JOBS_CANCEL_START:\n            return cancelJobStart(state, action as UserJobsCancelJobStart);\n        case ActionType.USER_JOBS_CANCEL_SUCCESS:\n            return cancelJobSuccess(state, action as UserJobsCancelJobSuccess);\n    }\n};\n\nexport default reducer;\n","import { StoreState, ComponentLoadingState } from '../store';\nimport { MainLoadSuccess, Unload } from '../actions/app';\nimport { Reducer } from 'react';\nimport { Action } from 'redux';\nimport { ActionType } from '../actions';\n\nfunction mainLoadSuccess(state: StoreState, action: MainLoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            mainView: {\n                ...state.views.mainView,\n                loadingState: ComponentLoadingState.SUCCESS,\n                isAdmin: action.isAdmin\n            }\n        }\n    };\n}\n\nfunction unload(state: StoreState, action: Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            mainView: {\n                loadingState: ComponentLoadingState.NONE,\n                isAdmin: false,\n                error: null\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.MAIN_LOAD_SUCCESS:\n            return mainLoadSuccess(state, action as MainLoadSuccess);\n        case ActionType.MAIN_UNLOAD:\n            return unload(state, action as Unload);\n    }\n};\n\nexport default reducer;\n","import { StoreState, SearchState } from '../store';\nimport { Reducer } from 'react';\nimport { Action } from 'redux';\nimport { ActionType } from '../actions';\nimport { SearchSuccess, SearchStart } from '../actions/publicAppStats';\n\nfunction searchSuccess(state: StoreState, action: SearchSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            publicAppStatsView: {\n                ...state.views.publicAppStatsView,\n                searchState: SearchState.SEARCHED,\n                appStats: action.appStats\n            }\n        }\n    };\n}\n\nfunction searchStart(state: StoreState, action: SearchStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            publicAppStatsView: {\n                ...state.views.publicAppStatsView,\n                searchState: SearchState.SEARCHING\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.PUBLIC_APP_STATS_SEARCH_START:\n            return searchStart(state, action as SearchStart);\n        case ActionType.PUBLIC_APP_STATS_SEARCH_SUCCESS:\n            return searchSuccess(state, action as SearchSuccess);\n    }\n};\n\nexport default reducer;\n","import { StoreState, SearchState } from '../store';\nimport { Reducer } from 'react';\nimport { Action } from 'redux';\nimport { ActionType } from '../actions';\nimport { SearchSuccess, SearchStart } from '../actions/userRunSummary';\n\nfunction searchSuccess(state: StoreState, action: SearchSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userRunSummaryView: {\n                ...state.views.userRunSummaryView,\n                searchState: SearchState.SEARCHED,\n                userRunSummary: action.userRunSummary\n            }\n        }\n    };\n}\n\nfunction searchStart(state: StoreState, action: SearchStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userRunSummaryView: {\n                ...state.views.userRunSummaryView,\n                searchState: SearchState.SEARCHING\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.USER_RUN_SUMMARY_SEARCH_START:\n            return searchStart(state, action as SearchStart);\n        case ActionType.USER_RUN_SUMMARY_SEARCH_SUCCESS:\n            return searchSuccess(state, action as SearchSuccess);\n    }\n};\n\nexport default reducer;\n","import { makeBaseStoreState } from '@kbase/ui-components';\nimport reducer from './reducers';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { AppError } from '@kbase/ui-components';\nimport { BaseStoreState } from '@kbase/ui-components';\n\nexport enum JobStatus {\n    QUEUED = 'QUEUED',\n    RUNNING = 'RUNNING',\n    FINISHED = 'FINISHED',\n    ERRORED_QUEUED = 'ERRORED_QUEUED',\n    ERRORED_RUNNING = 'ERRORED_RUNNING',\n    CANCELED_QUEUED = 'CANCELED_QUEUED',\n    CANCELED_RUNNING = 'CANCELED_RUNNING'\n}\n\nexport type JobID = string;\n\n\n\n// export interface Job {\n//     id: JobID;\n//     key: string;\n//     narrativeID: number | null;\n//     narrativeTitle: string;\n//     appID: string;\n//     appTitle: string;\n//     queuedAt: EpochTime;\n//     runAt: EpochTime | null;\n//     finishAt: EpochTime | null;\n//     queuedElapsed: number;\n//     runElapsed: number | null;\n//     status: JobStatus;\n//     message: string;\n//     clientGroups: Array<string>;\n//     username: string;\n// }\n\n// export enum TemporalState {\n//     NONE,\n//     QUEUED,\n//     RUNNING\n// }\n\n// export enum PermanentState {\n//     NONE,\n//     SUCCESS,\n//     ERROR,\n//     CANCEL\n// }\n\n// export interface JobQueuedState {\n//     tstate: TemporalState.QUEUED;\n//     pstate: PermanentState.NONE;\n\n//     id: JobID;\n//     key: string;\n//     narrativeID: number | null;\n//     narrativeTitle: string;\n//     appID: string;\n//     appTitle: string;\n//     queuedAt: EpochTime;\n//     queuedElapsed: number;\n//     clientGroups: Array<string>;\n//     username: string;\n// }\n\n// export interface JobRunningState {\n//     tstate: TemporalState.RUNNING;\n//     pstate: PermanentState.NONE;\n\n//     id: JobID;\n//     key: string;\n//     narrativeID: number | null;\n//     narrativeTitle: string;\n//     appID: string;\n//     appTitle: string;\n//     queuedAt: EpochTime;\n//     runAt: EpochTime;\n//     queuedElapsed: number;\n//     runElapsed: number;\n//     clientGroups: Array<string>;\n//     username: string;\n// }\n\n// export interface JobFinishedState {\n//     tstate: TemporalState.NONE;\n//     pstate: PermanentState.SUCCESS;\n\n//     id: JobID;\n//     key: string;\n//     narrativeID: number | null;\n//     narrativeTitle: string;\n//     appID: string;\n//     appTitle: string;\n//     queuedAt: EpochTime;\n//     runAt: EpochTime;\n//     finishAt: EpochTime;\n//     queuedElapsed: number;\n//     runElapsed: number;\n//     clientGroups: Array<string>;\n//     username: string;\n// }\n\n// export interface JobCanceledWhileQueuedState {\n//     tstate: TemporalState.QUEUED;\n//     pstate: PermanentState.SUCCESS;\n\n//     id: JobID;\n//     key: string;\n//     narrativeID: number | null;\n//     narrativeTitle: string;\n//     appID: string;\n//     appTitle: string;\n//     queuedAt: EpochTime;\n//     runAt: EpochTime;\n//     finishAt: EpochTime;\n//     queuedElapsed: number;\n//     runElapsed: number;\n//     clientGroups: Array<string>;\n//     username: string;\n// }\n\n\nexport interface JobQueued {\n    status: JobStatus.QUEUED;\n    id: JobID;\n    key: string;\n    narrativeID: number | null;\n    narrativeTitle: string;\n    appID: string;\n    appTitle: string;\n    queuedAt: EpochTime;\n    queuedElapsed: number;\n    clientGroups: Array<string>;\n    username: string;\n}\n\nexport interface JobRunning {\n    status: JobStatus.RUNNING;\n    id: JobID;\n    key: string;\n    narrativeID: number | null;\n    narrativeTitle: string;\n    appID: string;\n    appTitle: string;\n    queuedAt: EpochTime;\n    runAt: EpochTime;\n    queuedElapsed: number;\n    runElapsed: number;\n    clientGroups: Array<string>;\n    username: string;\n}\n\nexport interface JobFinished {\n    status: JobStatus.FINISHED;\n    id: JobID;\n    key: string;\n    narrativeID: number | null;\n    narrativeTitle: string;\n    appID: string;\n    appTitle: string;\n    queuedAt: EpochTime;\n    runAt: EpochTime;\n    finishAt: EpochTime;\n    queuedElapsed: number;\n    runElapsed: number;\n    clientGroups: Array<string>;\n    username: string;\n}\n\nexport interface JobCanceledWhileQueued {\n    status: JobStatus.CANCELED_QUEUED;\n    id: JobID;\n    key: string;\n    narrativeID: number | null;\n    narrativeTitle: string;\n    appID: string;\n    appTitle: string;\n    queuedAt: EpochTime;\n    finishAt: EpochTime;\n    queuedElapsed: number;\n    clientGroups: Array<string>;\n    username: string;\n}\n\nexport interface JobCanceledWhileRunning {\n    status: JobStatus.CANCELED_RUNNING;\n    id: JobID;\n    key: string;\n    narrativeID: number | null;\n    narrativeTitle: string;\n    appID: string;\n    appTitle: string;\n    queuedAt: EpochTime;\n    runAt: EpochTime;\n    finishAt: EpochTime;\n    queuedElapsed: number;\n    runElapsed: number;\n    clientGroups: Array<string>;\n    username: string;\n}\n\nexport interface JobErroredWhileQueued {\n    status: JobStatus.ERRORED_QUEUED;\n    id: JobID;\n    key: string;\n    narrativeID: number | null;\n    narrativeTitle: string;\n    appID: string;\n    appTitle: string;\n    queuedAt: EpochTime;\n    finishAt: EpochTime;\n    queuedElapsed: number;\n    message: string;\n    clientGroups: Array<string>;\n    username: string;\n}\n\nexport interface JobErroredWhileRunning {\n    status: JobStatus.ERRORED_RUNNING;\n    id: JobID;\n    key: string;\n    narrativeID: number | null;\n    narrativeTitle: string;\n    appID: string;\n    appTitle: string;\n    queuedAt: EpochTime;\n    runAt: EpochTime;\n    finishAt: EpochTime;\n    queuedElapsed: number;\n    runElapsed: number;\n    message: string;\n    clientGroups: Array<string>;\n    username: string;\n}\n\nexport type Job = JobQueued | JobRunning | JobFinished | JobCanceledWhileQueued | JobCanceledWhileRunning | JobErroredWhileQueued | JobErroredWhileRunning;\n\ninterface JobsState {\n    jobs: Array<Job>;\n}\n\nexport type EpochTime = number;\n\nexport type TimeRangePresets = 'lastHour' | 'last48Hours' | 'lastWeek' | 'lastMonth';\n\nexport interface TimeRangePreset {\n    kind: 'preset';\n    preset: TimeRangePresets;\n}\n\nexport interface TimeRangeLiteral {\n    kind: 'literal';\n    start: EpochTime;\n    end: EpochTime;\n}\n\nexport type TimeRange = TimeRangePreset | TimeRangeLiteral;\n\nexport interface TimeRange2 {\n    preset: TimeRangePresets;\n    start: EpochTime | null;\n    end: EpochTime | null;\n}\n\nexport interface SortSpec {\n    field: string;\n    direction: 'ascending' | 'descending';\n}\n\nexport interface JobsSearchExpression {\n    query: string;\n    timeRange: TimeRange;\n    sort: SortSpec | null;\n    // timeRangeStart: EpochTime;\n    // timeRangeEnd: EpochTime;\n    jobStatus: Array<JobStatus>;\n    forceSearch: boolean;\n}\n\nexport enum SearchState {\n    NONE = 0,\n    SEARCHING,\n    SEARCHED,\n    ERROR\n}\n\nexport enum ComponentLoadingState {\n    NONE = 0,\n    LOADING,\n    SUCCESS,\n    ERROR\n}\n\n// The Store!\n\nexport interface MainView {\n    loadingState: ComponentLoadingState;\n    error: AppError | null;\n    isAdmin: boolean;\n}\n\nexport interface MyJobsView {\n    searchState: SearchState;\n    searchExpression: JobsSearchExpression | null;\n    jobsFetchedAt: EpochTime | null;\n    rawJobs: Array<Job>;\n    jobs: Array<Job>;\n}\n\nexport interface UserJobsView {\n    searchState: SearchState;\n    searchExpression: JobsSearchExpression | null;\n    jobsFetchedAt: EpochTime | null;\n    rawJobs: Array<Job>;\n    jobs: Array<Job>;\n}\n\nexport interface MyStoreState {\n    views: {\n        mainView: MainView;\n        myJobsView: MyJobsView;\n        userJobsView: UserJobsView;\n        publicAppStatsView: PublicAppStatsView;\n        userRunSummaryView: UserRunSummaryView;\n    };\n}\n\nexport interface StoreState extends BaseStoreState, MyStoreState {\n    // entities: {\n    //     jobs: {\n    //         byId: Map<string, Job>\n    //     }\n    // },\n\n}\n\n// App Stats\n\nexport interface PublicAppStatsQuery {\n    query: string;\n}\n\nexport interface PublicAppStatsView {\n    searchState: SearchState;\n    rawAppStats: Array<AppStat>;\n    appStats: Array<AppStat>;\n    query: PublicAppStatsQuery;\n}\n\nexport interface AppStat {\n    appId: string;\n    functionId: string;\n    functionTitle: string;\n    moduleId: string;\n    moduleTitle: string;\n    runCount: number;\n    errorCount: number;\n    successRate: number;\n    averageRunTime: number;\n    averageQueueTime: number;\n    totalRunTime: number;\n}\n\n/**\n * User Run Summary types\n */\n\nexport interface UserRunSummaryQuery {\n    query: string;\n}\n\nexport interface UserRunSummaryStat {\n    username: string;\n    isApp: boolean;\n    appId: string | null;\n    moduleName: string;\n    functionName: string;\n    runCount: number;\n}\n\nexport interface UserRunSummaryView {\n    searchState: SearchState;\n    userRunSummary: Array<UserRunSummaryStat>;\n    query: UserRunSummaryQuery;\n}\n\nexport function makeInitialStoreState(): StoreState {\n    const jobs: Array<Job> = [];\n    const baseState = makeBaseStoreState();\n    return {\n        ...baseState,\n        views: {\n            mainView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                isAdmin: false\n            },\n            myJobsView: {\n                searchState: SearchState.NONE,\n                searchExpression: null,\n                jobsFetchedAt: null,\n                rawJobs: jobs,\n                jobs\n            },\n            userJobsView: {\n                searchState: SearchState.NONE,\n                searchExpression: null,\n                jobsFetchedAt: null,\n                rawJobs: jobs,\n                jobs\n            },\n            publicAppStatsView: {\n                searchState: SearchState.NONE,\n                rawAppStats: [],\n                appStats: [],\n                query: {\n                    query: ''\n                }\n            },\n            userRunSummaryView: {\n                searchState: SearchState.NONE,\n                userRunSummary: [],\n                query: {\n                    query: ''\n                }\n            }\n        }\n    };\n}\n\nexport function createReduxStore() {\n    return createStore(reducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n}\n","import { Action, Reducer } from 'redux';\nimport { StoreState } from '../store';\n\nimport { baseReducer } from '@kbase/ui-components';\nimport { BaseStoreState } from '@kbase/ui-components';\nimport myJobsReducer from './myJobs';\nimport userJobsReducer from './userJobs';\nimport appReducer from './app';\nimport publicAppStatsReducer from './publicAppStats';\nimport userRunSummary from './userRunSummary';\n\n// export default function reducer<StoreState, Action>(state: StoreState, action: Action): StoreState {\n//     return state;\n// }\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    // TODO: we cast state to baseStore state, which should be fine since StoreState extends BaseStoreState.\n    // and then we recast to store state when returning to make ts happy; the actual state object which passes\n    // into and ...\n    // WARNING: this may break if a base reducer (app or auth) does not copy all the state with ...state.\n    // we probably need to use combine reducers?\n    const baseState = baseReducer(state as BaseStoreState, action);\n    if (baseState) {\n        return baseState as StoreState;\n    }\n    return (\n        appReducer(state, action) ||\n        myJobsReducer(state, action) ||\n        userJobsReducer(state, action) ||\n        publicAppStatsReducer(state, action) ||\n        userRunSummary(state, action) ||\n        state\n    );\n};\n\nexport default reducer;\n","import React from 'react';\nimport { Tag, Icon } from 'antd';\nimport { JobStatus, Job } from '../redux/store';\nimport { NiceElapsedTime, NiceRelativeTime } from '@kbase/ui-components';\n\n/**\n* Translates a job status value to a label, with optional icon, suitable for\n* display as the child of the job status tag.\n*\n* @param status - the status of the job\n*\n* @note Since the switch is over an enum, we don't have to worry about the default case\n*/\nfunction jobStatusLabel(status: JobStatus): JSX.Element | string {\n    switch (status) {\n        case JobStatus.QUEUED:\n            return (\n                <span>\n                    <Icon type=\"loading\" spin /> Queued\n                </span>\n            );\n        case JobStatus.RUNNING:\n            return (\n                <span>\n                    <Icon type=\"loading-3-quarters\" spin /> Running\n                </span>\n            );\n        case JobStatus.CANCELED_QUEUED:\n        case JobStatus.CANCELED_RUNNING:\n            return 'Canceled';\n        case JobStatus.FINISHED:\n            return 'Success';\n        case JobStatus.ERRORED_QUEUED:\n        case JobStatus.ERRORED_RUNNING:\n            return 'Errored';\n        default:\n            throw new Error('Invalid job status');\n    }\n}\n\n/**\n * Translates a job status value to a color value acceptable for the color\n * prop for the job status tag.\n *\n * @param status - the status of the job\n */\nexport function jobColor(status: JobStatus): string {\n    switch (status) {\n        case JobStatus.QUEUED:\n            return 'orange';\n        case JobStatus.RUNNING:\n            return 'blue';\n        case JobStatus.CANCELED_QUEUED:\n        case JobStatus.CANCELED_RUNNING:\n            return 'gray';\n        case JobStatus.FINISHED:\n            return 'green';\n        case JobStatus.ERRORED_QUEUED:\n        case JobStatus.ERRORED_RUNNING:\n            return 'red';\n        default:\n            throw new Error('Invalid job status');\n    }\n}\n\nexport interface JobStatusProps {\n    job: Job\n    showTiming?: boolean\n}\n\ninterface JobStatusState {\n\n}\n\nexport default class JobStatusComponent extends React.Component<JobStatusProps, JobStatusState> {\n\n    renderTag() {\n        const label = jobStatusLabel(this.props.job.status);\n        const color = jobColor(this.props.job.status);\n        return <Tag color={color}>{label}</Tag>\n    }\n\n    renderTiming() {\n        switch (this.props.job.status) {\n            case JobStatus.QUEUED:\n                return <span>\n                    <NiceElapsedTime from={this.props.job.queuedAt} useClock={true} />\n                </span>\n            case JobStatus.RUNNING:\n                return <span>\n                    <NiceElapsedTime from={this.props.job.runAt} useClock={true} />\n                </span>\n            case JobStatus.FINISHED:\n            case JobStatus.ERRORED_QUEUED:\n            case JobStatus.ERRORED_RUNNING:\n            case JobStatus.CANCELED_QUEUED:\n            case JobStatus.CANCELED_RUNNING:\n                return <span>\n                    <NiceRelativeTime time={new Date(this.props.job.finishAt)} />\n                </span>\n        }\n    }\n\n    render() {\n        const timing = this.props.showTiming ? this.renderTiming() : '';\n        return (\n            <span>\n                {this.renderTag()}\n                {timing}\n            </span>\n        )\n    }\n}","import React from 'react';\nimport './style.css';\nimport { Job, JobStatus } from '../../redux/store';\nimport { JobLogLine, JobLog } from './state';\nimport { Table, Tooltip, Empty, Button, Dropdown, Menu, Spin } from 'antd';\nimport { ClickParam } from 'antd/lib/menu';\nimport Papa from 'papaparse';\nimport ButtonGroup from 'antd/lib/button/button-group';\n\nenum PlayState {\n    NONE,\n    PLAYING,\n    PAUSED,\n    DISABLED\n}\n\nexport interface JobLogProps {\n    job: Job;\n    log: JobLog;\n}\n\ninterface JobLogState {\n    playState: PlayState;\n    isPaused: boolean;\n}\n\nexport default class JobLogs extends React.Component<JobLogProps, JobLogState> {\n    playLogTimer: number;\n    bodyRef: React.RefObject<HTMLDivElement>\n    // a hack to detect state change... \n    currentJobStatus: JobStatus | null;\n\n    constructor(params: JobLogProps) {\n        super(params);\n        this.playLogTimer = 0;\n        this.bodyRef = React.createRef();\n        this.currentJobStatus = null;\n        this.state = {\n            playState: PlayState.NONE,\n            isPaused: false\n        }\n    }\n    componentDidMount() {\n        this.currentJobStatus = this.props.job.status;\n\n        // if (this.state.playState !== PlayState.PLAYING) {\n        //     return;\n        // }\n        if (this.state.isPaused) {\n            return;\n        }\n        if (!this.isActive()) {\n            return;\n        }\n        this.scrollToBottom();\n    }\n    scrollToBottom() {\n        if (this.bodyRef.current === null) {\n            return;\n        }\n        this.bodyRef.current.scrollTop = this.bodyRef.current.scrollHeight;\n    }\n    componentDidUpdate() {\n        const lastJobStatus = this.currentJobStatus;\n        this.currentJobStatus = this.props.job.status;\n        // if (this.state.playState !== PlayState.PLAYING) {\n        //     return;\n        // }\n        if (this.state.isPaused) {\n            return;\n        }\n        if (!this.isActive()) {\n            if (lastJobStatus === JobStatus.RUNNING &&\n                this.props.job.status === JobStatus.RUNNING) {\n                return;\n            }\n        }\n        this.scrollToBottom();\n    }\n    isActive() {\n        return this.props.job.status === JobStatus.QUEUED ||\n            this.props.job.status === JobStatus.RUNNING;\n    }\n    renderLastLine() {\n        let message;\n\n        if (this.isActive()) {\n            message = <span>\n                Polling for additional log entries...{' '}\n                <Spin size=\"small\" />\n            </span>\n        } else {\n            message = <div style={{ textAlign: 'center', fontStyle: 'italic' }}>Log complete</div>\n        }\n        return (\n            <div className=\"FlexTable-row\" key='END' style={{ backgroundColor: 'rgba(200, 200, 200, 0.5)' }} data-end=\"end\">\n                <div className=\"FlexTable-col\"></div>\n                <div className=\"FlexTable-col\">{message}</div>\n            </div>\n        )\n    }\n    renderJobLog() {\n        const lines = this.props.log;\n        if (lines.length === 0) {\n            return (\n                <Empty />\n            )\n        }\n        const rows = lines.map((line) => {\n            const rowStyle: React.CSSProperties = {};\n            if (line.isError) {\n                rowStyle.color = 'red';\n            }\n            return <div className=\"FlexTable-row\" style={rowStyle} key={line.lineNumber}>\n                <div className=\"FlexTable-col\">\n                    {line.lineNumber}\n                </div>\n                <div className=\"FlexTable-col\">\n                    {line.line}\n                </div>\n            </div>\n        })\n        rows.push(\n            this.renderLastLine()\n        )\n        return (\n            <div className=\"FlexTable\" key=\"log\">\n                <div className=\"FlexTable-header\">\n                    <div className=\"FlexTable-row\">\n                        <div className=\"FlexTable-col\">Line #</div>\n                        <div className=\"FlexTable-col\">Log line</div>\n                    </div>\n                </div>\n                <div className=\"FlexTable-body\" ref={this.bodyRef}>\n                    {rows}\n                </div>\n            </div>\n        )\n    }\n\n    renderJobLogRow() {\n\n    }\n    renderJobLogLines() {\n        return (\n            <Table\n                dataSource={this.props.log}\n                size=\"small\"\n                // scroll={{ y: 400 }}\n                rowKey={(logLine: JobLogLine) => {\n                    return String(logLine.lineNumber);\n                }}\n                // pagination={{ position: 'top', showSizeChanger: true }}\n                pagination={false}\n                scroll={{ y: '100%' }}\n                rowClassName={(line: JobLogLine) => {\n                    if (line.isError) {\n                        return 'JobLog-errorRow';\n                    } else {\n                        return 'JobLog-normalRow';\n                    }\n                }}\n            >\n                <Table.Column\n                    title=\"Row\"\n                    dataIndex=\"lineNumber\"\n                    key=\"lineNumber\"\n                    width=\"8%\"\n                    render={(lineNumber: number, logLine: JobLogLine) => {\n                        const numberDisplay = new Intl.NumberFormat('en-US', { useGrouping: true }).format(lineNumber);\n                        if (logLine.isError) {\n                            return <span className=\"JobLog-errorText\">{numberDisplay}</span>;\n                        }\n                        return numberDisplay;\n                    }}\n                    sorter={(a: JobLogLine, b: JobLogLine) => {\n                        return a.lineNumber - b.lineNumber;\n                    }}\n                />\n                <Table.Column\n                    title=\"Log line\"\n                    dataIndex=\"line\"\n                    key=\"line\"\n                    width=\"92%\"\n                    render={(line: string, logLine: JobLogLine) => {\n                        let row;\n                        if (logLine.isError) {\n                            row = <span className=\"JobLog-errorText\">{line}</span>;\n                        } else {\n                            row = <span>{line}</span>;\n                        }\n                        return <Tooltip title={line}>{row}</Tooltip>;\n                    }}\n                />\n            </Table>\n        );\n    }\n    downloadLog(type: string, log: JobLog) {\n        function download(filename: string, contentType: string, content: string) {\n            const downloadLink = document.createElement('a');\n            const downloadContent = new Blob([content]);\n            downloadLink.href = URL.createObjectURL(downloadContent);\n            downloadLink.download = filename;\n            downloadLink.style.visibility = 'none';\n            downloadLink.type = contentType;\n            document.body.appendChild(downloadLink);\n            downloadLink.click();\n            document.body.removeChild(downloadLink);\n            URL.revokeObjectURL(downloadLink.href);\n        }\n        function logToCSV(log: JobLog): string {\n            return Papa.unparse(log);\n        }\n        function logToTSV(log: JobLog): string {\n            return Papa.unparse(log, {\n                delimiter: '\\t'\n            });\n        }\n        function logToJSON(log: JobLog): string {\n            return JSON.stringify(log);\n        }\n        function logToText(log: JobLog): string {\n            return log.map((line) => {\n                return line.line;\n            }).join('\\n');\n        }\n\n        let contentType: string;\n        let content: string;\n        switch (type) {\n            case 'tsv':\n                contentType = 'application/octet-stream';\n                content = logToTSV(log);\n                break;\n            case 'json':\n                contentType = 'application/octet-stream';\n                content = logToJSON(log);\n                break;\n            case 'text':\n                contentType = 'text/plain';\n                content = logToText(log);\n                break;\n            default:\n            case 'csv':\n                contentType = 'application/octet-stream';\n                content = logToCSV(log);\n                break;\n        }\n\n        download('job-log.' + type, contentType, content)\n    }\n\n    onMenuClick(param: ClickParam | undefined) {\n        if (!param) {\n            return\n        }\n        this.downloadLog(param.key, this.props.log);\n    }\n\n    onPlayLog() {\n        // this.props.updateJobLog();\n        this.scrollToBottom();\n        this.setState({\n            playState: PlayState.PLAYING,\n            isPaused: false\n        })\n    }\n\n    onPauseLog() {\n        this.setState({\n            playState: PlayState.PAUSED,\n            isPaused: true\n        })\n    }\n\n    renderPlayPauseTooltips() {\n        let playTooltip: string;\n        let pauseTooltip: string;\n        const isPaused = this.state.isPaused;\n\n        switch (this.props.job.status) {\n            case JobStatus.RUNNING:\n                if (isPaused) {\n                    playTooltip = 'Click to automatically scroll to the bottom of the logs when new entries arrive';\n                    pauseTooltip = 'Automatic scrolling is already paused';\n                } else {\n                    playTooltip = 'Automatic scrolling is already active';\n                    pauseTooltip = 'Click to pause automatic scrolling to the bottom of the logs when new entries arrive';\n                }\n                break;\n            case JobStatus.QUEUED:\n            case JobStatus.FINISHED:\n            case JobStatus.ERRORED_QUEUED:\n            case JobStatus.ERRORED_RUNNING:\n            case JobStatus.CANCELED_QUEUED:\n            case JobStatus.CANCELED_RUNNING:\n            default:\n                playTooltip = 'Log playing only available when the job is running';\n                pauseTooltip = 'Log playing only available when the job is running';\n                break;\n\n        }\n        return [playTooltip, pauseTooltip];\n    }\n\n    renderPlayPause() {\n        let irrelevant: boolean;\n\n        // Does the job status make log playing irrelevant.\n        switch (this.props.job.status) {\n            case JobStatus.QUEUED:\n                irrelevant = true;\n                break;\n            case JobStatus.RUNNING:\n                irrelevant = false;\n                break;\n            case JobStatus.FINISHED:\n            case JobStatus.ERRORED_QUEUED:\n            case JobStatus.ERRORED_RUNNING:\n            case JobStatus.CANCELED_QUEUED:\n            case JobStatus.CANCELED_RUNNING:\n            default:\n                irrelevant = true;\n        }\n\n        const [playTooltip, pauseTooltip] = this.renderPlayPauseTooltips();\n\n        return (\n            <ButtonGroup >\n                <Tooltip title={playTooltip}>\n                    <Button icon=\"caret-right\" disabled={irrelevant || !this.state.isPaused} onClick={this.onPlayLog.bind(this)} />\n                </Tooltip>\n                <Tooltip title={pauseTooltip}>\n                    <Button icon=\"pause\" disabled={irrelevant || this.state.isPaused} onClick={this.onPauseLog.bind(this)} />\n                </Tooltip>\n            </ButtonGroup>\n        )\n    }\n    renderToolbar() {\n        const disabled = this.props.log.length === 0;\n        const menu = (\n            <Menu onClick={this.onMenuClick.bind(this)}>\n                <Menu.Item key=\"csv\" disabled={disabled}>CSV</Menu.Item>\n                <Menu.Item key=\"tsv\" disabled={disabled}>TSV</Menu.Item>\n                <Menu.Item key=\"json\" disabled={disabled}>JSON</Menu.Item>\n                <Menu.Item key=\"text\" disabled={disabled}>TEXT</Menu.Item>\n            </Menu>\n        )\n        return (\n            <div key=\"toolbar\">\n                <Dropdown overlay={menu}>\n                    <Button icon=\"download\"></Button>\n                </Dropdown>\n                {' '}\n                {this.renderPlayPause()}\n            </div>\n        )\n    }\n    render() {\n        return <div className=\"JobLog\">\n            {this.renderToolbar()}\n            {this.renderJobLog()}\n        </div>\n    }\n    // render() {\n    //     return this.renderJobLog();\n    // }\n}\n","import React from 'react';\nimport { Button } from 'antd';\nimport './FlexTabs.css';\n\nexport interface Tab {\n    tab: string;\n    title: JSX.Element | string;\n    component: JSX.Element\n}\n\nexport interface TabsProps {\n    tabs: Array<Tab>\n}\n\ninterface TabsState {\n    selectedTabIndex: number;\n}\n\nexport default class Tabs extends React.Component<TabsProps, TabsState> {\n    constructor(props: TabsProps) {\n        super(props);\n        this.state = {\n            selectedTabIndex: 0\n        };\n    }\n\n    selectTab(tabIndex: number) {\n        this.setState({ selectedTabIndex: tabIndex })\n    }\n\n    renderTabs() {\n        return this.props.tabs.map((tab, index) => {\n            const classNames = ['FlexTabs-tab']\n            if (index === this.state.selectedTabIndex) {\n                classNames.push('FlexTabs-tab-active');\n            }\n            return (\n                <span key={String(index)} className={classNames.join(' ')}>\n                    <Button type=\"link\" onClick={() => { this.selectTab(index) }}>{tab.title}</Button>\n                </span>\n            )\n        })\n    }\n\n    renderTabBody() {\n        return this.props.tabs[this.state.selectedTabIndex].component\n    }\n\n    render() {\n        return <div className=\"FlexTabs\">\n            <div className=\"FlexTabs-header\">\n                {this.renderTabs()}\n            </div>\n            <div className=\"FlexTabs-body\">\n                {this.renderTabBody()}\n            </div>\n        </div>\n    }\n}","import React from 'react';\n\nexport interface UILinkProps {\n    path: string;\n    openIn: 'same-window' | 'new-tab';\n}\n\ninterface UILinkState {\n\n}\n\nexport default class UILink extends React.Component<UILinkProps, UILinkState> {\n    render() {\n        const href = `/#${this.props.path}`;\n        switch (this.props.openIn) {\n            case 'same-window':\n                return <a href={href} target='_parent'>\n                    {this.props.children}\n                </a>;\n            case 'new-tab':\n                return <a href={href} target='_blank' rel=\"noopener noreferrer\">\n                    {this.props.children}\n                </a>;\n        }\n    }\n}","import React from 'react';\n\nexport interface NarrativeLinkProps {\n    narrativeID: number;\n}\n\ninterface NarrativeLinkState {\n\n}\n\nexport default class NarrativeLink extends React.Component<NarrativeLinkProps, NarrativeLinkState> {\n    render() {\n        const href = `/narrative/${this.props.narrativeID}`;\n        return <a href={href} target='_blank' rel=\"noopener noreferrer\">\n            {this.props.children}\n        </a>;\n    }\n}","import React from 'react';\nimport { Job, JobStatus } from '../redux/store';\nimport { NiceRelativeTime, NiceElapsedTime } from '@kbase/ui-components';\nimport JobStatusBadge, { jobColor } from './JobStatus';\nimport { Spin } from 'antd';\nimport UILink from './UILink';\nimport NarrativeLink from './NarrativeLink';\n\nexport interface Props {\n    job: Job;\n}\n\ninterface State {\n\n}\n\nexport default class JobInfo extends React.Component<Props, State> {\n    renderSubmitted() {\n        const date = this.props.job.queuedAt;\n        if (!date) {\n            return <span>** empty **</span>;\n        }\n        return <NiceRelativeTime time={new Date(date)} />;\n    }\n    renderQueuedFor() {\n        const job = this.props.job;\n        switch (job.status) {\n            case JobStatus.QUEUED:\n                return <NiceElapsedTime from={job.queuedAt} precision={2} useClock={true} />;\n            case JobStatus.RUNNING:\n                return <NiceElapsedTime from={job.queuedAt} to={job.runAt} precision={2} />;\n            case JobStatus.FINISHED:\n                return <NiceElapsedTime from={job.queuedAt} to={job.runAt} precision={2} />;\n            case JobStatus.CANCELED_QUEUED:\n                return <NiceElapsedTime from={job.queuedAt} to={job.finishAt} precision={2} />;\n            case JobStatus.CANCELED_RUNNING:\n                return <NiceElapsedTime from={job.queuedAt} to={job.runAt} precision={2} />;\n            case JobStatus.ERRORED_QUEUED:\n                return <NiceElapsedTime from={job.queuedAt} to={job.finishAt} precision={2} />;\n            case JobStatus.ERRORED_RUNNING:\n                return <NiceElapsedTime from={job.queuedAt} to={job.runAt} precision={2} />;\n        }\n    }\n    renderRunFor() {\n        const job = this.props.job;\n        switch (job.status) {\n            case JobStatus.QUEUED:\n                return <span>-</span>;\n            case JobStatus.RUNNING:\n                return <NiceElapsedTime from={job.runAt} precision={2} useClock={true} />;\n            case JobStatus.FINISHED:\n                return <NiceElapsedTime from={job.runAt} to={job.finishAt} precision={2} />;\n            case JobStatus.CANCELED_QUEUED:\n                return <span>-</span>;\n            case JobStatus.CANCELED_RUNNING:\n                return <NiceElapsedTime from={job.runAt} to={job.finishAt} precision={2} />;\n            case JobStatus.ERRORED_QUEUED:\n                return <span>-</span>;\n            case JobStatus.ERRORED_RUNNING:\n                return <NiceElapsedTime from={job.runAt} to={job.finishAt} precision={2} />;\n        }\n        // if (!this.props.job.runElapsed) {\n        //     return <span>-</span>\n        // }\n        // return <NiceElapsedTime duration={this.props.job.runElapsed} precision={2} />;\n    }\n\n    renderStateSpinner(jobStatus: JobStatus) {\n        if (this.props.job.status === jobStatus) {\n            return <span>\n                {' '}\n                <Spin size=\"small\" style={{ color: jobColor(jobStatus) }} />\n            </span>;\n        }\n    }\n\n    renderNarrativeLink() {\n        const id = this.props.job.narrativeID;\n        if (id === null) {\n            return;\n        }\n        return <NarrativeLink narrativeID={id}>\n            {this.props.job.narrativeTitle}\n        </NarrativeLink>;\n    }\n\n    render() {\n        return (\n            <div className=\"JobInfo InfoTable\">\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Job ID\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.job.id}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Status\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        <JobStatusBadge job={this.props.job} />\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Narrative\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.renderNarrativeLink()}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        App\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        <UILink path={`catalog/apps/${this.props.job.appID}`}\n                            openIn='new-tab'>\n                            {this.props.job.appTitle}\n                        </UILink>\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Submitted\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.renderSubmitted()}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Queued For\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.renderQueuedFor()}\n                        {this.renderStateSpinner(JobStatus.QUEUED)}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Run For\n                </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.renderRunFor()}\n                        {this.renderStateSpinner(JobStatus.RUNNING)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport { Spin, Alert } from 'antd';\nimport FlexTabs from '../FlexTabs';\nimport JobLog from '../JobLog/view';\nimport JobInfo from '../JobInfo';\nimport './style.css'\nimport { JobLogView, JobLogState, JobLogViewError } from './state';\nimport JobStatusBadge from '../JobStatus';\n\nexport interface JobDetailProps {\n    view: JobLogView\n}\n\ninterface JobDetailState {\n}\n\nexport default class JobDetail extends React.Component<JobDetailProps, JobDetailState> {\n    renderLoading() {\n        return (\n            <div className=\"FullyCenteredBox\">\n                <span>Loading ... <Spin /></span>\n            </div>\n        );\n    }\n\n    renderQueued() {\n        return (\n            <div className=\"FullyCenteredBox\">\n                <span>\n                    The job is <i>queued</i>. The log will be displayed when the job starts running ... <Spin />\n                </span>\n            </div >\n        );\n    }\n\n    renderError(view: JobLogViewError) {\n        return (\n            <Alert type=\"error\" message={view.error} />\n        )\n    }\n\n    renderJobLog() {\n        switch (this.props.view.status) {\n            case JobLogState.NONE:\n            case JobLogState.JOB_QUEUED:\n                return this.renderQueued();\n            case JobLogState.INITIAL_LOADING:\n                return this.renderLoading();\n            case JobLogState.ERROR:\n                return this.renderError(this.props.view);\n            case JobLogState.ACTIVE_LOADED:\n            case JobLogState.ACTIVE_LOADING:\n                return <JobLog job={this.props.view.job} log={this.props.view.log} />;\n            case JobLogState.FINISHED_LOADED:\n                return <JobLog job={this.props.view.job} log={this.props.view.log} />;\n        }\n    }\n    renderJobInfo() {\n        switch (this.props.view.status) {\n            case JobLogState.NONE:\n                return this.renderLoading();\n            case JobLogState.JOB_QUEUED:\n                return <JobInfo job={this.props.view.job} />;\n            case JobLogState.INITIAL_LOADING:\n                return this.renderLoading();\n            case JobLogState.ERROR:\n                return this.renderError(this.props.view);\n            case JobLogState.ACTIVE_LOADED:\n            case JobLogState.ACTIVE_LOADING:\n                return <JobInfo job={this.props.view.job} />;\n            case JobLogState.FINISHED_LOADED:\n                return <JobInfo job={this.props.view.job} />;\n        }\n    }\n    renderTest() {\n        const content = Array.from(Array(100).keys()).map((i) => {\n            return <div style={{ flex: '0 0 auto', display: 'flex', flexDirection: 'row', borderBottom: '1px silver solid' }} key={String(i)}>\n                <div style={{ flex: '0 0 auto', padding: '4px', overflowWrap: 'break-word', wordWrap: 'break-word' }}>\n                    {i}\n                </div>\n            </div>\n        });\n        return (\n            <div style={{ flex: '1 1 0px', display: 'flex', flexDirection: 'column', minHeight: 0 }}>\n                <div>Header Here</div>\n                <div style={{ flex: '1 1 0px', display: 'flex', flexDirection: 'column', minHeight: 0, overflowY: 'auto' }}>\n                    {content}\n                </div>\n            </div>\n        )\n    }\n    renderTest2() {\n        const content = Array.from(Array(100).keys()).map((i) => {\n            return <div className=\"FlexTable-row\" key={String(i)}>\n                <div className=\"FlexTable-col\">{i}</div>\n                <div className=\"FlexTable-col\">This is row {i}</div>\n            </div>\n        });\n        return (\n            <div className=\"FlexTable\">\n                <div className=\"FlexTable-header\">\n                    <div className=\"FlexTable-row\">\n                        <div className=\"FlexTable-col\">#</div>\n                        <div className=\"FlexTable-col\">Data</div>\n                    </div>\n                </div>\n                <div className=\"FlexTable-body\">\n                    {content}\n                </div>\n            </div>\n        )\n    }\n    renderStatus() {\n        switch (this.props.view.status) {\n            case JobLogState.NONE:\n            case JobLogState.INITIAL_LOADING:\n                return <Spin size=\"small\" />\n            case JobLogState.ERROR:\n                return <Alert type=\"error\" message={this.props.view.error} />\n            default:\n                return <JobStatusBadge job={this.props.view.job} showTiming={true} />\n        }\n    }\n    renderMiniDetails() {\n        return <div style={{ flex: '0 0 auto' }}>\n            {this.renderStatus()}\n        </div>\n\n    }\n    render() {\n        const tabs = [\n            {\n                tab: 'log',\n                title: 'Log',\n                component: this.renderJobLog()\n            },\n            {\n                tab: 'detail',\n                title: 'Detail',\n                component: this.renderJobInfo()\n            },\n        ]\n        return (\n            <React.Fragment>\n                {this.renderMiniDetails()}\n                <FlexTabs tabs={tabs} />\n            </React.Fragment>\n        )\n    }\n}","import { DynamicServiceClient, DynamicServiceClientParams } from '@kbase/ui-lib';\n\n// Metrics client --\n// TODO: move\n// TODO: use a more dynamic dynamic service client??\n\ninterface MetricsServiceParams extends DynamicServiceClientParams { }\n\n\nexport interface JobState {\n    app_id: string;\n    client_groups: Array<string>;\n    user?: string;\n\n    complete: boolean;\n    error: boolean;\n    status: string;\n    state: string;\n\n    creation_time: number;\n    exec_start_time?: number;\n    modification_time?: number;\n    finish_time?: number;\n\n    job_id: string;\n    method: string;\n\n    wsid: string;\n    narrative_objNo: number;\n\n    narrative_name: string;\n    workspace_name: string;\n}\n\n\ninterface GetAppMetricsParam {\n    epoch_range: [number, number];\n    user_ids: Array<string>;\n}\ninterface GetAppMetricsResult {\n    job_states: Array<JobState>;\n}\n\ninterface GetJobsParam {\n    epoch_range: [number, number];\n    user_ids: Array<string>;\n}\ninterface GetJobsResult {\n    job_states: Array<JobState>;\n    total_count: number;\n}\n\ninterface GetJobParam {\n    job_id: string;\n}\ninterface GetJobResult {\n    job_state: JobState;\n}\n\nexport default class MetricsServiceClient extends DynamicServiceClient {\n    static module: string = 'kb_Metrics';\n\n    async getJobs({ epoch_range, user_ids }: GetJobsParam): Promise<GetJobsResult> {\n        const result = await this.callFunc<[GetJobsParam], [GetJobsResult]>('get_jobs', [\n            {\n                epoch_range,\n                user_ids\n            }\n        ]);\n        return result[0];\n    }\n\n    async getJob({ job_id }: GetJobParam): Promise<GetJobResult> {\n        const result = await this.callFunc<[GetJobParam], [GetJobResult]>('get_job', [\n            {\n                job_id\n            }\n        ]);\n        return result[0];\n    }\n\n    async getAppMetrics({ epoch_range, user_ids }: GetAppMetricsParam): Promise<GetAppMetricsResult> {\n        const result = await this.callFunc<[GetAppMetricsParam], [GetAppMetricsResult]>('get_job', [\n            {\n                epoch_range,\n                user_ids\n            }\n        ]);\n        return result[0];\n    }\n}\n","import { JobStatus, Job, EpochTime, TimeRangePresets, TimeRange, JobQueued, JobRunning, JobFinished, JobCanceledWhileQueued, JobCanceledWhileRunning, JobErroredWhileQueued, JobErroredWhileRunning } from '../store';\nimport { JobState } from '../../lib/MetricsServiceClient';\n\nfunction getJobStatus(job: JobState): JobStatus {\n    switch (job.state) {\n        case 'QUEUED': return JobStatus.QUEUED;\n        case 'RUNNING': return JobStatus.RUNNING;\n        case 'FINISHED': return JobStatus.FINISHED;\n        case 'CANCELED_QUEUED': return JobStatus.CANCELED_QUEUED;\n        case 'CANCELED_RUNNING': return JobStatus.CANCELED_QUEUED;\n\n        // case 'ERRORED': return JobStatus.ERRORED;\n        case 'ERRORED_QUEUED':\n            // console.warn('QUEUE_ERRORED', job);\n            return JobStatus.ERRORED_QUEUED;\n        case 'ERRORED_RUNNING':\n            return JobStatus.ERRORED_RUNNING;\n        default:\n            throw new Error('Unknown job state: ' + job.state)\n    }\n    // Use most reliable fields first.\n    // if (job.complete) {\n    //     if (job.error) {\n    //         return JobStatus.ERRORED;\n    //     } else {\n    //         if (job.status === 'done') {\n    //             return JobStatus.FINISHED;\n    //         }\n    //         if (job.status.startsWith('canceled')) {\n    //             return JobStatus.CANCELED;\n    //         }\n    //         if (job.status === 'Unknown error') {\n    //             return JobStatus.ERRORED;\n    //         }\n    //         return JobStatus.ERRORED;\n    //         // TODO: handle this error by creating a new job state - UNKNOWN\n    //         // console.log('detection error', job);\n    //         // throw new Error('Cannot detect job state');\n    //     }\n    // } else {\n    //     if (!job.status || job.status === 'queued') {\n    //         return JobStatus.QUEUED;\n    //     }\n    //     // Various status values indicate the job is running, but\n    //     // we don't need any more evidence because that is the only possible\n    //     // other job state.\n    //     // E.g. 'in-progress', 'running', 'starting job so that it can be finished'\n\n    //     return JobStatus.RUNNING;\n    // }\n\n    // if (job.status === 'Unknown error') {\n    //     return JobStatus.ERRORED;\n    // }\n    // console.log('detection error', job);\n    // throw new Error('Cannot detect job state');\n}\n\nfunction makeJobQueued(job: JobState, username: string): JobQueued {\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status: JobStatus.QUEUED,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        // runAt: job.exec_start_time! || null,\n        queuedElapsed: Date.now() - job.creation_time,\n        clientGroups: job.client_groups,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username\n    };\n}\n\nfunction makeJobRunning(job: JobState, username: string): JobRunning {\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n    if (!job.exec_start_time) {\n        console.error('ERROR: Running job without exec_start_time!', job);\n        throw new Error('Running job without exec_start_time!');\n    }\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status: JobStatus.RUNNING,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        runAt: job.exec_start_time,\n        runElapsed: Date.now() - job.exec_start_time,\n        queuedElapsed: Date.now() - job.creation_time,\n        clientGroups: job.client_groups,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username\n    };\n}\n\nfunction makeJobFinished(job: JobState, username: string): JobFinished {\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n    if (!job.exec_start_time) {\n        throw new Error('Running job without exec_start_time!')\n    }\n    if (!job.finish_time) {\n        throw new Error('Running job without finish_time!')\n    }\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status: JobStatus.FINISHED,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        runAt: job.exec_start_time,\n        runElapsed: job.finish_time - job.exec_start_time,\n        finishAt: job.finish_time,\n        queuedElapsed: Date.now() - job.creation_time,\n        clientGroups: job.client_groups,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username\n    };\n}\n\nfunction makeJobCanceledQueued(job: JobState, username: string): JobCanceledWhileQueued {\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n\n    if (!job.finish_time) {\n        throw new Error('Canceled job without finish_time!')\n    }\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status: JobStatus.CANCELED_QUEUED,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        queuedElapsed: Date.now() - job.creation_time,\n        clientGroups: job.client_groups,\n        finishAt: job.finish_time,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username\n    };\n}\n\nfunction makeJobCanceledRunning(job: JobState, username: string): JobCanceledWhileRunning {\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n    if (!job.exec_start_time) {\n        throw new Error('Canceled job without exec_start_time!')\n    }\n    if (!job.finish_time) {\n        throw new Error('Canceled job without finish_time!')\n    }\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status: JobStatus.CANCELED_RUNNING,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        runAt: job.exec_start_time,\n        runElapsed: job.finish_time - job.exec_start_time,\n        finishAt: job.finish_time,\n        queuedElapsed: Date.now() - job.creation_time,\n        clientGroups: job.client_groups,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username\n    };\n}\n\nfunction makeJobErroredQueued(job: JobState, username: string): JobErroredWhileQueued {\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n    if (!job.finish_time) {\n        throw new Error('Errored job without finish_time!')\n    }\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status: JobStatus.ERRORED_QUEUED,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        finishAt: job.finish_time,\n        queuedElapsed: Date.now() - job.creation_time,\n        clientGroups: job.client_groups,\n        message: job.status,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username\n    };\n}\n\nfunction makeJobErroredRunning(job: JobState, username: string): JobErroredWhileRunning {\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n    if (!job.exec_start_time) {\n        console.error('ERROR: Errored job without exec_start_time!', job);\n        throw new Error('Errored job without exec_start_time!')\n    }\n    if (!job.finish_time) {\n        throw new Error('Errored job without finish_time!')\n    }\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status: JobStatus.ERRORED_RUNNING,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        runAt: job.exec_start_time,\n        runElapsed: job.finish_time - job.exec_start_time,\n        finishAt: job.finish_time,\n        queuedElapsed: Date.now() - job.creation_time,\n        clientGroups: job.client_groups,\n        message: job.status,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username\n    };\n}\n\nexport function serviceJobToUIJob(job: JobState, username: string): Job {\n    const status = getJobStatus(job);\n    switch (status) {\n        case JobStatus.QUEUED:\n            return makeJobQueued(job, username);\n        case JobStatus.RUNNING:\n            return makeJobRunning(job, username);\n        case JobStatus.FINISHED:\n            return makeJobFinished(job, username);\n        case JobStatus.ERRORED_QUEUED:\n            return makeJobErroredQueued(job, username);\n        case JobStatus.ERRORED_RUNNING:\n            return makeJobErroredRunning(job, username);\n        case JobStatus.CANCELED_QUEUED:\n            return makeJobCanceledQueued(job, username);\n        case JobStatus.CANCELED_RUNNING:\n            return makeJobCanceledRunning(job, username);\n        default:\n            throw new Error('Invalid job status: ' + job.status);\n    }\n}\n\nexport function compareTimeRange(job: Job, timeRangeStart: EpochTime, timeRangeEnd: EpochTime) {\n    // // if any of the timestamps fall within the time range, we are good\n    // if (\n    //     [job.queuedAt, job.runAt, job.finishAt].some((eventTime) => {\n    //         if (!eventTime) {\n    //             return false;\n    //         }\n    //         return eventTime > timeRangeStart && eventTime < timeRangeEnd;\n    //     })\n    // ) {\n    //     return true;\n    // }\n\n    // // If the timestamps span the time range, we are also good.\n    // if (!job.queuedAt) {\n    //     return false;\n    // }\n    // // if start past the end time, no match.\n    // if (job.queuedAt > timeRangeEnd) {\n    //     return false;\n    // }\n    // // If start after or on start time, then, we have a match.\n    // if (job.queuedAt >= timeRangeStart) {\n    //     return true;\n    // }\n\n    // // Otherwise, the job started (queued) before out time range, but\n    // // there is still hope, maybe it is still queued or started after the\n    // // start date.\n    // if (!job.runAt) {\n    //     // Not run yet, a match.\n    //     return true;\n    // }\n    // // Otherwise, if it starts after the range start, a match\n    // if (job.runAt >= timeRangeStart) {\n    //     return true;\n    // }\n\n    // // Otherwise, yes, there is still hope...\n\n    // // If not finished yet, a match.\n    // if (!job.finishAt) {\n    //     return true;\n    // }\n\n    // // Otherwise, if it finished after the range start, a match\n    // if (job.finishAt >= timeRangeStart) {\n    //     return true;\n    // }\n\n    // return false;\n    return true;\n}\n\nexport function compareStatus(job: Job, jobStatus?: Array<JobStatus>) {\n    if (!jobStatus) {\n        return true;\n    }\n    return jobStatus.some((status) => {\n        return job.status === status;\n    });\n}\n\nexport function calcAverage(total: number, count: number) {\n    if (total) {\n        if (count) {\n            return total / count;\n        } else {\n            return null;\n        }\n    } else {\n        if (count) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n}\n\nexport function calcRate(part: number, whole: number) {\n    if (part) {\n        if (whole) {\n            return part / whole;\n        } else {\n            return null;\n        }\n    } else {\n        if (whole) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n}\n\nexport function getTimeRange(preset: TimeRangePresets): [EpochTime, EpochTime] {\n    const hourInMilliseconds = 1000 * 60 * 60;\n    const endDate = new Date().getTime();\n    switch (preset) {\n        case 'lastHour':\n            return [endDate - hourInMilliseconds, endDate];\n        case 'last48Hours':\n            return [endDate - hourInMilliseconds * 24 * 2, endDate];\n        case 'lastWeek':\n            return [endDate - hourInMilliseconds * 24 * 7, endDate];\n        case 'lastMonth':\n            return [endDate - hourInMilliseconds * 24 * 30, endDate];\n    }\n}\n\nexport function extractTimeRange(timeRange: TimeRange): [EpochTime, EpochTime] {\n    switch (timeRange.kind) {\n        case 'preset':\n            return getTimeRange(timeRange.preset);\n        case 'literal':\n            return [timeRange.start, timeRange.end];\n        default:\n            throw new Error('Invalid time range kind value (should be impossible');\n    }\n}\n","import React from 'react';\nimport { Job, JobID, JobStatus } from '../../redux/store';\nimport JobDetailComponent from './view';\nimport { Spin, Alert } from 'antd';\nimport { NarrativeJobServiceClient } from '@kbase/ui-lib';\nimport MetricsServiceClient from '../../lib/MetricsServiceClient';\nimport { serviceJobToUIJob } from '../../redux/actions/utils';\n\nconst POLLING_INTERVAL = 5000;\n\n// A simple state wrapper for job logs.\n\nexport interface JobLogLine {\n    lineNumber: number;\n    line: string;\n    isError: boolean;\n}\nexport type JobLog = Array<JobLogLine>;\n\nexport enum JobLogState {\n    NONE,\n    JOB_QUEUED,\n    INITIAL_LOADING,\n    ACTIVE_LOADED,\n    ACTIVE_LOADING,\n    FINISHED_LOADED,\n    ERROR\n}\n\n// TODO: rename this and other things to JobDetailView...\nexport interface JobLogViewNone {\n    status: JobLogState.NONE\n}\n\nexport interface JobLogViewQueued {\n    status: JobLogState.JOB_QUEUED\n    job: Job\n}\n\nexport interface JobLogViewInitialLoading {\n    status: JobLogState.INITIAL_LOADING\n}\n\nexport interface JobLogViewActiveLoaded {\n    status: JobLogState.ACTIVE_LOADED,\n    log: Array<JobLogLine>;\n    job: Job\n}\n\nexport interface JobLogViewActiveLoading {\n    status: JobLogState.ACTIVE_LOADING,\n    log: Array<JobLogLine>;\n    job: Job\n}\n\nexport interface JobLogViewFinishedLoaded {\n    status: JobLogState.FINISHED_LOADED,\n    log: Array<JobLogLine>;\n    job: Job\n}\n\nexport interface JobLogViewError {\n    status: JobLogState.ERROR,\n    error: string\n}\n\nexport type JobLogView = JobLogViewNone | JobLogViewQueued | JobLogViewInitialLoading | JobLogViewActiveLoaded | JobLogViewActiveLoading | JobLogViewFinishedLoaded | JobLogViewError\n\nexport interface JobLogsStateProps {\n    jobID: JobID;\n    token: string;\n    njsURL: string;\n    serviceWizardURL: string;\n}\n\ntype JobLogsStateState = JobLogView;\n\nexport default class JobLogsState extends React.Component<JobLogsStateProps, JobLogsStateState> {\n    constructor(props: JobLogsStateProps) {\n        super(props);\n\n        this.state = {\n            status: JobLogState.NONE\n        };\n    }\n\n    async getJob(): Promise<Job> {\n        const metricsClient = new MetricsServiceClient({\n            token: this.props.token,\n            url: this.props.serviceWizardURL,\n            // version: 'dev'\n        });\n\n        const job_id = this.props.jobID;\n\n        const job = await metricsClient.getJob({ job_id });\n        return serviceJobToUIJob(job.job_state, 'UNKNOWN');\n    }\n\n    async getJobLog(skipLines: number): Promise<Array<JobLogLine>> {\n        const njsClient = new NarrativeJobServiceClient({\n            token: this.props.token,\n            url: this.props.njsURL,\n            module: 'NarrativeJobService'\n        });\n\n        const [jobLog] = await njsClient.getJobLogs({ job_id: this.props.jobID, skip_lines: skipLines });\n\n        return jobLog.lines.map((line, index) => {\n            return {\n                lineNumber: skipLines + index + 1,\n                line: line.line,\n                isError: line.is_error ? true : false\n            };\n        });\n    }\n\n    // async updateJobLog() {\n    //     const startingLines = this.state.log.length;\n    //     const lines = await this.getJobLog(startingLines);\n    //     this.setState({\n    //         log: {\n    //             isLoaded: this.state.log.isLoaded,\n    //             lines: this.state.log.lines.concat(lines)\n    //         }\n    //     })\n    // }\n\n    startRunningPolling() {\n        const poller = async () => {\n            const state = this.state;\n            if (state.status !== JobLogState.ACTIVE_LOADED) {\n                this.setState({\n                    status: JobLogState.ERROR,\n                    error: 'Invalid state for polling: ' + state.status\n                });\n                return;\n            }\n            const { log } = state;\n            this.setState({\n                status: JobLogState.ACTIVE_LOADING,\n                log\n            });\n            const job = await this.getJob();\n            const startingLines = log.length;\n            const newLog = await this.getJobLog(startingLines);\n            switch (job.status) {\n                case JobStatus.QUEUED:\n                    // should not occur!\n                    this.startQueuedPolling();\n                    break;\n                case JobStatus.RUNNING:\n                    this.setState({\n                        status: JobLogState.ACTIVE_LOADED,\n                        log: log.concat(newLog),\n                        job\n                    });\n                    loop();\n                    break;\n                case JobStatus.FINISHED:\n                case JobStatus.ERRORED_QUEUED:\n                case JobStatus.ERRORED_RUNNING:\n                case JobStatus.CANCELED_RUNNING:\n                case JobStatus.CANCELED_QUEUED:\n                    this.setState({\n                        status: JobLogState.FINISHED_LOADED,\n                        log: log.concat(newLog),\n                        job\n                    });\n            }\n        }\n        const loop = () => {\n            setTimeout(poller, POLLING_INTERVAL);\n        }\n        loop();\n    }\n\n    startQueuedPolling() {\n        const poller = async () => {\n            try {\n                const job = await this.getJob();\n                switch (job.status) {\n                    case JobStatus.QUEUED:\n                        // still queued, eh?\n                        loop();\n                        return;\n                    default:\n                        const log = await this.getJobLog(0);\n                        switch (job.status) {\n                            case JobStatus.RUNNING:\n                                this.setState({\n                                    status: JobLogState.ACTIVE_LOADED,\n                                    log,\n                                    job\n                                });\n                                this.startRunningPolling();\n                                break;\n                            case JobStatus.FINISHED:\n                                // case JobStatus.CANCELED_RUNNING:\n                                this.setState({\n                                    status: JobLogState.FINISHED_LOADED,\n                                    log,\n                                    job\n                                });\n                                break;\n\n                            case JobStatus.CANCELED_QUEUED:\n                            case JobStatus.CANCELED_RUNNING:\n                                this.setState({\n                                    status: JobLogState.FINISHED_LOADED,\n                                    log,\n                                    job\n                                });\n                                break;\n                            case JobStatus.ERRORED_QUEUED:\n                            case JobStatus.ERRORED_RUNNING:\n                                this.setState({\n                                    status: JobLogState.ERROR,\n                                    log,\n                                    job\n                                });\n                                break;\n                        }\n                }\n            } catch (ex) {\n                console.error('ERROR', ex);\n            }\n        }\n\n        const loop = () => {\n            setTimeout(poller, POLLING_INTERVAL);\n        }\n\n        loop();\n    }\n\n    async getInitialJobLog() {\n        this.setState({\n            status: JobLogState.INITIAL_LOADING\n        });\n        const job = await this.getJob();\n        // const log = await this.getJobLog(0);\n\n        let log;\n        switch (job.status) {\n            case JobStatus.QUEUED:\n                // still queued, eh?\n                this.setState({\n                    status: JobLogState.JOB_QUEUED,\n                    job\n                });\n                this.startQueuedPolling();\n                return;\n            case JobStatus.RUNNING:\n                log = await this.getJobLog(0);\n                this.setState({\n                    status: JobLogState.ACTIVE_LOADED,\n                    log,\n                    job\n                });\n                this.startRunningPolling();\n                return;\n            case JobStatus.FINISHED:\n            case JobStatus.ERRORED_QUEUED:\n            case JobStatus.ERRORED_RUNNING:\n            case JobStatus.CANCELED_QUEUED:\n            case JobStatus.CANCELED_RUNNING:\n                log = await this.getJobLog(0);\n                this.setState({\n                    status: JobLogState.FINISHED_LOADED,\n                    log,\n                    job\n                });\n                return;\n        }\n    }\n\n    componentDidMount() {\n        this.getInitialJobLog();\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading ... <Spin />\n            </div>\n        );\n    }\n\n    renderQueued() {\n        return (\n            <div>\n                Queued ... <Spin />\n            </div>\n        );\n    }\n\n    renderError(view: JobLogViewError) {\n        return (\n            <Alert type=\"error\" message={view.error} />\n        )\n    }\n\n    render() {\n        return <JobDetailComponent view={this.state} />;\n    }\n}\n","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\nimport JobLogState from './state';\nimport { StoreState } from '../../redux/store';\n\nexport interface OwnProps {\n}\n\ninterface StateProps {\n    token: string;\n    njsURL: string;\n    serviceWizardURL: string;\n}\n\ninterface DispatchProps { }\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: {\n            config: {\n                services: {\n                    NarrativeJobService: { url: njsURL },\n                    ServiceWizard: { url: serviceWizardURL }\n                }\n            }\n        }\n    } = state;\n\n    let token;\n    if (!userAuthorization) {\n        throw new Error('Invalid state: token required');\n    } else {\n        token = userAuthorization.token;\n    }\n\n    return { token, njsURL, serviceWizardURL };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(JobLogState);\n","import PubSub, { PubSubProxy } from \"./PubSub\";\n\n// const MONITORING_INTERVAL = 10000;\n// const MONITORING_FEEDBACK_STEPS = 100;\n// const WATCH_INTERVAL = 100;\n\nconst POLLING_TIMEOUT = 10000;\n\nexport interface PollerParams {\n    // callback to trigger a polling action, whatever that is.\n    onPoll: () => void,\n    // callback for progress\n    onProgress: (progress: number) => void,\n    pubsub: PubSub,\n    progressSteps: number,\n    pollInterval: number,\n    watchInterval: number\n}\n\nexport enum PollerState {\n    STARTED,\n    POLLING,\n    WAITING,\n    PAUSED,\n    STOPPED,\n    ERROR\n}\n\nexport class Poller {\n    params: PollerParams;\n\n    statusTimer: number | null;\n    statusCount: number;\n\n    watchStartAt: number;\n    status: PollerState;\n    // isPollerRunning: boolean;\n    // isPollerPaused: boolean;\n    error: string;\n\n    watcherTimer: number | null;\n    waitTimer: number | null;\n\n    pubsubProxy: PubSubProxy;\n\n    constructor(params: PollerParams) {\n        this.params = params;\n\n        this.statusTimer = null;\n        this.statusCount = 0;\n\n        this.watchStartAt = 0;\n        // this.isPollerRunning = false;\n        // this.isPollerPaused = true;\n        this.status = PollerState.STOPPED;\n\n        this.watcherTimer = null;\n\n        this.waitTimer = null\n\n        this.pubsubProxy = new PubSubProxy(this.params.pubsub);\n        this.error = '';\n\n    }\n\n    stop() {\n        this.pubsubProxy.off();\n    }\n\n    pause() {\n        this.status = PollerState.PAUSED;\n\n        if (this.waitTimer) {\n            window.clearInterval(this.waitTimer);\n        }\n        if (this.statusTimer) {\n            window.clearInterval(this.statusTimer);\n        }\n        if (this.watcherTimer) {\n            window.clearTimeout(this.watcherTimer);\n        }\n\n        this.statusCount = 0;\n        this.updateOnProgress();\n    }\n\n    play() {\n        this.startWaiting();\n    }\n\n    startWatching() {\n        this.watchStartAt = Date.now();\n        this.status = PollerState.STARTED;\n\n        const pollWatch = () => {\n            const elapsed = Date.now() - this.watchStartAt;\n            if (elapsed > POLLING_TIMEOUT) {\n                this.status = PollerState.ERROR;\n                this.error = `Polling took too long (${elapsed}ms)`\n                this.stopPolling();\n                return;\n            }\n\n            switch (this.status) {\n                // case PollerState.NONE:\n                //     console.error('Error: Invalid state NONE');\n                //     this.stopPolling();\n                //     break;\n                case PollerState.STARTED:\n                case PollerState.POLLING:\n                    pollWatcherLoop();\n                    return;\n                case PollerState.WAITING:\n                    if (this.watcherTimer) {\n                        window.clearTimeout(this.watcherTimer);\n                    }\n                    this.status = PollerState.WAITING;\n                    this.startWaiting();\n                    break;\n                case PollerState.STOPPED:\n                    pollWatcherLoop();\n                    break;\n                case PollerState.PAUSED:\n                    console.warn('unexpected state PAUSED');\n                    // nothing to do\n                    break;\n                case PollerState.ERROR:\n                    console.warn('unexpected state ERROR');\n                    break;\n            }\n        }\n        const pollWatcherLoop = () => {\n            this.watcherTimer = window.setTimeout(pollWatch, this.params.watchInterval);\n        }\n\n        pollWatcherLoop();\n    }\n\n    startWaiting() {\n        this.status = PollerState.WAITING;\n        // Here we enter a loop to pause until the next polling event.\n        const pollWaitLoop = () => {\n            // This will fire another polling request after the interval passes,\n            // via a timeout.\n            this.waitTimer = window.setTimeout(this.runPoll.bind(this), this.params.pollInterval);\n            this.statusCount = 0;\n            pollWaitProgressLoop();\n        }\n\n        // This interval timer is for animating the progress bar.\n        // It is an interval which should run for the same period that the poll\n        // waiter above does, but in steps defined by MONITORING_FEEDBACK_STEPS.\n        const pollWaitProgressLoop = () => {\n            this.statusTimer = window.setInterval(() => {\n                this.statusCount += 1;\n                this.updateOnProgress();\n            }, this.params.pollInterval / this.params.progressSteps);\n        }\n\n        pollWaitLoop()\n    }\n\n    runPoll() {\n        if (this.statusTimer) {\n            window.clearInterval(this.statusTimer);\n        }\n\n        this.params.onPoll();\n        this.statusCount = 0;\n        this.startWatching();\n    }\n\n    startListeningForPollingEvent() {\n        this.pubsubProxy.on('searching', ({ is }) => {\n            if (is) {\n                switch (this.status) {\n                    // case PollerState.NONE:\n                    //     // Should not occur, but move into polling state.\n                    //     this.status = PollerState.POLLING;\n                    case PollerState.STARTED:\n                        // this is where we move into the polling state!\n                        this.status = PollerState.POLLING;\n                        break;\n                    case PollerState.POLLING:\n                        // hmm, if a polling event ('searching' for now) comes in,\n                        // and we are already polling, this is weird, but lets stay\n                        // in the polling state.\n                        break;\n                    case PollerState.WAITING:\n                        this.pause();\n                        break;\n                    case PollerState.STOPPED:\n                        break;\n                    case PollerState.PAUSED:\n                        // nothing to do\n                        break;\n                    case PollerState.ERROR:\n                        break;\n                }\n            } else {\n                switch (this.status) {\n                    // case PollerState.NONE:\n                    //     break;\n                    case PollerState.STARTED:\n                        break;\n                    case PollerState.POLLING:\n                        this.status = PollerState.WAITING;\n                        break;\n                    case PollerState.WAITING:\n                        break;\n                    case PollerState.STOPPED:\n                        break;\n                    case PollerState.PAUSED:\n                        // this.status = this.play();;\n                        // nothing to do\n                        this.play();\n                        break;\n                    case PollerState.ERROR:\n                        break;\n                }\n            }\n        });\n    }\n\n    stopListeningForPollingEvent() {\n        this.pubsubProxy.off();\n    }\n\n    startPolling() {\n        this.startListeningForPollingEvent();\n        this.runPoll();\n    }\n\n    updateOnProgress() {\n        this.params.onProgress(100 * this.statusCount / this.params.progressSteps);\n    }\n\n    stopPolling() {\n        if (this.waitTimer) {\n            window.clearInterval(this.waitTimer);\n        }\n        if (this.statusTimer) {\n            window.clearInterval(this.statusTimer);\n        }\n        if (this.watcherTimer) {\n            window.clearTimeout(this.watcherTimer);\n        }\n\n        this.statusCount = 0;\n        this.updateOnProgress();\n        this.stopListeningForPollingEvent();\n    }\n\n}","import uuid from 'uuid';\n\nexport interface SubscriptionDefinition {\n    channel: string | null;\n    message: string;\n}\n\nexport interface Subscription {\n    id: string,\n    channelName: string,\n    messageName: string\n}\n\nexport interface Channel {\n    messages: Map<string, MessageListener>\n}\n\n// export interface Listener {\n\n// }\n\nexport interface PublishDefinition {\n    channel: string;\n    message: string;\n\n}\n\nexport interface Payload { }\n\nexport interface Message {\n    id: MessageID,\n    payload: any\n}\n\nconst SEND_WINDOW = 1000 / 60;\n\n// Listen for message T\nexport interface Listener {\n    id: string;\n    messageID: MessageID;\n    handler: (message: Message) => void\n}\n\nexport interface MessageListener {\n    listeners: Array<Listener>;\n}\n\nexport type MessageID = string;\n\nexport class PubSubProxy {\n    subscriptions: Array<string>;\n    pubsub: PubSub;\n\n    constructor(pubsub: PubSub) {\n        this.subscriptions = [];\n        this.pubsub = pubsub;\n    }\n\n    on(messageID: string, handler: (payload: any) => void) {\n        const id = this.pubsub.on(messageID, handler);\n        this.subscriptions.push(id);\n    }\n\n    off() {\n        this.subscriptions.forEach((id) => {\n            this.pubsub.off(id);\n        })\n    }\n}\n\nexport default class PubSub {\n    sendQueue: Array<Message>\n    messageListeners: Map<MessageID, MessageListener>\n    allListeners: Map<string, Listener>\n    constructor() {\n        this.sendQueue = [];\n        this.messageListeners = new Map<MessageID, MessageListener>();\n        this.allListeners = new Map<string, Listener>();\n    }\n\n    private sendMessages() {\n        const queue = this.sendQueue;\n        this.sendQueue = [];\n        queue.forEach((message: Message) => {\n            const messageListener = this.messageListeners.get(message.id);\n            if (!messageListener) {\n                return;\n            }\n            messageListener.listeners.forEach((listener: Listener) => {\n                try {\n                    listener.handler(message.payload);\n                } catch (ex) {\n                    console.error('ERROR', ex);\n                }\n            });\n        });\n    }\n\n    private processQueue() {\n        if (this.sendQueue.length === 0) {\n            return;\n        }\n        window.setTimeout(() => {\n            this.sendMessages();\n        }, SEND_WINDOW)\n    }\n\n    send<T>(messageID: string, payload: any) {\n        const message: Message = {\n            id: messageID,\n            payload\n        }\n        this.sendQueue.push(message);\n        this.processQueue();\n    }\n\n    on(messageID: string, handler: (m: Message) => void): string {\n        let messageListener = this.messageListeners.get(messageID);\n        if (!messageListener) {\n            messageListener = {\n                listeners: []\n            }\n            this.messageListeners.set(messageID, messageListener);\n        }\n        const id = uuid.v4();\n        const listener = {\n            id, messageID, handler\n        }\n        messageListener.listeners.push(listener);\n        this.allListeners.set(id, listener);\n        return id;\n    }\n\n    off(id: string) {\n        const listener = this.allListeners.get(id);\n        if (!listener) {\n            return;\n        }\n        const messageListener = this.messageListeners.get(listener.messageID);\n        if (!messageListener) {\n            return;\n        }\n        messageListener.listeners = messageListener.listeners.filter((l) => {\n            return l.id !== listener.id\n        })\n    }\n}","import * as React from 'react';\nimport { Progress, Button, Tooltip, Switch } from 'antd';\nimport PubSub, { PubSubProxy } from '../lib/PubSub';\nimport { Poller } from '../lib/Poller';\n\nconst MONITORING_INTERVAL = 10000;\nconst MONITORING_FEEDBACK_STEPS = 100;\nconst WATCH_INTERVAL = 100;\n\nexport interface MonitorProps {\n    showControls: boolean;\n    startPolling: boolean;\n    startOpen: boolean;\n    isPollerRunning: boolean;\n    pubsub: PubSub;\n    onPoll: () => void;\n}\n\nexport interface MonitorState {\n    /** Support for job monitoring */\n    isMonitoring: boolean;\n\n    /**  */\n    isPollingInitiated: boolean;\n    pollingStartedAt: number;\n\n    /** Monitoring progress */\n    // monitoringStatusCount: number;\n    pollWaitProgress: number;\n\n    isPolling: boolean;\n\n    isOpen: boolean;\n}\n\nexport default class Monitor extends React.Component<MonitorProps, MonitorState> {\n    monitoringTimer: number | null;\n    monitoringStatusTimer: number | null;\n    pollWatcherTimer: number | null;\n    searchListenerID: string | null;\n    pubsubProxy: PubSubProxy;\n\n    poller: Poller;\n\n    constructor(props: MonitorProps) {\n        super(props);\n\n        this.monitoringTimer = null;\n        this.monitoringStatusTimer = null;\n        this.pollWatcherTimer = null;\n        this.searchListenerID = null;\n        this.pubsubProxy = new PubSubProxy(this.props.pubsub);\n\n        this.poller = new Poller({\n            onPoll: this.props.onPoll,\n            onProgress: this.onProgress.bind(this),\n            pubsub: this.props.pubsub,\n            pollInterval: MONITORING_INTERVAL,\n            progressSteps: MONITORING_FEEDBACK_STEPS,\n            watchInterval: WATCH_INTERVAL\n        })\n\n        this.state = {\n            isMonitoring: false,\n            // monitoringStatusCount: 0,\n            pollWaitProgress: 0,\n            isPollingInitiated: false,\n            pollingStartedAt: 0,\n            isPolling: false,\n            isOpen: this.props.startOpen\n        };\n    }\n\n    onProgress(progress: number) {\n        this.setState({\n            pollWaitProgress: progress\n        })\n    }\n\n    componentDidMount() {\n        if (this.props.startPolling) {\n            this.startMonitoring();\n        }\n        this.pubsubProxy.on('searching', ({ is }) => {\n            if (is) {\n                this.setState({\n                    isPolling: true\n                });\n                // this.poller.stopPolling();\n            } else {\n                this.setState({\n                    isPolling: false\n                });\n                // this.poller.startPolling();\n            }\n        })\n    }\n\n    componentWillUnmount() {\n        this.stopMonitoring();\n        this.poller.stop();\n        this.pubsubProxy.off();\n    }\n\n    componentDidUpdate() {\n\n    }\n\n    startMonitoring() {\n        this.setState({\n            isMonitoring: true\n        });\n        this.poller.startPolling();\n    }\n\n    // resetMonitoring() {\n    //     if (!this.state.isMonitoring) {\n    //         return;\n    //     }\n\n    //     // If waiting for a poll, do nothing.\n    //     if (!this.state.isPolling) {\n    //         return;\n    //     }\n\n    //     // If waiting to poll again, our only possible other state,\n    //     // restart the timers.\n    //     // clear the timers\n    //     this.poller.stopPolling();\n\n    //     // reset the count.\n    //     this.poller.startPolling();\n    // }\n\n    stopMonitoring() {\n        this.poller.stopPolling();\n        this.setState({\n            isMonitoring: false\n        });\n    }\n\n    toggleMonitoring() {\n        if (this.state.isMonitoring) {\n            this.stopMonitoring();\n        } else {\n            this.startMonitoring();\n        }\n    }\n\n    onToggleOpen(isOpen: boolean) {\n        this.setState({ isOpen });\n    }\n\n    render() {\n        if (!this.props.showControls) {\n            return null;\n        }\n        let monitoringStatus;\n        let label = 'Start Polling';\n        let buttonType: 'default' | 'danger' = 'default';\n        // let opener;\n        // let openerStyle: React.CSSProperties = {};\n        // if (this.state.isMonitoring) {\n        //     openerStyle.color = 'red';\n        // }\n        // if (!this.state.isOpen) {\n        //     opener = <Tooltip title=\"Open the monitor\">\n        //         <Button type=\"link\" icon=\"sync\" onClick={this.onToggleOpen.bind(this)} style={openerStyle} />\n        //     </Tooltip>\n        // } else {\n        //     openerStyle.backgroundColor = 'rgba(200, 200, 200, 0.3)';\n        //     opener = <Tooltip title=\"Close the monitor\">\n        //         <Button type=\"link\" icon=\"sync\" onClick={this.onToggleOpen.bind(this)} style={openerStyle} />\n        //     </Tooltip>\n        // }\n        const opener = (\n            <Switch\n                defaultChecked={this.state.isOpen}\n                checkedChildren=\"hide monitor\"\n                unCheckedChildren=\"show monitor\"\n                onChange={this.onToggleOpen.bind(this)} />\n        );\n\n        if (this.state.isMonitoring) {\n            label = 'Stop Polling';\n            buttonType = 'danger';\n            if (!this.state.isPolling) {\n                monitoringStatus = (\n                    <span>\n                        {' '}\n                        <Progress type=\"circle\" percent={this.state.pollWaitProgress} width={30} strokeWidth={30} showInfo={false} />\n                    </span>\n                );\n            } else {\n                monitoringStatus = (\n                    <span>\n                        {' '}<Progress type=\"circle\" percent={100} width={30} showInfo={false} strokeWidth={30} strokeColor={'orange'} />\n                    </span>\n                )\n            }\n            // } else {\n            //     const spinnerIcon = <Icon type=\"loading\" style={{ fontSize: '1em', color: 'orange' }} spin />;\n            //     monitoringStatus = (\n            //         <span>\n            //             {' '}<Spin size=\"small\" indicator={spinnerIcon} />\n            //         </span>\n            //     )\n            // }\n        }\n        let title;\n        if (this.state.isMonitoring) {\n            title = `Polling is running, with an interval of ${MONITORING_INTERVAL}ms and ${MONITORING_FEEDBACK_STEPS} update steps.`\n        } else {\n            title = 'Polling is currently stopped.';\n        }\n        let monitor;\n        if (this.state.isOpen) {\n            monitor = <Tooltip title={title}>\n                <Button onClick={this.toggleMonitoring.bind(this)} type={buttonType} size=\"small\" style={{ fontSize: \"80%\" }}>\n                    {label}\n                </Button>\n                {monitoringStatus}\n            </Tooltip>\n        }\n        return (\n            <span>\n                {opener}\n                {' '}\n                {monitor}\n            </span>\n        );\n    }\n}\n","/**\n * A component for browsing through (search, filter, sort) jobs submitted by\n * the current user.\n */\n\n// 3rd party imports\nimport React from 'react';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport {\n    Table, Form, Input, Button, Checkbox, Select, DatePicker,\n    Popconfirm, Tooltip, Modal, Switch\n} from 'antd';\nimport moment, { Moment } from 'moment';\nimport JobStatusBadge from '../JobStatus';\n\n// project imports (should be shared lib)\nimport { NiceRelativeTime, NiceElapsedTime } from '@kbase/ui-components';\n\n// project imports\nimport {\n    Job, JobStatus, JobsSearchExpression, SearchState, TimeRange,\n    TimeRangePresets, TimeRangeLiteral, SortSpec\n} from '../../redux/store';\nimport JobDetail from '../JobDetail';\n\n// file imports\nimport './style.css';\nimport Monitor from '../Monitor';\nimport PubSub from '../../lib/PubSub';\nimport UILink from '../UILink';\nimport NarrativeLink from '../NarrativeLink';\n\n/*\n    Props and State\n*/\n\ntype JobStatusFilterKey = 'queued' | 'running' | 'canceled' | 'success' | 'error';\n\ninterface JobStatusFilterOption {\n    label: string;\n    value: JobStatusFilterKey;\n}\n\nconst jobStatusFilterOptions: Array<JobStatusFilterOption> = [\n    {\n        label: 'Queued',\n        value: 'queued'\n    },\n    {\n        label: 'Running',\n        value: 'running'\n    },\n    {\n        label: 'Canceled',\n        value: 'canceled'\n    },\n    {\n        label: 'Success',\n        value: 'success'\n    },\n    {\n        label: 'Error',\n        value: 'error'\n    }\n];\n\nfunction jobStatusFilterOptionsToJobStatus(filter: Array<JobStatusFilterKey>): Array<JobStatus> {\n    let jobStatuses: Array<JobStatus> = [];\n    filter.forEach((status) => {\n        switch (status) {\n            case 'queued':\n                jobStatuses.push(JobStatus.QUEUED);\n                break;\n            case 'running':\n                jobStatuses.push(JobStatus.RUNNING);\n                break;\n            case 'canceled':\n                jobStatuses.push(JobStatus.CANCELED_QUEUED);\n                jobStatuses.push(JobStatus.CANCELED_RUNNING);\n                break;\n            case 'success':\n                jobStatuses.push(JobStatus.FINISHED);\n                break;\n            case 'error':\n                jobStatuses.push(JobStatus.ERRORED_QUEUED);\n                jobStatuses.push(JobStatus.ERRORED_RUNNING);\n                break;\n        }\n    });\n    return jobStatuses;\n}\n\nexport interface UserJobsProps {\n    jobs: Array<Job>;\n    searchState: SearchState;\n    showMonitoringControls: boolean;\n    search: (searchExpression: JobsSearchExpression) => void;\n    cancelJob: (jobID: string) => void;\n}\n\ninterface UserJobsState {\n    showDates: boolean;\n    currentJobStatusFilter: Array<JobStatusFilterKey>;\n    timeRange: TimeRange;\n    isFilterOpen: boolean;\n    selectedJob: Job | null;\n    currentSort: SortSpec | null;\n}\n\nexport default class UserJobs extends React.Component<UserJobsProps, UserJobsState> {\n    currentQuery?: string;\n\n    static defaultTimeRange: TimeRangePresets = 'last48Hours';\n    pubsub: PubSub;\n\n    constructor(props: UserJobsProps) {\n        super(props);\n\n        this.currentQuery = '';\n        this.pubsub = new PubSub();\n\n        this.state = {\n            showDates: false,\n            currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error'],\n            timeRange: { kind: 'preset', preset: UserJobs.defaultTimeRange },\n            isFilterOpen: false,\n            selectedJob: null,\n            currentSort: null\n        };\n    }\n\n    componentDidMount() {\n        this.doSearch(true);\n    }\n\n    componentDidUpdate() {\n        if (this.props.searchState === SearchState.SEARCHING) {\n            this.pubsub.send('searching', { is: true });\n        } else {\n            this.pubsub.send('searching', { is: false });\n        }\n    }\n\n    onChangeTimeRange(value: string) {\n        // TODO: should narrow the string value\n        if (value === 'customRange') {\n            this.setState({\n                showDates: true,\n                timeRange: { kind: 'literal', start: Date.now(), end: Date.now() }\n            });\n            // nothing else to do.\n            return;\n        } else {\n            this.setState(\n                {\n                    showDates: false,\n                    timeRange: { kind: 'preset', preset: value as TimeRangePresets }\n                },\n                () => {\n                    this.doSearch(true);\n                }\n            );\n        }\n    }\n\n    onChangeQuery(event: React.ChangeEvent<HTMLInputElement>) {\n        this.currentQuery = event.target.value;\n    }\n\n    onSubmit(event: React.FormEvent) {\n        event.preventDefault();\n        this.doSearch(true);\n    }\n\n    doSearch(forceSearch: boolean) {\n        if (typeof this.currentQuery === 'undefined') {\n            return;\n        }\n\n        const jobStatusFilter = jobStatusFilterOptionsToJobStatus(this.state.currentJobStatusFilter);\n\n        const searchExpression: JobsSearchExpression = {\n            query: this.currentQuery,\n            timeRange: this.state.timeRange,\n            jobStatus: jobStatusFilter,\n            forceSearch,\n            sort: this.state.currentSort\n        };\n\n        this.pubsub.send('search', {});\n\n        this.props.search(searchExpression);\n        return false;\n    }\n\n    onRangeFromChange(date: Moment | null, dateString: string) {\n        // TODO: if the range ends up null (how?), should it default\n        // to the previously selected preset? For now, just go back to lastHourl.\n        if (date === null) {\n            this.setState({\n                timeRange: {\n                    kind: 'preset',\n                    preset: 'lastHour'\n                }\n            });\n            return;\n        }\n\n        // handle logic of switching from 'preset' to 'literal'\n        let existingTimeRange = this.state.timeRange;\n        let timeRange: TimeRange;\n        switch (existingTimeRange.kind) {\n            case 'preset':\n                timeRange = {\n                    kind: 'literal',\n                    start: date.valueOf(),\n                    end: Infinity\n                };\n                break;\n            case 'literal':\n                timeRange = {\n                    kind: 'literal',\n                    start: date.valueOf(),\n                    end: existingTimeRange.end\n                };\n                break;\n            default:\n                return;\n        }\n\n        this.setState({\n            timeRange\n        });\n    }\n\n    onRangeToChange(date: Moment | null, dateString: string) {\n        // TODO: if the range ends up null (how?), should it default\n        // to the previously selected preset? For now, just go back to lastHourl.\n        if (date === null) {\n            this.setState({\n                timeRange: {\n                    kind: 'preset',\n                    preset: 'lastHour'\n                }\n            });\n            return;\n        }\n        let existingTimeRange = this.state.timeRange;\n        let timeRange: TimeRange;\n        switch (existingTimeRange.kind) {\n            case 'preset':\n                timeRange = {\n                    kind: 'literal',\n                    start: Infinity,\n                    end: date.valueOf()\n                };\n                break;\n            case 'literal':\n                timeRange = {\n                    kind: 'literal',\n                    start: existingTimeRange.start,\n                    end: date.valueOf()\n                };\n                break;\n            default:\n                return;\n        }\n\n        this.setState({\n            timeRange\n        });\n    }\n\n    renderJobAction(job: Job) {\n        switch (job.status) {\n            case JobStatus.QUEUED:\n            case JobStatus.RUNNING:\n                return (\n                    <Popconfirm\n                        title=\"Cancel this job?\"\n                        onConfirm={() => {\n                            this.props.cancelJob(job.id);\n                        }}\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                    >\n                        <Button icon=\"close\" type=\"danger\" size=\"small\" />\n                    </Popconfirm>\n                );\n            default:\n                return;\n        }\n    }\n\n    renderTimeRangeSelectionControl() {\n        return <Select\n            defaultValue={UserJobs.defaultTimeRange}\n            onChange={this.onChangeTimeRange.bind(this)}\n            dropdownMatchSelectWidth={true}\n            style={{ width: '11em' }}\n        >\n            <Select.Option value=\"lastHour\">Previous Hour</Select.Option>\n            <Select.Option value=\"last48Hours\">Previous 48 Hours</Select.Option>\n            <Select.Option value=\"lastWeek\">Previous Week</Select.Option>\n            <Select.Option value=\"lastMonth\">Previous Month</Select.Option>\n            <Select.Option value=\"customRange\">Custom Range</Select.Option>\n        </Select>;\n    }\n\n    renderTimeRangeControl(timeRange: TimeRangeLiteral) {\n        return <React.Fragment>\n            <Form.Item label=\"From\">\n                <DatePicker\n                    showTime={true}\n                    allowClear={false}\n                    value={moment(timeRange.start)}\n                    onChange={this.onRangeFromChange.bind(this)}\n                />\n            </Form.Item>\n            <Form.Item label=\"To\">\n                <DatePicker\n                    showTime={true}\n                    allowClear={false}\n                    value={moment(timeRange.end)}\n                    onChange={this.onRangeToChange.bind(this)}\n                />\n            </Form.Item>\n        </React.Fragment>;\n    }\n\n    renderSearchInput() {\n        let dateControls;\n        if (this.state.showDates) {\n            const timeRange = this.state.timeRange;\n            if (timeRange.kind === 'literal') {\n                dateControls = this.renderTimeRangeControl(timeRange);\n            }\n        }\n        return (\n            <Form layout=\"inline\" onSubmit={this.onSubmit.bind(this)}>\n                <Form.Item>\n                    <Input\n                        defaultValue={this.currentQuery}\n                        placeholder=\"Search jobs\"\n                        style={{ width: '15em' }}\n                        onChange={this.onChangeQuery.bind(this)}\n                    />\n                </Form.Item>\n\n                <Form.Item label=\"TimeRange\" />\n                <Form.Item>\n                    {this.renderTimeRangeSelectionControl()}\n                </Form.Item>\n\n                {dateControls}\n\n                <Form.Item>\n                    <Button icon=\"search\" type=\"primary\" htmlType=\"submit\" />\n                </Form.Item>\n\n                <Form.Item>\n                    <Switch checkedChildren=\"hide filters\" unCheckedChildren=\"show filters\" onChange={this.onToggleFilterArea.bind(this)} />\n                </Form.Item>\n\n                <Form.Item>\n                    <Monitor\n                        onPoll={() => {\n                            this.doSearch(true);\n                        }}\n                        pubsub={this.pubsub}\n                        startPolling={true}\n                        isPollerRunning={this.props.searchState === SearchState.SEARCHING}\n                        showControls={this.props.showMonitoringControls}\n                        startOpen={true}\n                    />\n                </Form.Item>\n            </Form>\n        );\n    }\n\n    onToggleFilterArea(isFilterOpen: boolean) {\n        this.setState({ isFilterOpen });\n    }\n\n    onFilterChange(filters: Array<CheckboxValueType>) {\n        const filter = filters as Array<JobStatusFilterKey>;\n\n        this.setState(\n            {\n                currentJobStatusFilter: filter\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onChangeJobStatusAny(event: CheckboxChangeEvent) {\n        if (event.target.checked) {\n            this.setState(\n                {\n                    currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error']\n                },\n                () => {\n                    this.doSearch(false);\n                }\n            );\n        }\n    }\n\n    onClickAny() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onClickFinished() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['canceled', 'success', 'error']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onClickActive() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['queued', 'running']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    renderFilterInput() {\n        const options = jobStatusFilterOptions;\n        return (\n            <div className=\"UserJobs-filterArea\">\n                <span style={{ color: 'gray', fontWeight: 'bold', marginRight: '10px' }}>Filter by Job Status</span>\n                <Button size=\"small\" onClick={this.onClickAny.bind(this)}>\n                    <i>Any</i>\n                </Button>{' '}\n                <Button size=\"small\" onClick={this.onClickActive.bind(this)}>\n                    <i>Active</i>\n                </Button>{' '}\n                <Button size=\"small\" onClick={this.onClickFinished.bind(this)} style={{ marginRight: '10px' }}>\n                    <i>Finished</i>\n                </Button>\n                <Checkbox.Group\n                    options={options}\n                    onChange={this.onFilterChange.bind(this)}\n                    value={this.state.currentJobStatusFilter}\n                />\n            </div>\n        );\n    }\n\n    renderControlBar() {\n        let filterRowStyle: React.CSSProperties = { margin: '10px 10px 10px 0' };\n        if (!this.state.isFilterOpen) {\n            filterRowStyle.display = 'none';\n        }\n        let filterRow;\n        if (this.state.isFilterOpen) {\n            filterRow = <div className=\"Row\" style={filterRowStyle}>\n                {this.renderFilterInput()}\n            </div>;\n        }\n        return (\n            <div className=\"Col\">\n                <div className=\"Row\">{this.renderSearchInput()}</div>\n                {filterRow}\n            </div>\n        );\n    }\n\n    onClickDetail(job: Job) {\n        this.setState({\n            selectedJob: job\n        });\n    }\n\n    onCloseModal() {\n        this.setState({\n            selectedJob: null\n        });\n    }\n\n    renderJobDetail() {\n        if (!this.state.selectedJob) {\n            return;\n        }\n        const footer = (\n            <Button key=\"cancel\" onClick={this.onCloseModal.bind(this)}>\n                Close\n            </Button>\n        );\n        const title = (\n            <span>\n                Detail for Job <span style={{ fontFamily: 'monospace', fontWeight: 'bold' }}>{this.state.selectedJob.id}</span>\n            </span>\n        );\n        return (\n            <Modal className=\"FullScreenModal\" title={title}\n                onCancel={this.onCloseModal.bind(this)} visible={true}\n                footer={footer}>\n                <JobDetail jobID={this.state.selectedJob.id} />\n            </Modal>\n        );\n    }\n\n    renderJobsTable() {\n        const loading = this.props.searchState === SearchState.SEARCHING;\n        return (\n            <Table\n                size=\"small\"\n                className=\"UserJobs-table xScrollingFlexTable\"\n                dataSource={this.props.jobs}\n                loading={loading}\n                rowKey={(job: Job) => {\n                    return job.id;\n                }}\n                pagination={{ position: 'bottom', showSizeChanger: true }}\n            // onChange={this.onTableChanged.bind(this)}\n            // pagination={false}\n            // scroll={{ y: '100%' }}\n\n            >\n                <Table.Column\n                    title=\"ID\"\n                    dataIndex=\"id\"\n                    key=\"id\"\n                    width=\"8%\"\n                    render={(jobID: string, job: Job): any => {\n                        const title = jobID;\n                        return (\n                            <Tooltip title={title}>\n                                <a href=\"https://example.com\" onClick={(e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n                                    e.preventDefault();\n                                    this.onClickDetail(job);\n                                }}>{jobID}</a>\n                            </Tooltip>\n                        );\n                    }}\n                />\n                <Table.Column\n                    title=\"User\"\n                    dataIndex=\"username\"\n                    key=\"username\"\n                    width=\"10%\"\n                    render={(username: string) => {\n                        return (\n                            <UILink path={`people/${username}`}\n                                openIn='new-tab'>\n                                {username}\n                            </UILink>\n                        );\n                    }}\n                />\n                <Table.Column\n                    title=\"Narrative\"\n                    dataIndex=\"narrativeTitle\"\n                    key=\"narrativeTitle\"\n                    width=\"17%\"\n                    render={(title: string, job: Job): any => {\n                        if (!title || !job.narrativeID) {\n                            return 'n/a';\n                        }\n                        return (\n                            <Tooltip title={title}>\n                                <NarrativeLink narrativeID={job.narrativeID}>\n                                    {title}\n                                </NarrativeLink>\n                            </Tooltip>\n                        );\n                    }}\n                />\n                <Table.Column\n                    title=\"App\"\n                    dataIndex=\"appTitle\"\n                    key=\"appTitle\"\n                    width=\"18%\"\n                    // style={cellStyle}\n                    render={(title: string, job: Job): any => {\n                        if (!title) {\n                            return 'n/a';\n                        }\n                        return (\n                            <Tooltip title={title}>\n                                <UILink path={`catalog/apps/${job.appID}`}\n                                    openIn='same-window'>\n                                    {title}\n                                </UILink>\n                            </Tooltip>\n                        );\n                    }}\n                />\n                <Table.Column\n                    title=\"Submitted\"\n                    dataIndex=\"queuedAt\"\n                    key=\"queuedAt\"\n                    width=\"8%\"\n                    render={(date: number, job: Job) => {\n                        if (!date) {\n                            return <span>** empty **</span>;\n                        }\n                        return <NiceRelativeTime time={new Date(date)} />;\n                    }}\n                    defaultSortOrder=\"descend\"\n                    sorter={(a: Job, b: Job) => {\n                        if (a.queuedAt === null) {\n                            if (b.queuedAt === null) {\n                                return 0;\n                            }\n                            return -1;\n                        } else {\n                            if (b.queuedAt === null) {\n                                return 1;\n                            }\n                            return a.queuedAt - b.queuedAt;\n                        }\n                    }}\n                />\n                <Table.Column\n                    title=\"Queued\"\n                    dataIndex=\"queuedElapsed\"\n                    key=\"queuedElapsed\"\n                    width=\"10%\"\n                    render={(_, job: Job) => {\n                        switch (job.status) {\n                            case JobStatus.QUEUED:\n                            case JobStatus.ERRORED_QUEUED:\n                            case JobStatus.CANCELED_QUEUED:\n                                return <NiceElapsedTime from={job.queuedAt} precision={2} useClock={true} />;\n                            default:\n                                return <span>-</span>;\n                        }\n                    }}\n                />\n                <Table.Column\n                    title=\"Run\"\n                    // dataIndex=\"runElapsed\"\n                    key=\"runElapsed\"\n                    width=\"10%\"\n                    render={(_, job: Job) => {\n                        switch (job.status) {\n                            case JobStatus.QUEUED:\n                            case JobStatus.ERRORED_QUEUED:\n                            case JobStatus.CANCELED_QUEUED:\n                                return '-';\n                            case JobStatus.RUNNING:\n                                return <NiceElapsedTime from={job.runAt} precision={2} useClock={true} />;\n                            case JobStatus.FINISHED:\n                            case JobStatus.CANCELED_RUNNING:\n                            case JobStatus.ERRORED_RUNNING:\n                                return <NiceElapsedTime from={job.runAt} to={job.finishAt} precision={2} />;\n                        }\n                    }}\n                />\n                <Table.Column\n                    title=\"Status\"\n                    dataIndex=\"status\"\n                    key=\"status\"\n                    width=\"8%\"\n                    render={(status: JobStatus, job: Job) => {\n                        return <JobStatusBadge job={job} />;\n                    }}\n                />\n                <Table.Column\n                    title=\"Server\"\n                    dataIndex=\"clientGroups\"\n                    key=\"clientGroups\"\n                    width=\"8%\"\n                    render={(clientGroups: Array<string>) => {\n                        return clientGroups.join(',');\n                    }}\n                />\n                <Table.Column\n                    title=\"Cancel\"\n                    dataIndex=\"action\"\n                    key=\"action\"\n                    width=\"5%\"\n                    render={(status: JobStatus, job: Job) => {\n                        return this.renderJobAction(job);\n                    }}\n                />\n            </Table>\n        );\n    }\n\n    render() {\n        return (\n            <div data-k-b-testhook-component=\"UserJobs\" className=\"UserJobs\">\n                <div>{this.renderControlBar()}</div>\n                {this.renderJobsTable()}\n                {this.renderJobDetail()}\n            </div>\n        );\n    }\n}\n","import uuid from 'uuid';\n\nexport type TaskID = string;\n\nexport interface Task<ResultType> {\n    id: TaskID;\n    promise: Promise<ResultType>\n    isCanceled: boolean;\n}\n\n// type Request<ParamType, ResultType> = (param: ParamType) => Promise<ResultType>;\n\nexport default abstract class CancelableRequest<ParamType, ResultType> {\n    pendingTasks: Map<TaskID, Task<ResultType>>;\n    isCanceled: boolean;\n    constructor() {\n        this.pendingTasks = new Map<TaskID, Task<ResultType>>();\n        this.isCanceled = false;\n    }\n\n    newID() {\n        return uuid.v4();\n    }\n\n    cancel(task: Task<ResultType>) {\n        task.isCanceled = true;\n        this.pendingTasks.delete(task.id);\n    }\n\n    cancelPending() {\n        this.pendingTasks.forEach((task, key) => {\n            this.cancel(task);\n        });\n    }\n\n    done(task: Task<ResultType>) {\n        this.pendingTasks.delete(task.id);\n    }\n\n    spawn(param: ParamType): Task<ResultType> {\n        this.cancelPending();\n        return this.request(param);\n    }\n\n    abstract request(param: ParamType): Task<ResultType>;\n}","import { Job, JobsSearchExpression, EpochTime, StoreState } from '../store';\nimport MetricsServiceClient from '../../lib/MetricsServiceClient';\nimport { serviceJobToUIJob, compareTimeRange, compareStatus, extractTimeRange } from './utils';\nimport { Action } from 'redux';\nimport { ActionType } from '.';\nimport { NarrativeJobServiceClient } from '@kbase/ui-lib';\nimport { AppError } from '@kbase/ui-components';\nimport { ThunkDispatch } from 'redux-thunk';\nimport CancelableRequest, { Task } from '../../lib/CancelableRequest';\n\nexport interface UserJobsSearch extends Action<ActionType.USER_JOBS_SEARCH> {\n    type: ActionType.USER_JOBS_SEARCH;\n    searchExpression: JobsSearchExpression;\n}\n\nexport interface UserJobsSearchStart extends Action<ActionType.USER_JOBS_SEARCH_START> {\n    type: ActionType.USER_JOBS_SEARCH_START;\n}\n\nexport interface UserJobsSearchSuccess extends Action<ActionType.USER_JOBS_SEARCH_SUCCESS> {\n    type: ActionType.USER_JOBS_SEARCH_SUCCESS;\n    searchExpression: JobsSearchExpression;\n    rawJobs: Array<Job>;\n    jobs: Array<Job>;\n    jobsFetchedAt: EpochTime;\n}\n\nexport interface UserJobsSearchError extends Action<ActionType.USER_JOBS_SEARCH_ERROR> {\n    type: ActionType.USER_JOBS_SEARCH_ERROR;\n    error: AppError;\n}\n\nexport function userJobsSearchStart(): UserJobsSearchStart {\n    return {\n        type: ActionType.USER_JOBS_SEARCH_START\n    };\n}\n\nexport function userJobsSearchSuccess(\n    rawJobs: Array<Job>,\n    jobs: Array<Job>,\n    jobsFetchedAt: EpochTime,\n    searchExpression: JobsSearchExpression\n): UserJobsSearchSuccess {\n    return {\n        type: ActionType.USER_JOBS_SEARCH_SUCCESS,\n        searchExpression,\n        rawJobs,\n        jobs,\n        jobsFetchedAt\n    };\n}\n\nexport function userJobsSearchError(error: AppError): UserJobsSearchError {\n    return {\n        type: ActionType.USER_JOBS_SEARCH_ERROR,\n        error\n    };\n}\n\ninterface UserJobsParam {\n    token: string,\n    serviceWizardURL: string,\n    from: number,\n    to: number\n}\n\ntype UserJobsResult = Array<Job>;\n\nclass UserJobsRequest extends CancelableRequest<UserJobsParam, UserJobsResult> {\n    request({ token, serviceWizardURL, from, to }: UserJobsParam): Task<UserJobsResult> {\n        const client = new MetricsServiceClient({\n            url: serviceWizardURL,\n            token: token\n            // version: 'dev'\n        });\n        const promise = client\n            .getJobs({\n                epoch_range: [from, to],\n                user_ids: []\n            })\n            .then((metrics) => {\n                const converted = metrics.job_states.map((jobState) => {\n                    return serviceJobToUIJob(jobState, 'UNKNOWN');\n                });\n                return converted;\n            })\n\n        const task: Task<UserJobsResult> = {\n            id: this.newID(),\n            promise,\n            isCanceled: false\n        }\n        this.pendingTasks.set(task.id, task);\n        return task;\n    }\n}\n\nconst userJobsSearchRequest = new UserJobsRequest();\n\nexport function userJobsSearch(searchExpression: JobsSearchExpression) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(userJobsSearchStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url: serviceWizardURL }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                userJobsSearchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        let {\n            views: {\n                userJobsView: { jobsFetchedAt, rawJobs }\n            }\n        } = getState();\n\n        const searchTerms = searchExpression.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n\n        const [timeRangeStart, timeRangeEnd] = extractTimeRange(searchExpression.timeRange);\n\n        if (!jobsFetchedAt || searchExpression.forceSearch) {\n\n            const task = userJobsSearchRequest.spawn({\n                token: userAuthorization.token,\n                serviceWizardURL,\n                from: timeRangeStart,\n                to: timeRangeEnd\n            });\n\n            rawJobs = await task.promise;\n            if (task.isCanceled) {\n                // just do nothing\n                return;\n            }\n            jobsFetchedAt = new Date().getTime();\n            userJobsSearchRequest.done(task);\n\n            // rawJobs = await fetchAllUserJobs(userAuthorization.token, serviceWizardURL, timeRangeStart, timeRangeEnd);\n            jobsFetchedAt = new Date().getTime();\n            // UPDATE: update the raw jobs\n        }\n\n        const newJobs = rawJobs.filter((job) => {\n            return (\n                searchTerms.every((term) => {\n                    return term.test(job.appTitle) || term.test(job.narrativeTitle) || term.test(job.id) || term.test(job.username)\n                }) &&\n                compareTimeRange(\n                    job,\n                    // searchExpression.timeRange,\n                    timeRangeStart,\n                    timeRangeEnd\n                ) &&\n                compareStatus(job, searchExpression.jobStatus)\n            );\n        });\n\n        dispatch(userJobsSearchSuccess(rawJobs, newJobs, jobsFetchedAt, searchExpression));\n    };\n}\n\nexport function userJobsRefreshSearch() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(userJobsSearchStart());\n\n        const {\n            auth: { userAuthorization }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                userJobsSearchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        const {\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url: serviceWizardURL }\n                    }\n                }\n            },\n            views: {\n                userJobsView: { searchExpression }\n            }\n        } = getState();\n\n        if (!searchExpression) {\n            userJobsSearchError({\n                message: 'No search expression',\n                code: 'nosearchexpression'\n            });\n            return;\n        }\n\n        const searchTerms = searchExpression.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n\n        const [timeRangeStart, timeRangeEnd] = extractTimeRange(searchExpression.timeRange);\n\n\n        const task = userJobsSearchRequest.spawn({\n            token: userAuthorization.token,\n            serviceWizardURL,\n            from: timeRangeStart,\n            to: timeRangeEnd\n        });\n\n        const rawJobs = await task.promise;\n        if (task.isCanceled) {\n            // just do nothing\n            return;\n        }\n\n        userJobsSearchRequest.done(task);\n\n        const newJobs = rawJobs.filter((job) => {\n            return (\n                searchTerms.every((term) => {\n                    return term.test(job.appTitle) || term.test(job.narrativeTitle);\n                }) &&\n                compareTimeRange(\n                    job,\n                    // searchExpression.timeRange,\n                    timeRangeStart,\n                    timeRangeEnd\n                ) &&\n                compareStatus(job, searchExpression.jobStatus)\n            );\n        });\n\n        dispatch(userJobsSearchSuccess(rawJobs, newJobs, Date.now(), searchExpression));\n    };\n}\n\n// user job cancellation...\n// Job Cancelation\n\nexport interface UserJobsCancelJob {\n    type: ActionType.USER_JOBS_CANCEL;\n    jobID: string;\n}\n\nexport interface UserJobsCancelJobStart {\n    type: ActionType.USER_JOBS_CANCEL_START;\n}\n\nexport interface UserJobsCancelJobSuccess {\n    type: ActionType.USER_JOBS_CANCEL_SUCCESS;\n}\n\nexport interface UserJobsCancelJobError {\n    type: ActionType.USER_JOBS_CANCEL_ERROR;\n    error: AppError;\n}\n\nexport function userJobsCancelJobStart(): UserJobsCancelJobStart {\n    return {\n        type: ActionType.USER_JOBS_CANCEL_START\n    };\n}\n\nexport function userJobsCancelJobSuccess(): UserJobsCancelJobSuccess {\n    return {\n        type: ActionType.USER_JOBS_CANCEL_SUCCESS\n    };\n}\n\nexport function userJobsCancelJobError(error: AppError): UserJobsCancelJobError {\n    return {\n        type: ActionType.USER_JOBS_CANCEL_ERROR,\n        error\n    };\n}\n\nexport function userJobsCancelJob(jobID: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(userJobsCancelJobStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        NarrativeJobService: { url: njsURL }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                userJobsCancelJobError({\n                    message: 'no authorization',\n                    code: 'no-authorization'\n                })\n            );\n            return;\n        }\n\n        // do it\n        const njsClient = new NarrativeJobServiceClient({\n            url: njsURL,\n            token: userAuthorization.token,\n            module: 'NarrativeJobService'\n        });\n        njsClient\n            .cancelJob({ job_id: jobID })\n            .then(() => {\n                dispatch(userJobsCancelJobSuccess());\n                dispatch(userJobsRefreshSearch());\n            })\n            .catch((err) => {\n                console.error('error canceling job', err);\n                dispatch(\n                    userJobsCancelJobError({\n                        message: 'error canceling job: ' + err.message,\n                        code: 'error-canceling'\n                    })\n                );\n            });\n    };\n}\n","/**\n * A redux adapter container for the User Jobs view component.\n *\n * For those not familiar with redux-based apps: Redux exists as a parallel system to the react component hierarchy. The react \"store\" (database)\n * is established in the top level `App` component. A component can access the store data and the store actions through what is commonly\n * referred to as a \"container\" module. We prefer to call them \"redux adapters\", to be more specific.\n *\n * A redux adapter is a separate component file. It essentially creates a component (via the `connect` function) which \"wraps\" the underlying\n * view component. It extracts the data and action generators and supplies them to the view component.\n */\n\n/**\n * Imports, ignore\n */\n// 3rd party\nimport { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\n\n// project\nimport UserJobs from './view';\nimport { StoreState, Job, JobsSearchExpression, SearchState } from '../../redux/store';\nimport { userJobsSearch, userJobsCancelJob } from '../../redux/actions/userJobs';\n\n/**\n * The props which this redux adapter requires in it's invocation.\n *\n * Current empty\n */\nexport interface OwnProps { }\n\n/**\n * The props this redux adapter extracts from the store and injects in\n * its call to the child component, UserJobs.\n *\n * @note These properties must exist in UserJobs.\n */\ninterface StateProps {\n    jobs: Array<Job>;\n    searchState: SearchState;\n    showMonitoringControls: boolean;\n    // searchExpression: JobsSearchExpression;\n}\n\n/**\n * The props this redux adapter extracts from actions and injects into\n * its call to the child component, UserJobs.\n *\n * @note These properties must exist in UserJobs.\n */\ninterface DispatchProps {\n    search: (searchExpression: JobsSearchExpression) => void;\n    cancelJob: (jobID: string) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        views: {\n            userJobsView: { searchState, jobs }\n        }\n    } = state;\n\n    if (!userAuthorization) {\n        throw new Error('Not authorized!');\n    }\n\n    // const { roles } = userAuthorization\n    // const showMonitoringControls = roles.some((role) => {\n    //     return role === 'DevToken';\n    // })\n    const showMonitoringControls = true;\n    return { jobs, searchState, showMonitoringControls };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        search: (searchExpression: JobsSearchExpression) => {\n            dispatch(userJobsSearch(searchExpression) as any);\n        },\n        cancelJob: (jobID: string) => {\n            dispatch(userJobsCancelJob(jobID) as any);\n        }\n    };\n}\n\nconst UserJobsReduxAdapter = connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserJobs);\n\nexport default UserJobsReduxAdapter;\n","/**\n * A component for browsing through (search, filter, sort) jobs submitted by\n * the current user.\n */\n\n/** imports */\n// 3rd party imports\nimport React from 'react';\nimport {\n    Table, Form, Input, Button, Checkbox, Select, DatePicker,\n    Popconfirm, Tooltip, Modal, Switch\n} from 'antd';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport moment, { Moment } from 'moment';\n\n// project imports\nimport {\n    Job, JobStatus, JobsSearchExpression, SearchState,\n    TimeRangePresets, TimeRange, SortSpec\n} from '../../redux/store';\n\n// kbase imports (or should be kbase imports)\nimport { NiceRelativeTime, NiceElapsedTime } from '@kbase/ui-components';\nimport JobStatusBadge from '../JobStatus';\n\n// project imoprts\nimport JobDetail from '../JobDetail';\n\n// file imports\nimport './style.css';\nimport Monitor from '../Monitor';\nimport PubSub from '../../lib/PubSub';\nimport { SortOrder } from 'antd/lib/table';\nimport UILink from '../UILink';\nimport NarrativeLink from '../NarrativeLink';\n\n/**\n * This version of the job status defines the set of strings that may be used\n * in the ui controls.\n *\n */\ntype JobStatusFilterKey = 'queued' | 'running' | 'canceled' | 'success' | 'error';\n\n/**\n * This interface describes a single option for the available job status filter options.\n *\n * Job status filter options are used to populate the checkboxgroup.\n * Note that the value of each option is a job status filter key.\n */\ninterface JobStatusFilterOption {\n    label: string;\n    value: JobStatusFilterKey;\n}\n\n/**\n * A set of job status filter options used to populate and control a set of checkboxes provided\n * for the user to be able to filter jobs according to their job status.\n *\n * Note that this is a set of options because the antd checkboxgroup simplifies a set of checkboxes\n * through sets of options.\n */\nconst jobStatusFilterOptions: Array<JobStatusFilterOption> = [\n    {\n        label: 'Queued',\n        value: 'queued'\n    },\n    {\n        label: 'Running',\n        value: 'running'\n    },\n    {\n        label: 'Canceled',\n        value: 'canceled'\n    },\n    {\n        label: 'Success',\n        value: 'success'\n    },\n    {\n        label: 'Error',\n        value: 'error'\n    }\n];\n\n/**\n * Translates an array of job status filter keys, as provided by the ui job status\n * filter checkboxes, to an array of job statuses suitable for passing to the job\n * status search.\n *\n * @param filter - an array of job status filter keys\n *\n * @note Since the switch is over an enum, we don't have to worry about the default case\n *\n * @returns an array of job statuses\n */\nfunction jobStatusFilterOptionsToJobStatus(filter: Array<JobStatusFilterKey>): Array<JobStatus> {\n    let jobStatuses: Array<JobStatus> = [];\n    filter.forEach((status) => {\n        switch (status) {\n            case 'queued':\n                jobStatuses.push(JobStatus.QUEUED);\n                break;\n            case 'running':\n                jobStatuses.push(JobStatus.RUNNING);\n                break;\n            case 'canceled':\n                jobStatuses.push(JobStatus.CANCELED_QUEUED);\n                jobStatuses.push(JobStatus.CANCELED_RUNNING);\n                break;\n            case 'success':\n                jobStatuses.push(JobStatus.FINISHED);\n                break;\n            case 'error':\n                jobStatuses.push(JobStatus.ERRORED_QUEUED);\n                jobStatuses.push(JobStatus.ERRORED_RUNNING);\n                break;\n        }\n    });\n    return jobStatuses;\n}\n\n/**\n * Semantic aliasing of for epoch time in milliseconds, as produced\n * by Date.now(), new Date().getTime(), etc.\n *\n * @todo move to a common location\n */\ntype EpochTime = number;\n\n/**\n * Props for the MyJobs component\n */\nexport interface MyJobsProps {\n    /** The list of jobs to display */\n    jobs: Array<Job>;\n    /** The current search state, used to control the primary display (none, searching, searched, error) */\n    searchState: SearchState;\n    showMonitoringControls: boolean;\n    /** Triggers a redux action to search of the user's jobs according to the given search expression\n     * @remarks Since at present the service used to fetch the jobs can suffer performance issues, the\n     * default search action does not fetch search results each time (rather ??).\n     * @todo when job search is more performant, this function may be removed and redirected to the\n     * search function.\n     */\n    search: (searchExpression: JobsSearchExpression) => void;\n    /** Triggers a redux action to cancel the indicated job */\n    cancelJob: (jobID: string) => void;\n}\n\n/**\n * State for the MyJobs component\n */\ninterface MyJobsState {\n    /** Flag to show the date controls */\n    showDates: boolean;\n    /** Contains the current selection of job statuses in the checkbox control */\n    currentJobStatusFilter: Array<JobStatusFilterKey>;\n    /** Contains the initial timestamp (ms epoch time) for time range */\n    timeRange: TimeRange;\n\n    isFilterOpen: boolean;\n\n    selectedJob: Job | null;\n    currentSort: SortSpec | null;\n}\n\n/**\n * A View Component for browsing through the current user's jobs.\n *\n * @remarks\n * This component is really just a tabular view into a user's jobs. It provides\n * support for free text searching, filtering by job state, and date ranges.\n *\n */\nexport default class MyJobs extends React.Component<MyJobsProps, MyJobsState> {\n    currentQuery?: string;\n\n    static defaultTimeRangePreset: TimeRangePresets = 'lastWeek';\n\n    pubsub: PubSub;\n\n    constructor(props: MyJobsProps) {\n        super(props);\n\n        this.currentQuery = '';\n        this.pubsub = new PubSub();\n\n        this.state = {\n            showDates: false,\n            currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error'],\n            timeRange: { kind: 'preset', preset: MyJobs.defaultTimeRangePreset },\n            isFilterOpen: false,\n            selectedJob: null,\n            currentSort: null\n        };\n    }\n\n    componentDidMount() {\n        this.doSearch(true);\n    }\n\n    componentDidUpdate() {\n        if (this.props.searchState === SearchState.SEARCHING) {\n            this.pubsub.send('searching', { is: true });\n        } else {\n            this.pubsub.send('searching', { is: false });\n        }\n    }\n\n    onChangeTimeRange(value: string) {\n        // TODO: should narrow the string value\n        if (value === 'customRange') {\n            this.setState({\n                showDates: true,\n                timeRange: { kind: 'literal', start: Date.now(), end: Date.now() }\n            });\n            // nothing else to do.\n            return;\n        } else {\n            this.setState(\n                {\n                    showDates: false,\n                    timeRange: { kind: 'preset', preset: value as TimeRangePresets }\n                },\n                () => {\n                    this.doSearch(true);\n                }\n            );\n        }\n    }\n\n    onChangeQuery(event: React.ChangeEvent<HTMLInputElement>) {\n        this.currentQuery = event.target.value;\n    }\n\n    onSubmit(event: React.FormEvent) {\n        event.preventDefault();\n        this.doSearch(true);\n    }\n\n    doSearch(forceSearch: boolean) {\n        if (typeof this.currentQuery === 'undefined') {\n            return;\n        }\n\n        const jobStatusFilter = jobStatusFilterOptionsToJobStatus(this.state.currentJobStatusFilter);\n\n        const searchExpression: JobsSearchExpression = {\n            query: this.currentQuery,\n            timeRange: this.state.timeRange,\n            jobStatus: jobStatusFilter,\n            forceSearch,\n            sort: null\n            // sort: this.state.currentSort\n        };\n\n        // TODO: document wth is happening here.\n        this.pubsub.send('search', {});\n\n        this.props.search(searchExpression);\n        return false;\n    }\n\n    onRangeFromChange(date: Moment | null, dateString: string) {\n        // TODO: if the range ends up null (how?), should it default\n        // to the previously selected preset? For now, just go back to lastHourl.\n        if (date === null) {\n            this.setState({\n                timeRange: {\n                    kind: 'preset',\n                    preset: 'lastHour'\n                }\n            });\n            return;\n        }\n\n        // handle logic of switching from 'preset' to 'literal'\n        let existingTimeRange = this.state.timeRange;\n        let timeRange: TimeRange;\n        switch (existingTimeRange.kind) {\n            case 'preset':\n                timeRange = {\n                    kind: 'literal',\n                    start: date.valueOf(),\n                    end: Infinity\n                };\n                break;\n            case 'literal':\n                timeRange = {\n                    kind: 'literal',\n                    start: date.valueOf(),\n                    end: existingTimeRange.end\n                };\n                break;\n            default:\n                return;\n        }\n\n        this.setState({\n            timeRange\n        });\n    }\n\n    onRangeToChange(date: Moment | null, dateString: string) {\n        // TODO: if the range ends up null (how?), should it default\n        // to the previously selected preset? For now, just go back to lastHourl.\n        if (date === null) {\n            this.setState({\n                timeRange: {\n                    kind: 'preset',\n                    preset: 'lastHour'\n                }\n            });\n            return;\n        }\n\n        let existingTimeRange = this.state.timeRange;\n        let timeRange: TimeRange;\n        switch (existingTimeRange.kind) {\n            case 'preset':\n                timeRange = {\n                    kind: 'literal',\n                    start: Infinity,\n                    end: date.valueOf()\n                };\n                break;\n            case 'literal':\n                timeRange = {\n                    kind: 'literal',\n                    start: existingTimeRange.start,\n                    end: date.valueOf()\n                };\n                break;\n            default:\n                return;\n        }\n\n        this.setState({\n            timeRange\n        });\n    }\n\n    renderSearchInput() {\n        let dateControls;\n        if (this.state.showDates) {\n            const timeRange = this.state.timeRange;\n            if (timeRange.kind === 'literal') {\n                dateControls = (\n                    <React.Fragment>\n                        <Form.Item label=\"From\">\n                            <DatePicker\n                                showTime={true}\n                                allowClear={false}\n                                value={moment(timeRange.start)}\n                                onChange={this.onRangeFromChange.bind(this)}\n                            />\n                        </Form.Item>\n                        <Form.Item label=\"To\">\n                            <DatePicker\n                                showTime={true}\n                                allowClear={false}\n                                value={moment(timeRange.end)}\n                                onChange={this.onRangeToChange.bind(this)}\n                            />\n                        </Form.Item>\n                    </React.Fragment>\n                );\n            }\n        }\n        return (\n            <Form layout=\"inline\" onSubmit={this.onSubmit.bind(this)}>\n                <Form.Item>\n                    <Input\n                        defaultValue={this.currentQuery}\n                        placeholder=\"Search jobs\"\n                        style={{ width: '15em' }}\n                        onChange={this.onChangeQuery.bind(this)}\n                    />\n                </Form.Item>\n\n                <Form.Item label=\"TimeRange\" />\n                <Form.Item>\n                    <Select\n                        defaultValue={MyJobs.defaultTimeRangePreset}\n                        onChange={this.onChangeTimeRange.bind(this)}\n                        dropdownMatchSelectWidth={true}\n                        style={{ width: '11em' }}\n                    >\n                        <Select.Option value=\"lastHour\">Previous Hour</Select.Option>\n                        <Select.Option value=\"last48Hours\">Previous 48 Hours</Select.Option>\n                        <Select.Option value=\"lastWeek\">Previous Week</Select.Option>\n                        <Select.Option value=\"lastMonth\">Previous Month</Select.Option>\n                        <Select.Option value=\"customRange\">Custom Range</Select.Option>\n                    </Select>\n                </Form.Item>\n                {dateControls}\n\n                <Form.Item>\n                    <Button icon=\"search\" type=\"primary\" htmlType=\"submit\" />\n                </Form.Item>\n\n                <Form.Item>\n                    <Switch checkedChildren=\"hide filters\" unCheckedChildren=\"show filters\" onChange={this.onToggleFilterArea.bind(this)} />\n                </Form.Item>\n\n                <Form.Item>\n                    <Monitor\n                        onPoll={() => {\n                            this.doSearch(true);\n                        }}\n                        pubsub={this.pubsub}\n                        isPollerRunning={this.props.searchState === SearchState.SEARCHING}\n                        startPolling={false}\n                        showControls={this.props.showMonitoringControls}\n                        startOpen={false}\n                    />\n                </Form.Item>\n            </Form>\n        );\n    }\n\n    onToggleFilterArea(isFilterOpen: boolean) {\n        this.setState({ isFilterOpen });\n        // this.setState({ isFilterOpen: !this.state.isFilterOpen });\n    }\n\n    onFilterChange(filters: Array<CheckboxValueType>) {\n        const filter = filters as Array<JobStatusFilterKey>;\n        this.setState(\n            {\n                currentJobStatusFilter: filter\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onChangeJobStatusAny(event: CheckboxChangeEvent) {\n        if (event.target.checked) {\n            this.setState(\n                {\n                    currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error']\n                },\n                () => {\n                    this.doSearch(false);\n                }\n            );\n        }\n    }\n\n    onClickAny() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onClickFinished() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['canceled', 'success', 'error']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onClickActive() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['queued', 'running']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    renderFilterInput() {\n        const options = jobStatusFilterOptions;\n        return (\n            <div className=\"MyJobs-filterArea\">\n                <span style={{ color: 'gray', fontWeight: 'bold', marginRight: '10px' }}>Filter by Job Status</span>\n                <Button size=\"small\" type=\"link\" onClick={this.onClickAny.bind(this)} data-k-b-testhook-button=\"any\">\n                    <i>Any</i>\n                </Button>{' '}\n                <Button size=\"small\" type=\"link\" onClick={this.onClickActive.bind(this)} data-k-b-testhook-button=\"active\">\n                    <i>Active</i>\n                </Button>{' '}\n                <Button\n                    size=\"small\" type=\"link\"\n                    onClick={this.onClickFinished.bind(this)}\n                    style={{ marginRight: '10px' }}\n                    data-k-b-testhook-button=\"finished\"\n                >\n                    <i>Finished</i>\n                </Button>\n                <Checkbox.Group\n                    options={options}\n                    onChange={this.onFilterChange.bind(this)}\n                    value={this.state.currentJobStatusFilter}\n                />\n            </div>\n        );\n    }\n\n    renderControlBar() {\n        let filterRowStyle: React.CSSProperties = { margin: '10px 10px 10px 0' };\n        if (!this.state.isFilterOpen) {\n            filterRowStyle.display = 'none';\n        }\n        let filterRow;\n        if (this.state.isFilterOpen) {\n            filterRow = <div className=\"Row\" style={filterRowStyle}>\n                {this.renderFilterInput()}\n            </div>;\n        }\n        return (\n            <div className=\"Col\">\n                <div className=\"Row\">{this.renderSearchInput()}</div>\n                {filterRow}\n            </div>\n        );\n    }\n\n    onJobCancel(job: Job) {\n        this.props.cancelJob(job.id);\n    }\n\n    renderJobAction(job: Job) {\n        switch (job.status) {\n            case JobStatus.QUEUED:\n            case JobStatus.RUNNING:\n                return (\n                    <Popconfirm\n                        title=\"Cancel this job?\"\n                        onConfirm={() => {\n                            this.onJobCancel(job);\n                        }}\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                    >\n                        <Button\n                            icon=\"close\"\n                            type=\"danger\"\n                            size=\"small\"\n                            data-k-b-testhook-button=\"cancel\"\n                        />\n                    </Popconfirm>\n                );\n            default:\n                return;\n        }\n    }\n\n    onClickDetail(job: Job) {\n        this.setState({\n            selectedJob: job\n        });\n    }\n\n    onCloseModal() {\n        this.setState({\n            selectedJob: null\n        });\n    }\n\n    renderNarrativeLink(job: Job) {\n        const id = job.narrativeID;\n        if (id === null) {\n            return;\n        }\n        return <NarrativeLink narrativeID={id}>\n            {job.narrativeTitle}\n        </NarrativeLink>;\n    }\n\n    renderJobsTable() {\n        const loading = this.props.searchState === SearchState.SEARCHING;\n        return (\n            <Table\n                size=\"small\"\n                className=\"MyJobs-table xScrollingFlexTable\"\n                dataSource={this.props.jobs}\n                loading={loading}\n                rowKey={(job: Job) => {\n                    return job.id;\n                }}\n                pagination={{ position: 'bottom', showSizeChanger: true }}\n            // pagination={false}\n            // scroll={{ y: '100%' }}\n\n            >\n                <Table.Column\n                    title=\"ID\"\n                    dataIndex=\"id\"\n                    key=\"id\"\n                    width=\"10%\"\n                    render={(jobID: string, job: Job): any => {\n                        const title = jobID;\n                        return (\n                            <Tooltip title={title}>\n                                <a href=\"https://example.com\"\n                                    onClick={(e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n                                        e.preventDefault();\n                                        this.onClickDetail(job);\n                                    }}>{jobID}</a>\n                            </Tooltip>\n                        );\n                    }}\n                />\n                <Table.Column\n                    title=\"Narrative\"\n                    dataIndex=\"narrativeTitle\"\n                    key=\"narrativeTitle\"\n                    width=\"17%\"\n                    render={(title: string, job: Job): any => {\n                        if (!title || !job.narrativeID) {\n                            return 'n/a';\n                        }\n                        return (\n                            <Tooltip title={title}>\n                                {this.renderNarrativeLink(job)}\n                            </Tooltip>\n                        );\n                    }}\n                />\n                <Table.Column\n                    title=\"App\"\n                    dataIndex=\"appTitle\"\n                    key=\"appTitle\"\n                    width=\"20%\"\n                    render={(title: string, job: Job): any => {\n                        if (!title) {\n                            return 'n/a';\n                        }\n                        return (\n                            <Tooltip title={title}>\n                                <UILink path={`catalog/apps/${job.appID}`}\n                                    openIn='new-tab'>\n                                    {title}\n                                </UILink>\n                            </Tooltip>\n                        );\n                    }}\n                />\n                <Table.Column\n                    title=\"Submitted\"\n                    dataIndex=\"queuedAt\"\n                    key=\"queuedAt\"\n                    width=\"10%\"\n                    render={(date: number, job: Job) => {\n                        if (!date) {\n                            return <span>** empty **</span>;\n                        }\n                        return <NiceRelativeTime time={new Date(date)} />;\n                    }}\n                    defaultSortOrder=\"descend\"\n                    sorter={(a: Job, b: Job, sortOrder?: SortOrder) => {\n                        let direction: number;\n                        if (sortOrder === 'ascend') {\n                            direction = -1;\n                        } else {\n                            direction = 1;\n                        }\n                        if (a.queuedAt === null) {\n                            if (b.queuedAt === null) {\n                                return 0;\n                            }\n                            return -1 * direction;\n                        } else {\n                            if (b.queuedAt === null) {\n                                return 1 * direction;\n                            }\n                            return (a.queuedAt - b.queuedAt) * direction;\n                        }\n                    }}\n                />\n                <Table.Column\n                    title=\"Queued\"\n                    dataIndex=\"queuedElapsed\"\n                    key=\"queuedElapsed\"\n                    width=\"10%\"\n                    render={(_, job: Job) => {\n                        switch (job.status) {\n                            case JobStatus.QUEUED:\n                            case JobStatus.ERRORED_QUEUED:\n                            case JobStatus.CANCELED_QUEUED:\n                                return <NiceElapsedTime from={job.queuedAt} precision={2} useClock={true} />;\n                            default:\n                                return <span>-</span>;\n                        }\n                    }}\n                />\n                <Table.Column\n                    title=\"Run\"\n                    // dataIndex=\"runElapsed\"\n                    key=\"runElapsed\"\n                    width=\"10%\"\n                    render={(_, job: Job) => {\n                        switch (job.status) {\n                            case JobStatus.QUEUED:\n                            case JobStatus.ERRORED_QUEUED:\n                            case JobStatus.CANCELED_QUEUED:\n                                return '-';\n                            case JobStatus.RUNNING:\n                                return <NiceElapsedTime from={job.runAt} precision={2} useClock={true} />;\n                            case JobStatus.FINISHED:\n                            case JobStatus.CANCELED_RUNNING:\n                            case JobStatus.ERRORED_RUNNING:\n                                return <NiceElapsedTime from={job.runAt} to={job.finishAt} precision={2} />;\n                        }\n                    }}\n                />\n                <Table.Column\n                    title=\"Status\"\n                    dataIndex=\"status\"\n                    key=\"status\"\n                    width=\"10%\"\n                    render={(status: JobStatus, job: Job) => {\n                        return <JobStatusBadge job={job} />;\n                    }}\n                />\n                <Table.Column\n                    title=\"Server\"\n                    dataIndex=\"clientGroups\"\n                    key=\"clientGroups\"\n                    width=\"8%\"\n                    render={(clientGroups: Array<string>) => {\n                        return clientGroups.join(',');\n                    }}\n                />\n                <Table.Column\n                    title=\"Cancel\"\n                    dataIndex=\"action\"\n                    key=\"action\"\n                    width=\"5%\"\n                    render={(status: JobStatus, job: Job) => {\n                        return this.renderJobAction(job);\n                    }}\n                />\n            </Table>\n        );\n    }\n\n    renderJobDetail() {\n        if (!this.state.selectedJob) {\n            return;\n        }\n        const footer = (\n            <Button key=\"cancel\" onClick={this.onCloseModal.bind(this)}>\n                Close\n            </Button>\n        );\n        const title = (\n            <span>\n                Detail for Job <span style={{ fontFamily: 'monospace', fontWeight: 'bold' }}>{this.state.selectedJob.id}</span>\n            </span>\n        );\n        return (\n            <Modal className=\"FullScreenModal\" title={title}\n                onCancel={this.onCloseModal.bind(this)} visible={true}\n                footer={footer}>\n                <JobDetail jobID={this.state.selectedJob.id} />\n            </Modal>\n        );\n    }\n\n    render() {\n        return (\n            <div data-k-b-testhook-component=\"MyJobs\" className=\"MyJobs\">\n                <div>{this.renderControlBar()}</div>\n                {this.renderJobsTable()}\n                {this.renderJobDetail()}\n            </div>\n        );\n    }\n}\n","import { Action } from 'redux';\nimport { ActionType } from '.';\nimport { JobsSearchExpression, Job, EpochTime, StoreState } from '../store';\nimport { NarrativeJobServiceClient } from '@kbase/ui-lib';\nimport { AppError } from '@kbase/ui-components';\nimport MetricsServiceClient from '../../lib/MetricsServiceClient';\nimport { serviceJobToUIJob, compareTimeRange, compareStatus, extractTimeRange } from './utils';\nimport { ThunkDispatch } from 'redux-thunk';\nimport CancelableRequest, { Task } from '../../lib/CancelableRequest';\n\n// MY JOBS TAB\n\nexport interface MyJobsSearch extends Action<ActionType.MY_JOBS_SEARCH> {\n    type: ActionType.MY_JOBS_SEARCH;\n    searchExpression: JobsSearchExpression;\n}\n\nexport interface MyJobsSearchStart extends Action<ActionType.MY_JOBS_SEARCH_START> {\n    type: ActionType.MY_JOBS_SEARCH_START;\n}\n\nexport interface MyJobsSearchSuccess extends Action<ActionType.MY_JOBS_SEARCH_SUCCESS> {\n    type: ActionType.MY_JOBS_SEARCH_SUCCESS;\n    searchExpression: JobsSearchExpression;\n    rawJobs: Array<Job>;\n    jobs: Array<Job>;\n    jobsFetchedAt: EpochTime;\n}\n\nexport interface MyJobsSearchError extends Action<ActionType.MY_JOBS_SEARCH_ERROR> {\n    type: ActionType.MY_JOBS_SEARCH_ERROR;\n    error: AppError;\n}\n\nexport function myJobsSearchStart() {\n    return {\n        type: ActionType.MY_JOBS_SEARCH_START\n    };\n}\n\nexport function myJobsSearchSuccess(\n    rawJobs: Array<Job>,\n    jobs: Array<Job>,\n    jobsFetchedAt: EpochTime,\n    searchExpression: JobsSearchExpression\n): MyJobsSearchSuccess {\n    return {\n        type: ActionType.MY_JOBS_SEARCH_SUCCESS,\n        searchExpression,\n        rawJobs,\n        jobs,\n        jobsFetchedAt\n    };\n}\n\nexport function myJobsSearchError(error: AppError) {\n    return {\n        type: ActionType.MY_JOBS_SEARCH_ERROR,\n        error\n    };\n}\n\ninterface MyJobsParam {\n    token: string,\n    username: string,\n    serviceWizardURL: string,\n    from: number,\n    to: number\n}\n\ntype MyJobsResult = Array<Job>;\n\nclass MyJobsRequests extends CancelableRequest<MyJobsParam, MyJobsResult> {\n    request({ token, username, serviceWizardURL, from, to }: MyJobsParam): Task<MyJobsResult> {\n        const client = new MetricsServiceClient({\n            url: serviceWizardURL,\n            token: token,\n            // version: 'dev',\n            // urlBaseOverride: 'http://localhost:3000',\n            timeout: 60000\n        });\n        const promise = client\n            .getJobs({\n                epoch_range: [from, to],\n                user_ids: [username]\n            })\n            .then((metrics) => {\n                const converted = metrics.job_states.map((jobState) => {\n                    return serviceJobToUIJob(jobState, username);\n                });\n\n                return converted;\n            })\n\n        const task: Task<MyJobsResult> = {\n            id: this.newID(),\n            promise,\n            isCanceled: false\n        }\n        this.pendingTasks.set(task.id, task);\n        return task;\n    }\n}\n\n\nconst myJobsSearchRequests = new MyJobsRequests();\n\nexport function myJobsSearch(searchExpression: JobsSearchExpression) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(myJobsSearchStart());\n\n        const {\n            auth: { userAuthorization }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                myJobsSearchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        let {\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url: serviceWizardURL }\n                    }\n                }\n            },\n            views: {\n                myJobsView: { jobsFetchedAt, rawJobs }\n            }\n        } = getState();\n\n        const searchTerms = searchExpression.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n\n        const [timeRangeStart, timeRangeEnd] = extractTimeRange(searchExpression.timeRange);\n\n        // Umm, there must be other conditions which make a real search happen, or is \n        // forceSearch now the way to do this? ...\n        if (!jobsFetchedAt || searchExpression.forceSearch) {\n            const task = myJobsSearchRequests.spawn({\n                token: userAuthorization.token,\n                username: userAuthorization.username,\n                serviceWizardURL,\n                from: timeRangeStart,\n                to: timeRangeEnd\n            });\n\n            rawJobs = await task.promise;\n            if (task.isCanceled) {\n                // just do nothing\n                return;\n            }\n            jobsFetchedAt = new Date().getTime();\n            myJobsSearchRequests.done(task);\n            // UPDATE: update the raw jobs\n        }\n\n        const newJobs = rawJobs.filter((job) => {\n            return (\n                searchTerms.every((term) => {\n                    return term.test(job.appTitle) || term.test(job.narrativeTitle);\n                }) &&\n                compareTimeRange(job, timeRangeStart, timeRangeEnd) &&\n                compareStatus(job, searchExpression.jobStatus)\n            );\n        });\n\n        dispatch(myJobsSearchSuccess(rawJobs, newJobs, jobsFetchedAt, searchExpression));\n    };\n}\n\n// Jobs refetch\n\nexport function myJobsRefreshSearch() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(myJobsSearchStart());\n\n        const {\n            auth: { userAuthorization }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                myJobsSearchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        const {\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url: serviceWizardURL }\n                    }\n                }\n            },\n            views: {\n                myJobsView: { searchExpression }\n            }\n        } = getState();\n\n        if (!searchExpression) {\n            myJobsSearchError({\n                message: 'No search expression',\n                code: 'nosearchexpression'\n            });\n            return;\n        }\n\n        const [timeRangeStart, timeRangeEnd] = extractTimeRange(searchExpression.timeRange);\n\n        const searchTerms = searchExpression.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n\n        const task = myJobsSearchRequests.spawn({\n            token: userAuthorization.token,\n            username: userAuthorization.username,\n            serviceWizardURL,\n            from: timeRangeStart,\n            to: timeRangeEnd\n        });\n\n        const rawJobs = await task.promise;\n        if (task.isCanceled) {\n            // just do nothing\n            return;\n        }\n        // jobsFetchedAt = new Date().getTime();\n        myJobsSearchRequests.done(task);\n\n        // const rawJobs = await fetchMyJobs(\n        //     userAuthorization.token,\n        //     userAuthorization.username,\n        //     serviceWizardURL,\n        //     timeRangeStart,\n        //     timeRangeEnd\n        // );\n\n        const newJobs = rawJobs.filter((job) => {\n            return (\n                searchTerms.every((term) => {\n                    return term.test(job.appTitle) || term.test(job.narrativeTitle);\n                }) &&\n                compareTimeRange(\n                    job,\n                    // searchExpression.timeRange,\n                    timeRangeStart,\n                    timeRangeEnd\n                ) &&\n                compareStatus(job, searchExpression.jobStatus)\n            );\n        });\n\n        dispatch(myJobsSearchSuccess(rawJobs, newJobs, Date.now(), searchExpression));\n    };\n}\n\n// JOB CANCELATION\n\n// Job Cancelation\n\nexport interface MyJobsCancelJob {\n    type: ActionType.MY_JOBS_CANCEL;\n    jobID: string;\n}\n\nexport interface MyJobsCancelJobStart {\n    type: ActionType.MY_JOBS_CANCEL_START;\n}\n\nexport interface MyJobsCancelJobSuccess {\n    type: ActionType.MY_JOBS_CANCEL_SUCCESS;\n}\n\nexport interface MyJobsCancelJobError {\n    type: ActionType.MY_JOBS_CANCEL_ERROR;\n    error: AppError;\n}\n\nexport function myJobsCancelJobStart(): MyJobsCancelJobStart {\n    return {\n        type: ActionType.MY_JOBS_CANCEL_START\n    };\n}\n\nexport function myJobsCancelJobSuccess(): MyJobsCancelJobSuccess {\n    return {\n        type: ActionType.MY_JOBS_CANCEL_SUCCESS\n    };\n}\n\nexport function myJobsCancelJobError(error: AppError): MyJobsCancelJobError {\n    return {\n        type: ActionType.MY_JOBS_CANCEL_ERROR,\n        error\n    };\n}\n\nexport function myJobsCancelJob(jobID: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(myJobsCancelJobStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        NarrativeJobService: { url: njsURL }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                myJobsCancelJobError({\n                    message: 'no authorization',\n                    code: 'no-authorization'\n                })\n            );\n            return;\n        }\n\n        // do it\n        const njsClient = new NarrativeJobServiceClient({\n            url: njsURL,\n            token: userAuthorization.token,\n            module: 'NarrativeJobService'\n        });\n        njsClient\n            .cancelJob({ job_id: jobID })\n            .then(() => {\n                dispatch(myJobsCancelJobSuccess());\n                dispatch(myJobsRefreshSearch());\n            })\n            .catch((err) => {\n                console.error('error canceling job', err);\n                dispatch(\n                    myJobsCancelJobError({\n                        message: 'error canceling job: ' + err.message,\n                        code: 'error-canceling'\n                    })\n                );\n            });\n    };\n}\n","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\nimport MyJobs from './view';\n\nimport { StoreState, Job, JobsSearchExpression, SearchState } from '../../redux/store';\nimport { myJobsSearch, myJobsRefreshSearch, myJobsCancelJob } from '../../redux/actions/myJobs';\n\nexport interface OwnProps { }\n\ninterface StateProps {\n    jobs: Array<Job>;\n    searchState: SearchState;\n    showMonitoringControls: boolean;\n}\n\ninterface DispatchProps {\n    search: (searchExpression: JobsSearchExpression) => void;\n    cancelJob: (jobID: string) => void;\n    refreshSearch: () => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        views: {\n            myJobsView: { searchState, jobs }\n        }\n    } = state;\n\n    if (!userAuthorization) {\n        throw new Error('Not authorized!');\n    }\n\n    const showMonitoringControls = true;\n\n    return { jobs, searchState, showMonitoringControls };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        search: (searchExpression: JobsSearchExpression) => {\n            dispatch(myJobsSearch(searchExpression) as any);\n        },\n        cancelJob: (jobID: string) => {\n            dispatch(myJobsCancelJob(jobID) as any);\n        },\n        refreshSearch: () => {\n            dispatch(myJobsRefreshSearch() as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(MyJobs);\n","import React from 'react';\nimport { AppStat, PublicAppStatsQuery, SearchState } from '../../redux/store';\nimport { Table, Form, Progress, Input, Button, Tooltip } from 'antd';\nimport { NiceTimeDuration } from '@kbase/ui-components';\nimport { PaginationConfig, SorterResult } from 'antd/lib/table';\nimport './style.css';\nimport UILink from '../UILink';\n\nexport interface PublicAppStatsProps {\n    searchState: SearchState;\n    appStats: Array<AppStat>;\n    onSearch: (query: PublicAppStatsQuery) => void;\n}\n\ninterface PublicAppStatsState {\n    appStats: Array<AppStat>;\n}\n\nexport default class PublicAppStats extends React.Component<PublicAppStatsProps, PublicAppStatsState> {\n    currentQuery: string;\n    constructor(props: PublicAppStatsProps) {\n        super(props);\n        this.currentQuery = '';\n    }\n    componentDidMount() {\n        this.props.onSearch({\n            query: this.currentQuery\n        });\n    }\n    onSubmitSearch(event: React.FormEvent) {\n        event.preventDefault();\n        this.props.onSearch({\n            query: this.currentQuery\n        });\n    }\n    onChangeQuery(event: React.ChangeEvent<HTMLInputElement>) {\n        this.currentQuery = event.target.value;\n    }\n    renderControlBar() {\n        return (\n            <Form layout=\"inline\" onSubmit={this.onSubmitSearch.bind(this)}>\n                <Form.Item>\n                    <Input\n                        defaultValue={this.currentQuery}\n                        placeholder=\"Search App Stats (leave empty for all)\"\n                        style={{ width: '20em' }}\n                        onChange={this.onChangeQuery.bind(this)}\n                    />\n                </Form.Item>\n                <Form.Item>\n                    <Button icon=\"search\" type=\"primary\" htmlType=\"submit\" />\n                </Form.Item>\n            </Form>\n        );\n    }\n    onTableChange(pagination: PaginationConfig, filters: any, sorter: SorterResult<AppStat>) { }\n    renderAppStatsTable() {\n        return (\n            <Table<AppStat>\n                dataSource={this.props.appStats}\n                loading={this.props.searchState === SearchState.SEARCHING}\n                rowKey={(stat: AppStat) => {\n                    return stat.appId;\n                }}\n                pagination={{ position: 'bottom', showSizeChanger: true }}\n                // pagination={false}\n                // scroll={{ y: '100%' }}\n                size=\"small\"\n                className=\"PreciseTable ScrollingFlexTable\"\n                onChange={this.onTableChange}\n            >\n                <Table.Column\n                    title=\"Module\"\n                    dataIndex=\"moduleId\"\n                    key=\"moduleId\"\n                    width=\"25%\"\n                    render={(moduleId: string, stat: AppStat) => {\n                        return (\n                            <Tooltip title={stat.moduleTitle}>\n                                <UILink path={`catalog/modules/${moduleId}`}\n                                    openIn='new-tab'>\n                                    {stat.moduleTitle}\n                                </UILink>\n                            </Tooltip>\n                        );\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.moduleTitle.localeCompare(b.moduleTitle);\n                    }}\n                    defaultSortOrder=\"ascend\"\n                />\n                <Table.Column\n                    title=\"Function\"\n                    dataIndex=\"functionId\"\n                    key=\"functionId\"\n                    width=\"25%\"\n                    render={(functionId: string, stat: AppStat) => {\n                        return (\n                            <Tooltip title={stat.functionTitle}>\n                                <UILink path={`catalog/apps/${stat.moduleId}/${stat.functionId}`}\n                                    openIn='new-tab'>\n                                    {stat.functionTitle}\n                                </UILink>\n                            </Tooltip>\n                        );\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.functionTitle.localeCompare(b.functionTitle);\n                    }}\n                />\n                <Table.Column\n                    title=\"Runs\"\n                    dataIndex=\"runCount\"\n                    key=\"runCount\"\n                    width=\"5%\"\n                    align=\"right\"\n                    render={(runCount: number) => {\n                        return (\n                            <div className=\"NumericColumn\">\n                                {new Intl.NumberFormat('en-US', {\n                                    useGrouping: true\n                                }).format(runCount)}\n                            </div>\n                        );\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.runCount - b.runCount;\n                    }}\n                />\n                <Table.Column\n                    title=\"Errors\"\n                    dataIndex=\"errorCount\"\n                    key=\"errorCount\"\n                    width=\"5%\"\n                    align=\"right\"\n                    render={(errorCount: number) => {\n                        return (\n                            <div className=\"NumericColumn\">\n                                {new Intl.NumberFormat('en-US', {\n                                    useGrouping: true\n                                }).format(errorCount)}\n                            </div>\n                        );\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.errorCount - b.errorCount;\n                    }}\n                />\n                <Table.Column\n                    title=\"Success\"\n                    dataIndex=\"successRate\"\n                    key=\"successRate\"\n                    width=\"10%\"\n                    render={(successRate: number) => {\n                        return (\n                            <Progress\n                                percent={successRate * 100}\n                                format={(percent: number | undefined) => {\n                                    return new Intl.NumberFormat('en-US', {\n                                        style: 'percent'\n                                    }).format(successRate);\n                                }}\n                            />\n                        );\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.successRate - b.successRate;\n                    }}\n                />\n                <Table.Column\n                    title=\"Avg Run\"\n                    dataIndex=\"averageRunTime\"\n                    key=\"averageRunTime\"\n                    width=\"10%\"\n                    render={(averageRunTime: number) => {\n                        return <NiceTimeDuration precision={2} duration={averageRunTime * 1000} />;\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.averageRunTime - b.averageRunTime;\n                    }}\n                />\n                <Table.Column\n                    title=\"Avg Queue\"\n                    dataIndex=\"averageQueueTime\"\n                    key=\"averageQueueTime\"\n                    width=\"10%\"\n                    render={(averageQueueTime: number) => {\n                        return <NiceTimeDuration precision={2} duration={averageQueueTime * 1000} />;\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.averageQueueTime - b.averageQueueTime;\n                    }}\n                />\n                <Table.Column\n                    title=\"Total Run\"\n                    dataIndex=\"totalRunTime\"\n                    key=\"totalRunTime\"\n                    width=\"10%\"\n                    render={(totalRunTime: number) => {\n                        return <NiceTimeDuration precision={2} duration={totalRunTime * 1000} />;\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.totalRunTime - b.totalRunTime;\n                    }}\n                />\n            </Table>\n        );\n    }\n    render() {\n        return <div className=\"PublicAppStats\">\n            {this.renderControlBar()}\n            {this.renderAppStatsTable()}\n        </div>;\n    }\n}\n","import { Action } from 'redux';\nimport { ActionType } from '.';\nimport { StoreState, AppStat, PublicAppStatsQuery } from '../store';\nimport { CatalogClient } from '@kbase/ui-lib';\nimport { AppError } from '@kbase/ui-components';\n\nimport { ThunkDispatch } from 'redux-thunk';\n\nfunction calcAverage(total: number, count: number) {\n    if (total) {\n        if (count) {\n            return total / count;\n        } else {\n            return null;\n        }\n    } else {\n        if (count) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n}\n\nfunction calcRate(part: number, whole: number) {\n    if (part) {\n        if (whole) {\n            return part / whole;\n        } else {\n            return null;\n        }\n    } else {\n        if (whole) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n}\n\n// Search\n\nexport interface Search extends Action<ActionType.PUBLIC_APP_STATS_SEARCH> {\n    type: ActionType.PUBLIC_APP_STATS_SEARCH;\n    query: PublicAppStatsQuery;\n}\n\nexport interface SearchStart extends Action<ActionType.PUBLIC_APP_STATS_SEARCH_START> {\n    type: ActionType.PUBLIC_APP_STATS_SEARCH_START;\n}\n\nexport interface SearchError extends Action<ActionType.PUBLIC_APP_STATS_SEARCH_ERROR> {\n    type: ActionType.PUBLIC_APP_STATS_SEARCH_ERROR;\n    error: AppError;\n}\n\nexport interface SearchSuccess extends Action<ActionType.PUBLIC_APP_STATS_SEARCH_SUCCESS> {\n    type: ActionType.PUBLIC_APP_STATS_SEARCH_SUCCESS;\n    appStats: Array<AppStat>;\n}\n\nfunction searchStart(): SearchStart {\n    return {\n        type: ActionType.PUBLIC_APP_STATS_SEARCH_START\n    };\n}\n\nfunction searchError(error: AppError): SearchError {\n    return {\n        type: ActionType.PUBLIC_APP_STATS_SEARCH_ERROR,\n        error\n    };\n}\n\nfunction searchSuccess(appStats: Array<AppStat>): SearchSuccess {\n    return {\n        type: ActionType.PUBLIC_APP_STATS_SEARCH_SUCCESS,\n        appStats\n    };\n}\n\nexport function search(query: PublicAppStatsQuery) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        Catalog: { url: catalogUrl }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                searchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        if (!userAuthorization) {\n            dispatch(\n                searchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        const catalogClient = new CatalogClient({\n            module: 'Catalog',\n            token: userAuthorization.token,\n            url: catalogUrl\n        });\n        const rawStats = await catalogClient.getExecAggrStats({});\n        const stats = rawStats.map((stat) => {\n            const [moduleId, functionId] = stat.full_app_id.split('/');\n            if (!moduleId || !functionId) {\n                console.warn('bad app!', stat);\n            }\n            const successRate = calcRate(stat.number_of_calls - stat.number_of_errors, stat.number_of_calls);\n            const averageRunTime = calcAverage(stat.total_exec_time, stat.number_of_calls);\n            const averageQueueTime = calcAverage(stat.total_queue_time, stat.number_of_calls);\n            return {\n                appId: stat.full_app_id,\n                moduleId,\n                functionId: functionId || '',\n                moduleTitle: moduleId,\n                functionTitle: functionId || '',\n                runCount: stat.number_of_calls,\n                errorCount: stat.number_of_errors,\n                successRate,\n                averageRunTime,\n                averageQueueTime,\n                totalRunTime: stat.total_queue_time\n            } as AppStat;\n        });\n\n        const expression = query.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n        const filtered = stats.filter((stat) => {\n            return expression.every((term) => {\n                return (\n                    term.test(stat.moduleTitle) ||\n                    term.test(stat.moduleId) ||\n                    term.test(stat.functionTitle) ||\n                    term.test(stat.functionId)\n                );\n            });\n        });\n\n        dispatch(searchSuccess(filtered));\n    };\n}\n","import { StoreState, AppStat, PublicAppStatsQuery, SearchState } from '../../redux/store';\nimport { Action, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport Component from './view';\nimport { search } from '../../redux/actions/publicAppStats';\n\nexport interface OwnProps {}\n\ninterface StateProps {\n    searchState: SearchState;\n    appStats: Array<AppStat>;\n}\n\ninterface DispatchProps {\n    onSearch: (query: PublicAppStatsQuery) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        views: {\n            publicAppStatsView: { appStats, searchState }\n        }\n    } = state;\n    return {\n        searchState,\n        appStats\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        onSearch: (query: PublicAppStatsQuery) => {\n            dispatch(search(query) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Component);\n","import React from 'react';\nimport { UserRunSummaryStat, SearchState, UserRunSummaryQuery } from '../../redux/store';\nimport { Table, Form, Input, Button, Tooltip } from 'antd';\nimport './style.css';\nimport UILink from '../UILink';\n\nexport interface UserRunSummaryProps {\n    searchState: SearchState;\n    userRunSummary: Array<UserRunSummaryStat>;\n    search: (query: UserRunSummaryQuery) => void;\n}\n\ninterface UserRunSummaryState { }\n\nexport default class UserRunSummary extends React.Component<UserRunSummaryProps, UserRunSummaryState> {\n    currentQuery: UserRunSummaryQuery;\n    constructor(props: UserRunSummaryProps) {\n        super(props);\n        this.currentQuery = {\n            query: ''\n        };\n    }\n    componentDidMount() {\n        this.props.search(this.currentQuery);\n    }\n    onSubmitSearch(event: React.FormEvent) {\n        event.preventDefault();\n        this.props.search(this.currentQuery);\n    }\n    onChangeQuery(event: React.ChangeEvent<HTMLInputElement>) {\n        this.currentQuery.query = event.target.value;\n    }\n    renderControlBar() {\n        return (\n            <Form layout=\"inline\" onSubmit={this.onSubmitSearch.bind(this)}>\n                <Form.Item>\n                    <Input\n                        defaultValue={this.currentQuery.query}\n                        placeholder=\"Search (leave empty for all)\"\n                        style={{ width: '20em' }}\n                        onChange={this.onChangeQuery.bind(this)}\n                    />\n                </Form.Item>\n                <Form.Item>\n                    <Button icon=\"search\" type=\"primary\" htmlType=\"submit\" />\n                </Form.Item>\n            </Form>\n        );\n    }\n    renderTable() {\n        return (\n            <Table<UserRunSummaryStat>\n                dataSource={this.props.userRunSummary}\n                loading={this.props.searchState === SearchState.SEARCHING}\n                rowKey={(stat: UserRunSummaryStat) => {\n                    return [\n                        stat.username,\n                        stat.appId,\n                        stat.moduleName,\n                        stat.functionName\n                    ].join(':');\n                }}\n                pagination={{ position: 'bottom', showSizeChanger: true }}\n                // pagination={false}\n                // scroll={{ y: '100%' }}\n                size=\"small\"\n                className=\"PreciseTable ScrollingFlexTable\"\n            >\n                <Table.Column\n                    title=\"User\"\n                    dataIndex=\"username\"\n                    // key=\"username\"\n                    width=\"30%\"\n                    render={(username: string, stat: UserRunSummaryStat) => {\n                        return (\n                            <Tooltip title={username}>\n                                <UILink path={`people/${username}`}\n                                    openIn='same-window'>\n                                    {username}\n                                </UILink>\n                            </Tooltip>\n                        );\n                    }}\n                    sorter={(a: UserRunSummaryStat, b: UserRunSummaryStat) => {\n                        return a.username.localeCompare(b.username);\n                    }}\n                />\n                <Table.Column\n                    title=\"Module\"\n                    dataIndex=\"moduleName\"\n                    // key=\"moduleId\"\n                    width=\"30%\"\n                    render={(moduleName: string) => {\n                        return (\n                            <Tooltip title={moduleName}>\n                                <UILink path={`catalog/modules/${moduleName}`}\n                                    openIn='same-window'>\n                                    {moduleName}\n                                </UILink>\n                            </Tooltip>\n                        );\n                    }}\n                    sorter={(a: UserRunSummaryStat, b: UserRunSummaryStat) => {\n                        return a.moduleName.localeCompare(b.moduleName);\n                    }}\n                />\n                <Table.Column\n                    title=\"Function\"\n                    dataIndex=\"functionName\"\n                    // key=\"functionId\"\n                    width=\"30%\"\n                    render={(functionName: string, stat: UserRunSummaryStat) => {\n                        return (\n                            <Tooltip title={functionName}>\n                                <UILink path={`catalog/apps/${stat.appId}`}\n                                    openIn='same-window'>\n                                    {functionName}\n                                </UILink>\n                            </Tooltip>\n                        );\n                    }}\n                    sorter={(a: UserRunSummaryStat, b: UserRunSummaryStat) => {\n                        return a.functionName.localeCompare(b.functionName);\n                    }}\n                />\n                <Table.Column\n                    title=\"Runs\"\n                    dataIndex=\"runCount\"\n                    // key=\"runCount\"\n                    width=\"10%\"\n                    align=\"right\"\n                    render={(runCount: number, stat: UserRunSummaryStat) => {\n                        return (\n                            <div className=\"NumericColumn\">\n                                {Intl.NumberFormat('en-US', {\n                                    useGrouping: true\n                                }).format(runCount)}\n                            </div>\n                        );\n                    }}\n                    sorter={(a: UserRunSummaryStat, b: UserRunSummaryStat) => {\n                        return a.runCount - b.runCount;\n                    }}\n                    defaultSortOrder=\"descend\"\n                />\n            </Table>\n        );\n    }\n    render() {\n        return (\n            <div className=\"UserRunSummary\">\n                {this.renderControlBar()}\n                {this.renderTable()}\n            </div>\n        );\n    }\n}\n","import { Action } from 'redux';\nimport { ActionType } from '.';\nimport { StoreState, UserRunSummaryQuery, UserRunSummaryStat } from '../store';\nimport { CatalogClient } from '@kbase/ui-lib';\nimport { AppError } from '@kbase/ui-components';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { } from './utils';\n\n// Search\n\nexport interface Search extends Action<ActionType.USER_RUN_SUMMARY_SEARCH> {\n    type: ActionType.USER_RUN_SUMMARY_SEARCH;\n    query: UserRunSummaryQuery;\n}\n\nexport interface SearchStart extends Action<ActionType.USER_RUN_SUMMARY_SEARCH_START> {\n    type: ActionType.USER_RUN_SUMMARY_SEARCH_START;\n}\n\nexport interface SearchError extends Action<ActionType.USER_RUN_SUMMARY_SEARCH_ERROR> {\n    type: ActionType.USER_RUN_SUMMARY_SEARCH_ERROR;\n    error: AppError;\n}\n\nexport interface SearchSuccess extends Action<ActionType.USER_RUN_SUMMARY_SEARCH_SUCCESS> {\n    type: ActionType.USER_RUN_SUMMARY_SEARCH_SUCCESS;\n    userRunSummary: Array<UserRunSummaryStat>;\n}\n\nfunction searchStart(): SearchStart {\n    return {\n        type: ActionType.USER_RUN_SUMMARY_SEARCH_START\n    };\n}\n\nfunction searchError(error: AppError): SearchError {\n    return {\n        type: ActionType.USER_RUN_SUMMARY_SEARCH_ERROR,\n        error\n    };\n}\n\nfunction searchSuccess(userRunSummary: Array<UserRunSummaryStat>): SearchSuccess {\n    return {\n        type: ActionType.USER_RUN_SUMMARY_SEARCH_SUCCESS,\n        userRunSummary\n    };\n}\n\nexport function search(query: UserRunSummaryQuery) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        Catalog: { url: catalogUrl }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                searchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        if (!userAuthorization) {\n            dispatch(\n                searchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        const catalogClient = new CatalogClient({\n            module: 'Catalog',\n            token: userAuthorization.token,\n            url: catalogUrl\n        });\n        const params = {\n            begin: 0,\n            end: Date.now()\n        };\n        const rawStats = await catalogClient.getExecAggrTable(params);\n        const stats: Array<UserRunSummaryStat> = rawStats.map((stat) => {\n            let appId: string | null = stat.app;\n            if (!appId) {\n                appId = null;\n            }\n\n            return {\n                username: stat.user,\n                isApp: stat.app ? true : false,\n                appId: stat.app || null,\n                moduleName: stat.func_mod,\n                functionName: stat.func,\n                runCount: stat.n\n            } as UserRunSummaryStat;\n        });\n\n        const expression = query.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n        const filtered = stats.filter((stat) => {\n            return expression.every((term) => {\n                return (\n                    (stat.appId && term.test(stat.appId)) ||\n                    term.test(stat.moduleName) ||\n                    term.test(stat.functionName) ||\n                    term.test(stat.username)\n                );\n            });\n        });\n\n        dispatch(searchSuccess(filtered));\n    };\n}\n","import { StoreState, SearchState, UserRunSummaryStat, UserRunSummaryQuery } from '../../redux/store';\nimport { Action, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport Component from './view';\nimport { search } from '../../redux/actions/userRunSummary';\n\nexport interface OwnProps {}\n\ninterface StateProps {\n    searchState: SearchState;\n    userRunSummary: Array<UserRunSummaryStat>;\n}\n\ninterface DispatchProps {\n    search: (query: UserRunSummaryQuery) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        views: {\n            userRunSummaryView: { searchState, userRunSummary }\n        }\n    } = state;\n    return { searchState, userRunSummary };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        search: (query: UserRunSummaryQuery) => {\n            dispatch(search(query) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Component);\n","import React from 'react';\nimport './style.css';\nimport UserJobs from '../UserJobs';\nimport MyJobs from '../MyJobs';\nimport PublicAppStats from '../PublicAppStats';\nimport UserRunSummary from '../UserRunSummary';\nimport { MainParams } from './state';\nimport FlexTabs, { Tab } from '../FlexTabs';\nimport { Icon } from 'antd';\n\nexport interface MainProps {\n    isAdmin: boolean;\n    params: MainParams;\n    view: string;\n    setTitle: (title: string) => void;\n    setView: (view: string) => void;\n    setParams: (params: MainParams) => void;\n}\n\ninterface MainState {\n    activeTabKey: string | null;\n    defaultActiveTabKey: string | null;\n}\n\nexport default class Main extends React.Component<MainProps, MainState> {\n    defaultTabKey: string;\n    constructor(props: MainProps) {\n        super(props);\n        this.defaultTabKey = 'myJobs';\n        this.state = {\n            activeTabKey: this.defaultTabKey,\n            defaultActiveTabKey: this.defaultTabKey\n        };\n    }\n\n    componentDidMount() {\n        this.props.setTitle('Job Browser');\n    }\n\n    componentWillUnmount() {\n        this.setState({\n            activeTabKey: null\n            // defaultActiveTabKey: null\n        });\n    }\n\n    onTabsChange(activeKey: string) {\n        this.setState({ activeTabKey: activeKey });\n        // this.state.activeTabKey = activeKey;\n    }\n\n    renderJobsTab() { }\n\n    renderAdminJobsTab() { }\n\n    renderMyJobsTab() {\n        return <MyJobs />\n    }\n\n    renderUserJobsTab() {\n        return <UserJobs />\n    }\n\n    renderPublicAppStatsTab() {\n        return <PublicAppStats />\n    }\n\n    renderUserRunSummaryTab() {\n        return <UserRunSummary />\n    }\n\n    renderTabs() {\n        const tabs: Array<Tab> = [];\n\n        tabs.push({\n            tab: 'myjobs',\n            title: 'My Jobs',\n            component: this.renderMyJobsTab()\n        });\n\n        if (this.props.isAdmin) {\n            const userJobsTabLabel = (\n                <span>\n                    User Jobs <Icon type=\"unlock\" />\n                </span>\n            );\n            tabs.push({\n                tab: 'userjobs',\n                title: userJobsTabLabel,\n                component: <UserJobs />\n            })\n        }\n\n        tabs.push({\n            tab: 'appstats',\n            title: 'Public AppStats',\n            component: this.renderPublicAppStatsTab()\n        });\n\n        if (this.props.isAdmin) {\n            const tabLabel = (\n                <span>\n                    User Run Summary <Icon type=\"unlock\" />\n                </span>\n            );\n            tabs.push({\n                tab: 'userrunsummary',\n                title: tabLabel,\n                component: <UserRunSummary />\n            })\n        }\n\n        return (\n            <FlexTabs\n                tabs={tabs}\n            />\n        );\n    }\n\n    render() {\n        return <div\n            className=\"Col Col-scrollable\"\n            data-k-b-testhook-plugin=\"job-browser2\"\n        >\n            {this.renderTabs()}\n        </div>;\n    }\n}\n","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\nimport Main from './view';\nimport { StoreState } from '../../redux/store';\nimport { sendTitle, setView, setParams } from '@kbase/ui-components';\nimport { Params } from '@kbase/ui-components/lib/redux/integration/store';\n\nexport interface OwnProps { }\n\nexport type MainParams = Params<'tab'>;\n\ninterface StateProps {\n    isAdmin: boolean;\n    params: MainParams;\n    view: string;\n}\n\ninterface DispatchProps {\n    setTitle: (title: string) => void;\n    setView: (view: string) => void;\n    setParams: (params: MainParams) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        views: {\n            mainView: { isAdmin }\n        },\n        app: {\n            runtime: {\n                navigation: { view, params: rawParams }\n            }\n        }\n    } = state;\n    // TODO: call function to coerce raw params into typed params...\n    const params: MainParams = (rawParams as unknown) as MainParams;\n    return { isAdmin, view, params };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        },\n        setView: (view: string) => {\n            dispatch(setView(view) as any);\n        },\n        setParams: (params: MainParams) => {\n            dispatch(setParams(params) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Main);\n","import { Action } from 'redux';\nimport { ActionType } from '.';\nimport { CatalogClient } from '@kbase/ui-lib';\nimport { AppError } from '@kbase/ui-components';\n\nimport { ThunkDispatch } from 'redux-thunk';\nimport { StoreState } from '../store';\n\n// MAIN Loading\n\nexport interface MainLoad extends Action<ActionType.MAIN_LOAD> {\n    type: ActionType.MAIN_LOAD;\n}\n\nexport interface MainLoadStart extends Action<ActionType.MAIN_LOAD_START> {\n    type: ActionType.MAIN_LOAD_START;\n}\n\nexport interface MainLoadSuccess extends Action<ActionType.MAIN_LOAD_SUCCESS> {\n    type: ActionType.MAIN_LOAD_SUCCESS;\n    isAdmin: boolean;\n}\n\nexport interface MainLoadError extends Action<ActionType.MAIN_LOAD_ERROR> {\n    type: ActionType.MAIN_LOAD_ERROR;\n    error: AppError;\n}\n\nexport interface Unload extends Action<ActionType.MAIN_UNLOAD> {\n    type: ActionType.MAIN_UNLOAD;\n}\n\nexport function mainLoadStart(): MainLoadStart {\n    return {\n        type: ActionType.MAIN_LOAD_START\n    };\n}\n\nexport function mainLoadSuccess(isAdmin: boolean): MainLoadSuccess {\n    return {\n        type: ActionType.MAIN_LOAD_SUCCESS,\n        isAdmin\n    };\n}\n\nexport function mainLoadError(error: AppError): MainLoadError {\n    return {\n        type: ActionType.MAIN_LOAD_ERROR,\n        error\n    };\n}\n\nexport function mainLoad() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(mainLoadStart());\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        Catalog: { url: catalogURL }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                mainLoadError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        // determine auth\n        // TODO: we need a model object for interacting with the outside world\n        const catalogClient = new CatalogClient({\n            token: userAuthorization.token,\n            url: catalogURL,\n            module: 'Catalog'\n        });\n\n        try {\n            const isAdmin = await catalogClient.isAdmin();\n            dispatch(mainLoadSuccess(isAdmin ? true : false));\n        } catch (ex) {\n            dispatch(\n                mainLoadError({\n                    message: ex.message,\n                    code: 'error-checking-admin-status'\n                })\n            );\n        }\n    };\n}\n\nexport function unload() {\n    return {\n        type: ActionType.MAIN_UNLOAD\n    };\n}\n","/**\n * This is a \"loader\" component. It is solely responsible for\n */\nimport * as React from 'react';\nimport { ComponentLoadingState, StoreState, MainView } from '../../redux/store';\nimport Container from './state';\n\n// The redux connection\n\nimport { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { Spin, Alert } from 'antd';\nimport { mainLoad, unload } from '../../redux/actions/app';\n\n// First the loader component, which takes care of a loading view, error view, and the\n// container.\n\nexport interface LoaderProps {\n    view: MainView;\n    onLoad: () => void;\n    unload: () => void;\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Main ... <Spin />\n            </div>\n        );\n        return (\n            <Alert\n                type=\"info\"\n                message={message}\n                style={{\n                    width: '20em',\n                    padding: '20px',\n                    margin: '20px auto'\n                }}\n            />\n        );\n    }\n\n    renderError() {\n        if (!this.props.view.error) {\n            return;\n        }\n        return <Alert type=\"error\" message={this.props.view.error.message} />;\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading();\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading();\n            case ComponentLoadingState.ERROR:\n                return this.renderError();\n            case ComponentLoadingState.SUCCESS:\n                return <Container />;\n        }\n    }\n\n    componentDidMount() {\n        // this.props.onLoad();\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad();\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.unload();\n    }\n}\n\n/**\n * This is the redux interface -- the main entry point for the Main Component.\n */\n\nexport interface OwnProps { }\n\ninterface StateProps {\n    view: MainView;\n    token: string;\n}\n\ninterface DispatchProps {\n    onLoad: () => void;\n    unload: () => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        views: { mainView }\n    } = state;\n    return {\n        view: mainView,\n        token: userAuthorization!.token\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, props: OwnProps): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(mainLoad() as any);\n        },\n        unload: () => {\n            dispatch(unload() as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Loader);\n","import React from 'react';\nimport { Alert } from 'antd';\n\nexport interface ErrorBoundaryProps {\n\n}\n\ninterface ErrorBoundaryState {\n    errorMessage: string | null;\n}\n\nexport default class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n    constructor(props: ErrorBoundaryProps) {\n        super(props);\n        this.state = {\n            errorMessage: null\n        }\n    }\n\n    static getDerivedStateFromError(error: Error) {\n        return {\n            errorMessage: error.message\n        }\n    }\n\n    componentDidCatch(error: Error, errorInfo: any) {\n        console.error('ERROR', error, errorInfo);\n    }\n\n    render() {\n        if (this.state.errorMessage) {\n            const message = this.state.errorMessage;\n            return <Alert type=\"error\" message={message} />\n        }\n        return this.props.children;\n    }\n}","/**\n * The top component of the App, named appropriately App.\n *\n * As the top level component of the app, it is responsible for the setting up\n * any top level support such as the KBase integration (kbase-ui's AppBase) and\n * the redux store.\n */\n\n// 3rd party\nimport React from 'react';\nimport { createReduxStore } from './redux/store';\nimport { Provider } from 'react-redux';\n\n// KBase external\nimport { AppBase } from '@kbase/ui-components';\n\nimport { AuthGate } from '@kbase/ui-components';\n\n// project\nimport Main from './components/Main';\nimport ErrorBoundary from './components/ErrorBoundary'\n\n// file\nimport './App.css';\n\n/**\n * The app currently has no props, but we establish\n * a props interface as a placeholder.\n */\nexport interface AppProps { }\n\n/**\n * The app currently has no state, but we establish\n * a state interface as a placeholder.\n */\ninterface AppState { }\n\n// Redux setup\nconst store = createReduxStore();\n\n/**\n * The top level component for the entire web app.\n *\n * @remarks\n * Also see the [kbase-ui] support library, which provides AppBase\n *\n * @public\n */\nexport default class App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <ErrorBoundary>\n                <Provider store={store}>\n                    <AppBase>\n                        <AuthGate required={true}>\n                            <Main />\n                        </AuthGate>\n                    </AppBase>\n                </Provider>\n            </ErrorBoundary>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * index.tsx\n * This is the root code run from the index.html, and is thus the entry point to the\n * app.\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}