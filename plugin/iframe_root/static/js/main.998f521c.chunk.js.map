{"version":3,"sources":["redux/actions/index.ts","redux/reducers/myJobs.ts","redux/reducers/userJobs.ts","redux/reducers/app.ts","redux/reducers/publicAppStats.ts","redux/reducers/userRunSummary.ts","redux/store.ts","redux/reducers/index.ts","components/JobStatus.tsx","components/JobLog/view.tsx","components/FlexTabs.tsx","components/UILink.tsx","components/NarrativeLink.tsx","components/JobInfo.tsx","components/JobDetail/view.tsx","lib/comm/HTTPUtils.ts","lib/comm/HTTPClient.ts","lib/comm/JSONRPC11.ts","lib/comm/ServiceClient.ts","lib/comm/coreServices/ServiceWizard.ts","lib/comm/Cache.ts","lib/comm/DynamicServiceClient.ts","lib/MetricsServiceClient.ts","redux/actions/utils.ts","components/JobDetail/state.tsx","components/JobDetail/index.ts","lib/Poller.ts","lib/PubSub.ts","components/Monitor.tsx","components/UserJobs/view.tsx","lib/CancelableRequest.ts","redux/actions/userJobs.ts","components/UserJobs/index.tsx","components/MyJobs/view.tsx","redux/actions/myJobs.ts","components/MyJobs/index.tsx","components/PublicAppStats/view.tsx","redux/actions/publicAppStats.ts","components/PublicAppStats/index.tsx","components/UserRunSummary/view.tsx","redux/actions/userRunSummary.ts","components/UserRunSummary/index.tsx","components/Main/view.tsx","components/Main/state.ts","redux/actions/app.ts","components/Main/index.tsx","components/ErrorBoundary.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionType","reducer","state","action","type","MY_JOBS_SEARCH_SUCCESS","views","myJobsView","searchState","SearchState","SEARCHED","rawJobs","jobs","jobsFetchedAt","searchExpression","myJobsSearchSuccess","MY_JOBS_SEARCH_START","SEARCHING","myJobsSearchStart","MY_JOBS_CANCEL_SUCCESS","myJobsCancelJobSuccess","MY_JOBS_SEARCH_ERROR","ERROR","error","myJobsSearchError","USER_JOBS_SEARCH_START","userJobsView","userJobsSearchStart","USER_JOBS_SEARCH_SUCCESS","userJobsSearchSuccess","USER_JOBS_CANCEL_START","USER_JOBS_CANCEL_SUCCESS","cancelJobSuccess","MAIN_LOAD_SUCCESS","mainView","loadingState","ComponentLoadingState","SUCCESS","isAdmin","mainLoadSuccess","MAIN_UNLOAD","NONE","unload","PUBLIC_APP_STATS_SEARCH_START","publicAppStatsView","searchStart","PUBLIC_APP_STATS_SEARCH_SUCCESS","appStats","searchSuccess","JobStatus","USER_RUN_SUMMARY_SEARCH_START","userRunSummaryView","USER_RUN_SUMMARY_SEARCH_SUCCESS","userRunSummary","baseState","baseReducer","appReducer","myJobsReducer","userJobsReducer","publicAppStatsReducer","jobColor","status","QUEUED","RUNNING","CANCELED_QUEUED","CANCELED_RUNNING","FINISHED","ERRORED_QUEUED","ERRORED_RUNNING","Error","PlayState","JobStatusComponent","label","spin","jobStatusLabel","this","props","job","color","from","queuedAt","useClock","runAt","time","Date","finishAt","timing","showTiming","renderTiming","renderTag","React","Component","Tabs","selectedTabIndex","tabIndex","setState","tabs","map","tab","index","classNames","push","key","String","className","join","onClick","selectTab","title","component","renderTabs","renderTabBody","JobLogs","params","playLogTimer","bodyRef","currentJobStatus","createRef","playState","isPaused","isActive","scrollToBottom","current","scrollTop","scrollHeight","lastJobStatus","message","size","style","textAlign","fontStyle","backgroundColor","data-end","lines","log","length","rows","line","rowStyle","isError","lineNumber","renderLastLine","ref","dataSource","rowKey","logLine","pagination","scroll","y","rowClassName","Column","dataIndex","width","render","numberDisplay","Intl","NumberFormat","useGrouping","format","sorter","a","b","row","contentType","content","Papa","unparse","delimiter","logToTSV","JSON","stringify","logToJSON","logToText","logToCSV","filename","downloadLink","document","createElement","downloadContent","Blob","href","URL","createObjectURL","download","visibility","body","appendChild","click","removeChild","revokeObjectURL","param","downloadLog","PLAYING","PAUSED","playTooltip","pauseTooltip","irrelevant","renderPlayPauseTooltips","icon","disabled","onPlayLog","bind","onPauseLog","menu","onMenuClick","Item","overlay","renderPlayPause","renderToolbar","renderJobLog","UILink","path","openIn","target","children","rel","NarrativeLink","narrativeID","JobInfo","date","precision","to","jobStatus","id","narrativeTitle","renderNarrativeLink","appID","appTitle","renderSubmitted","renderQueuedFor","renderStateSpinner","renderRunFor","JobDetail","view","JobLogState","JOB_QUEUED","renderQueued","INITIAL_LOADING","renderLoading","renderError","ACTIVE_LOADED","ACTIVE_LOADING","FINISHED_LOADED","Array","keys","i","flex","display","flexDirection","borderBottom","padding","overflowWrap","wordWrap","minHeight","overflowY","renderStatus","renderJobInfo","Fragment","renderMiniDetails","HTTPQuery","queryMap","value","that","Object","encodeURIComponent","HTTPHeader","initialHeaders","header","XMLHttpRequest","fromXHR","fromMap","xhr","responseHeaders","getAllResponseHeaders","fieldsArray","split","fieldsMap","forEach","field","firstColon","indexOf","name","substr","trim","toLowerCase","fieldName","fieldValue","filter","undefined","getHeader","stringValue","setRequestHeader","values","x","mediaType","charset","TimeoutError","timeout","elapsed","setPrototypeOf","prototype","stack","GeneralError","AbortError","HTTPClient","options","startTime","getTime","Promise","resolve","reject","onload","response","responseType","ontimeout","onerror","url","onabort","query","toString","rt","open","method","ex","withCredentials","exportHeader","data","send","onCancel","abort","Uint8Array","JSONRPC11Exception","JSONRPCClient","authorization","version","uuid","v4","payload","makePayload","setHeader","requestOptions","httpClient","request","then","httpResponse","result","parse","code","originalMessage","responseText","hasOwnProperty","errorResult","ServiceClient","module","funcName","client","callMethod","isString","p","Reflect","has","get","isGetServiceStatusResult","subType","every","arrayElement","isArray","isNumber","CacheItemState","ServiceWizardClient","callFunc","moduleCache","itemLifetime","monitoringFrequency","waiterTimeout","waiterFrequency","cache","cacheLifetime","isMonitoring","Map","setTimeout","newCache","cacheRenewed","item","isExpired","set","runMonitor","cacheItem","createdAt","cached","delete","fetcher","started","resolveItem","async","reserveAndFetch","RESERVED","PRESENT","waiter","reserveItem","newItem","newCacheItem","reserveWaiter","reservedItem","reservedAt","MetricsServiceClient","epoch_range","user_ids","job_id","serviceDiscoveryURL","serviceDiscoveryModule","moduleId","getItemWithWait","getCached","getServiceStatus","module_name","moduleInfo","lookupModule","serviceJobToUIJob","username","getJobStatus","wsid","parseInt","app_id","narrative_name","creation_time","queuedElapsed","now","clientGroups","client_groups","user","makeJobQueued","exec_start_time","console","runElapsed","makeJobRunning","finish_time","makeJobFinished","makeJobErroredQueued","makeJobErroredRunning","makeJobCanceledQueued","makeJobCanceledRunning","compareStatus","some","extractTimeRange","timeRange","kind","preset","endDate","hourInMilliseconds","getTimeRange","start","end","JobLogsState","metricsClient","token","serviceWizardURL","jobID","getJob","job_state","skipLines","njsClient","NarrativeJobServiceClient","njsURL","getJobLogs","skip_lines","jobLog","is_error","poller","startingLines","getJobLog","newLog","startQueuedPolling","concat","loop","startRunningPolling","getInitialJobLog","connect","PollerState","userAuthorization","auth","app","config","services","NarrativeJobService","ServiceWizard","dispatch","ownProps","PubSubProxy","pubsub","subscriptions","messageID","handler","on","off","PubSub","sendQueue","messageListeners","allListeners","queue","messageListener","listeners","listener","window","sendMessages","processQueue","l","Poller","statusTimer","statusCount","watchStartAt","watcherTimer","waitTimer","pubsubProxy","STOPPED","clearInterval","clearTimeout","updateOnProgress","startWaiting","STARTED","pollWatch","stopPolling","POLLING","pollWatcherLoop","WAITING","warn","watchInterval","pollWaitProgressLoop","setInterval","pollInterval","progressSteps","runPoll","onPoll","startWatching","is","pause","play","startListeningForPollingEvent","onProgress","stopListeningForPollingEvent","MONITORING_INTERVAL","MONITORING_FEEDBACK_STEPS","WATCH_INTERVAL","Monitor","monitoringTimer","monitoringStatusTimer","pollWatcherTimer","searchListenerID","pollWaitProgress","isPollingInitiated","pollingStartedAt","isPolling","isOpen","startOpen","progress","startPolling","startMonitoring","stopMonitoring","stop","showControls","monitoringStatus","monitor","buttonType","opener","defaultChecked","checkedChildren","unCheckedChildren","onChange","onToggleOpen","percent","showInfo","strokeWidth","strokeColor","toggleMonitoring","fontSize","jobStatusFilterOptions","UserJobs","currentQuery","showDates","currentJobStatusFilter","defaultTimeRange","isFilterOpen","selectedJob","currentSort","doSearch","event","preventDefault","forceSearch","jobStatusFilter","jobStatuses","jobStatusFilterOptionsToJobStatus","sort","search","dateString","existingTimeRange","valueOf","Infinity","onConfirm","cancelJob","okText","cancelText","defaultValue","onChangeTimeRange","dropdownMatchSelectWidth","Option","showTime","allowClear","moment","onRangeFromChange","onRangeToChange","dateControls","renderTimeRangeControl","layout","onSubmit","placeholder","onChangeQuery","renderTimeRangeSelectionControl","htmlType","onToggleFilterArea","isPollerRunning","showMonitoringControls","filters","checked","fontWeight","marginRight","onClickAny","onClickActive","onClickFinished","Group","onFilterChange","filterRow","filterRowStyle","margin","renderFilterInput","renderSearchInput","footer","onCloseModal","fontFamily","visible","loading","position","showSizeChanger","e","onClickDetail","defaultSortOrder","_","renderJobAction","data-k-b-testhook-component","renderControlBar","renderJobsTable","renderJobDetail","CancelableRequest","pendingTasks","isCanceled","task","cancel","cancelPending","userJobsSearchError","USER_JOBS_SEARCH_ERROR","userJobsSearchRequest","promise","getJobs","metrics","job_states","jobState","newID","userJobsCancelJobError","USER_JOBS_CANCEL_ERROR","UserJobsReduxAdapter","getState","searchTerms","term","RegExp","timeRangeStart","timeRangeEnd","spawn","done","newJobs","test","userJobsSearch","catch","err","userJobsCancelJob","MyJobs","defaultTimeRangePreset","data-k-b-testhook-button","onJobCancel","sortOrder","direction","myJobsSearchRequests","myJobsRefreshSearch","myJobsCancelJobError","MY_JOBS_CANCEL_ERROR","myJobsSearch","MY_JOBS_CANCEL_START","myJobsCancelJob","refreshSearch","PublicAppStats","onSearch","onSubmitSearch","stat","appId","onTableChange","moduleTitle","localeCompare","functionId","functionTitle","align","runCount","errorCount","successRate","averageRunTime","duration","averageQueueTime","totalRunTime","renderAppStatsTable","calcAverage","total","count","searchError","PUBLIC_APP_STATS_SEARCH_ERROR","catalogUrl","Catalog","catalogClient","CatalogClient","getExecAggrStats","rawStats","stats","full_app_id","part","whole","number_of_calls","number_of_errors","total_exec_time","total_queue_time","expression","filtered","UserRunSummary","moduleName","functionName","renderTable","USER_RUN_SUMMARY_SEARCH_ERROR","begin","getExecAggrTable","isApp","func_mod","func","n","Main","defaultTabKey","activeTabKey","defaultActiveTabKey","setTitle","activeKey","renderMyJobsTab","userJobsTabLabel","renderPublicAppStatsTab","tabLabel","data-k-b-testhook-plugin","runtime","navigation","sendTitle","setView","setParams","mainLoadError","MAIN_LOAD_ERROR","Loader","LOADING","onLoad","MAIN_LOAD_START","catalogURL","ErrorBoundary","errorMessage","errorInfo","store","createStore","makeBaseStoreState","rawAppStats","makeInitialStoreState","compose","applyMiddleware","thunk","App","required","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.998f521c.chunk.js","sourcesContent":["export enum ActionType {\n    MAIN_LOAD = 'main load',\n    MAIN_LOAD_START = 'main load start',\n    MAIN_LOAD_SUCCESS = 'main load success',\n    MAIN_LOAD_ERROR = 'main load error',\n    MAIN_UNLOAD = 'main/unload',\n\n    MY_JOBS_SEARCH = 'my jobs search',\n    MY_JOBS_SEARCH_START = 'my jobs search start',\n    MY_JOBS_SEARCH_SUCCESS = 'my jobs search success',\n    MY_JOBS_SEARCH_ERROR = 'my jobs search error',\n    My_JOBS_REFRESH_SEARCH = 'my jobs refresh search',\n\n    MY_JOBS_CANCEL = 'my jobs cancel',\n    MY_JOBS_CANCEL_START = 'my jobs cancel start',\n    MY_JOBS_CANCEL_SUCCESS = 'my jobs cancel success',\n    MY_JOBS_CANCEL_ERROR = 'my jobs cancel error',\n\n    USER_JOBS_SEARCH = 'user jobs search',\n    USER_JOBS_SEARCH_START = 'user jobs search start',\n    USER_JOBS_SEARCH_SUCCESS = 'user jobs search success',\n    USER_JOBS_SEARCH_ERROR = 'user jobs search error',\n\n    USER_JOBS_CANCEL = 'user jobs cancel',\n    USER_JOBS_CANCEL_START = 'user jobs cancel start',\n    USER_JOBS_CANCEL_SUCCESS = 'user jobs cancel success',\n    USER_JOBS_CANCEL_ERROR = 'user jobs cancel error',\n\n    PUBLIC_APP_STATS_SEARCH = 'publicAppStats/Search',\n    PUBLIC_APP_STATS_SEARCH_START = 'publicAppStats/Search/Start',\n    PUBLIC_APP_STATS_SEARCH_ERROR = 'publicAppStats/Search/Error',\n    PUBLIC_APP_STATS_SEARCH_SUCCESS = 'publicAppStats/Search/Success',\n\n    USER_RUN_SUMMARY_SEARCH = 'userRunSummary/Search',\n    USER_RUN_SUMMARY_SEARCH_START = 'userRunSummary/Search/Start',\n    USER_RUN_SUMMARY_SEARCH_ERROR = 'userRunSummary/Search/Error',\n    USER_RUN_SUMMARY_SEARCH_SUCCESS = 'userRunSummary/Search/Success'\n}\n\n// function fakeJobs() {\n//     function randomStatus(): JobStatus {\n//         const i = Math.floor(Math.random() * 4);\n//         return [JobStatus.QUEUED, JobStatus.RUNNING, JobStatus.FINISHED, JobStatus.ERRORED][i];\n//     }\n\n//     function createJobs(jobCount: number) {\n//         const testJobs: Array<Job> = [];\n\n//         const dayMs = 1000 * 60 * 60 * 24;\n//         const now = Date.now();\n\n//         for (let i = 0; i < jobCount; i++) {\n//             testJobs.push({\n//                 key: 'narrative_id_' + i,\n//                 narrativeTitle: 'narrative ' + i + ' here',\n//                 narrativeID: i,\n//                 appTitle: 'app here',\n//                 appID: String(i),\n//                 submittedAt: new Date(now - dayMs * (jobCount - i)).getTime(),\n//                 queuedAt: new Date(now - dayMs * (jobCount - i)).getTime(),\n//                 runAt: new Date(now - dayMs * (jobCount - i)).getTime(),\n//                 finishAt: new Date(now - dayMs * (jobCount - i)).getTime(),\n//                 queuedElapsed: 1000 * 100 * Math.random(),\n//                 runElapsed: 1000 * 100 * Math.random(),\n//                 status: randomStatus()\n//             });\n//         }\n\n//         return testJobs;\n//     }\n\n//     const jobCount = Math.floor(Math.random() * 200);\n\n//     return createJobs(jobCount);\n// }\n\n// async function fetchMyJobsx(): Promise<Array<Job>> {\n//     return new Promise((resolve, reject) => {\n//         window.setTimeout(() => {\n//             resolve(fakeJobs());\n//         }, 3000);\n//     });\n// }\n\n// All user jobs, for admins.\n// This is separate, because it exposes different information in the view.\n","import { Reducer } from \"react\";\nimport { StoreState, SearchState } from \"../store\";\nimport { Action } from \"redux\";\nimport { MyJobsSearchStart, MyJobsSearchSuccess, MyJobsCancelJobSuccess, MyJobsSearchError } from \"../actions/myJobs\";\nimport { ActionType } from \"../actions\";\n\nfunction myJobsSearchStart(state: StoreState, action: MyJobsSearchStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            myJobsView: {\n                ...state.views.myJobsView,\n                searchState: SearchState.SEARCHING\n            }\n        }\n    };\n}\n\nfunction myJobsSearchSuccess(state: StoreState, action: MyJobsSearchSuccess): StoreState {\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            myJobsView: {\n                ...state.views.myJobsView,\n                searchState: SearchState.SEARCHED,\n                rawJobs: action.rawJobs,\n                jobs: action.jobs,\n                jobsFetchedAt: action.jobsFetchedAt,\n                searchExpression: action.searchExpression\n            }\n        }\n    };\n    return newState;\n}\n\nfunction myJobsSearchError(state: StoreState, action: MyJobsSearchError): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            myJobsView: {\n                ...state.views.myJobsView,\n                searchState: SearchState.ERROR,\n                error: action.error\n            }\n        }\n    };\n}\n\nfunction myJobsCancelJobSuccess(state: StoreState, action: MyJobsCancelJobSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            myJobsView: {\n                ...state.views.myJobsView\n                // TODO: should twiddle a cancellation status for the job.\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.MY_JOBS_SEARCH_SUCCESS:\n            return myJobsSearchSuccess(state, action as MyJobsSearchSuccess);\n        case ActionType.MY_JOBS_SEARCH_START:\n            return myJobsSearchStart(state, action as MyJobsSearchStart);\n        case ActionType.MY_JOBS_CANCEL_SUCCESS:\n            return myJobsCancelJobSuccess(state, action as MyJobsCancelJobSuccess);\n        case ActionType.MY_JOBS_SEARCH_ERROR:\n            return myJobsSearchError(state, action as MyJobsSearchError);\n    }\n};\n\nexport default reducer;\n","import { StoreState, SearchState } from '../store';\nimport {\n    UserJobsSearchStart,\n    UserJobsSearchSuccess,\n    UserJobsCancelJobStart,\n    UserJobsCancelJobSuccess\n} from '../actions/userJobs';\nimport { Reducer } from 'react';\nimport { Action } from 'redux';\nimport { ActionType } from '../actions';\n\nfunction userJobsSearchStart(state: StoreState, action: UserJobsSearchStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userJobsView: {\n                ...state.views.userJobsView,\n                searchState: SearchState.SEARCHING\n            }\n        }\n    };\n}\n\nfunction userJobsSearchSuccess(state: StoreState, action: UserJobsSearchSuccess): StoreState {\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            userJobsView: {\n                ...state.views.userJobsView,\n                searchState: SearchState.SEARCHED,\n                rawJobs: action.rawJobs,\n                jobs: action.jobs,\n                jobsFetchedAt: action.jobsFetchedAt,\n                searchExpression: action.searchExpression\n            }\n        }\n    };\n    return newState;\n}\n\nfunction cancelJobStart(state: StoreState, action: UserJobsCancelJobStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userJobsView: {\n                ...state.views.userJobsView\n                // TODO: need cancelation state...\n            }\n        }\n    };\n}\n\nfunction cancelJobSuccess(state: StoreState, action: UserJobsCancelJobSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userJobsView: {\n                ...state.views.userJobsView\n                // TODO: need cancelation state...\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.USER_JOBS_SEARCH_START:\n            return userJobsSearchStart(state, action as UserJobsSearchStart);\n        case ActionType.USER_JOBS_SEARCH_SUCCESS:\n            return userJobsSearchSuccess(state, action as UserJobsSearchSuccess);\n        case ActionType.USER_JOBS_CANCEL_START:\n            return cancelJobStart(state, action as UserJobsCancelJobStart);\n        case ActionType.USER_JOBS_CANCEL_SUCCESS:\n            return cancelJobSuccess(state, action as UserJobsCancelJobSuccess);\n    }\n};\n\nexport default reducer;\n","import { StoreState, ComponentLoadingState } from '../store';\nimport { MainLoadSuccess, Unload } from '../actions/app';\nimport { Reducer } from 'react';\nimport { Action } from 'redux';\nimport { ActionType } from '../actions';\n\nfunction mainLoadSuccess(state: StoreState, action: MainLoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            mainView: {\n                ...state.views.mainView,\n                loadingState: ComponentLoadingState.SUCCESS,\n                isAdmin: action.isAdmin\n            }\n        }\n    };\n}\n\nfunction unload(state: StoreState, action: Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            mainView: {\n                loadingState: ComponentLoadingState.NONE,\n                isAdmin: false,\n                error: null\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.MAIN_LOAD_SUCCESS:\n            return mainLoadSuccess(state, action as MainLoadSuccess);\n        case ActionType.MAIN_UNLOAD:\n            return unload(state, action as Unload);\n    }\n};\n\nexport default reducer;\n","import { StoreState, SearchState } from '../store';\nimport { Reducer } from 'react';\nimport { Action } from 'redux';\nimport { ActionType } from '../actions';\nimport { SearchSuccess, SearchStart } from '../actions/publicAppStats';\n\nfunction searchSuccess(state: StoreState, action: SearchSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            publicAppStatsView: {\n                ...state.views.publicAppStatsView,\n                searchState: SearchState.SEARCHED,\n                appStats: action.appStats\n            }\n        }\n    };\n}\n\nfunction searchStart(state: StoreState, action: SearchStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            publicAppStatsView: {\n                ...state.views.publicAppStatsView,\n                searchState: SearchState.SEARCHING\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.PUBLIC_APP_STATS_SEARCH_START:\n            return searchStart(state, action as SearchStart);\n        case ActionType.PUBLIC_APP_STATS_SEARCH_SUCCESS:\n            return searchSuccess(state, action as SearchSuccess);\n    }\n};\n\nexport default reducer;\n","import { StoreState, SearchState } from '../store';\nimport { Reducer } from 'react';\nimport { Action } from 'redux';\nimport { ActionType } from '../actions';\nimport { SearchSuccess, SearchStart } from '../actions/userRunSummary';\n\nfunction searchSuccess(state: StoreState, action: SearchSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userRunSummaryView: {\n                ...state.views.userRunSummaryView,\n                searchState: SearchState.SEARCHED,\n                userRunSummary: action.userRunSummary\n            }\n        }\n    };\n}\n\nfunction searchStart(state: StoreState, action: SearchStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userRunSummaryView: {\n                ...state.views.userRunSummaryView,\n                searchState: SearchState.SEARCHING\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.USER_RUN_SUMMARY_SEARCH_START:\n            return searchStart(state, action as SearchStart);\n        case ActionType.USER_RUN_SUMMARY_SEARCH_SUCCESS:\n            return searchSuccess(state, action as SearchSuccess);\n    }\n};\n\nexport default reducer;\n","import { makeBaseStoreState } from \"@kbase/ui-components\";\nimport reducer from \"./reducers\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { AppError } from \"@kbase/ui-components\";\nimport { BaseStoreState } from \"@kbase/ui-components\";\n\nexport enum JobStatus {\n  QUEUED = \"QUEUED\",\n  RUNNING = \"RUNNING\",\n  FINISHED = \"FINISHED\",\n  ERRORED_QUEUED = \"ERRORED_QUEUED\",\n  ERRORED_RUNNING = \"ERRORED_RUNNING\",\n  CANCELED_QUEUED = \"CANCELED_QUEUED\",\n  CANCELED_RUNNING = \"CANCELED_RUNNING\"\n}\n\nexport type JobID = string;\n\n// export interface Job {\n//     id: JobID;\n//     key: string;\n//     narrativeID: number | null;\n//     narrativeTitle: string;\n//     appID: string;\n//     appTitle: string;\n//     queuedAt: EpochTime;\n//     runAt: EpochTime | null;\n//     finishAt: EpochTime | null;\n//     queuedElapsed: number;\n//     runElapsed: number | null;\n//     status: JobStatus;\n//     message: string;\n//     clientGroups: Array<string>;\n//     username: string;\n// }\n\n// export enum TemporalState {\n//     NONE,\n//     QUEUED,\n//     RUNNING\n// }\n\n// export enum PermanentState {\n//     NONE,\n//     SUCCESS,\n//     ERROR,\n//     CANCEL\n// }\n\n// export interface JobQueuedState {\n//     tstate: TemporalState.QUEUED;\n//     pstate: PermanentState.NONE;\n\n//     id: JobID;\n//     key: string;\n//     narrativeID: number | null;\n//     narrativeTitle: string;\n//     appID: string;\n//     appTitle: string;\n//     queuedAt: EpochTime;\n//     queuedElapsed: number;\n//     clientGroups: Array<string>;\n//     username: string;\n// }\n\n// export interface JobRunningState {\n//     tstate: TemporalState.RUNNING;\n//     pstate: PermanentState.NONE;\n\n//     id: JobID;\n//     key: string;\n//     narrativeID: number | null;\n//     narrativeTitle: string;\n//     appID: string;\n//     appTitle: string;\n//     queuedAt: EpochTime;\n//     runAt: EpochTime;\n//     queuedElapsed: number;\n//     runElapsed: number;\n//     clientGroups: Array<string>;\n//     username: string;\n// }\n\n// export interface JobFinishedState {\n//     tstate: TemporalState.NONE;\n//     pstate: PermanentState.SUCCESS;\n\n//     id: JobID;\n//     key: string;\n//     narrativeID: number | null;\n//     narrativeTitle: string;\n//     appID: string;\n//     appTitle: string;\n//     queuedAt: EpochTime;\n//     runAt: EpochTime;\n//     finishAt: EpochTime;\n//     queuedElapsed: number;\n//     runElapsed: number;\n//     clientGroups: Array<string>;\n//     username: string;\n// }\n\n// export interface JobCanceledWhileQueuedState {\n//     tstate: TemporalState.QUEUED;\n//     pstate: PermanentState.SUCCESS;\n\n//     id: JobID;\n//     key: string;\n//     narrativeID: number | null;\n//     narrativeTitle: string;\n//     appID: string;\n//     appTitle: string;\n//     queuedAt: EpochTime;\n//     runAt: EpochTime;\n//     finishAt: EpochTime;\n//     queuedElapsed: number;\n//     runElapsed: number;\n//     clientGroups: Array<string>;\n//     username: string;\n// }\n\nexport interface JobQueued {\n  status: JobStatus.QUEUED;\n  id: JobID;\n  key: string;\n  narrativeID: number | null;\n  narrativeTitle: string;\n  appID: string;\n  appTitle: string;\n  queuedAt: EpochTime;\n  queuedElapsed: number;\n  clientGroups: Array<string>;\n  username: string;\n}\n\nexport interface JobRunning {\n  status: JobStatus.RUNNING;\n  id: JobID;\n  key: string;\n  narrativeID: number | null;\n  narrativeTitle: string;\n  appID: string;\n  appTitle: string;\n  queuedAt: EpochTime;\n  runAt: EpochTime;\n  queuedElapsed: number;\n  runElapsed: number;\n  clientGroups: Array<string>;\n  username: string;\n}\n\nexport interface JobFinished {\n  status: JobStatus.FINISHED;\n  id: JobID;\n  key: string;\n  narrativeID: number | null;\n  narrativeTitle: string;\n  appID: string;\n  appTitle: string;\n  queuedAt: EpochTime;\n  runAt: EpochTime;\n  finishAt: EpochTime;\n  queuedElapsed: number;\n  runElapsed: number;\n  clientGroups: Array<string>;\n  username: string;\n}\n\nexport interface JobCanceledWhileQueued {\n  status: JobStatus.CANCELED_QUEUED;\n  id: JobID;\n  key: string;\n  narrativeID: number | null;\n  narrativeTitle: string;\n  appID: string;\n  appTitle: string;\n  queuedAt: EpochTime;\n  finishAt: EpochTime;\n  queuedElapsed: number;\n  clientGroups: Array<string>;\n  username: string;\n}\n\nexport interface JobCanceledWhileRunning {\n  status: JobStatus.CANCELED_RUNNING;\n  id: JobID;\n  key: string;\n  narrativeID: number | null;\n  narrativeTitle: string;\n  appID: string;\n  appTitle: string;\n  queuedAt: EpochTime;\n  runAt: EpochTime;\n  finishAt: EpochTime;\n  queuedElapsed: number;\n  runElapsed: number;\n  clientGroups: Array<string>;\n  username: string;\n}\n\nexport interface JobErroredWhileQueued {\n  status: JobStatus.ERRORED_QUEUED;\n  id: JobID;\n  key: string;\n  narrativeID: number | null;\n  narrativeTitle: string;\n  appID: string;\n  appTitle: string;\n  queuedAt: EpochTime;\n  finishAt: EpochTime;\n  queuedElapsed: number;\n  message: string;\n  clientGroups: Array<string>;\n  username: string;\n}\n\nexport interface JobErroredWhileRunning {\n  status: JobStatus.ERRORED_RUNNING;\n  id: JobID;\n  key: string;\n  narrativeID: number | null;\n  narrativeTitle: string;\n  appID: string;\n  appTitle: string;\n  queuedAt: EpochTime;\n  runAt: EpochTime;\n  finishAt: EpochTime;\n  queuedElapsed: number;\n  runElapsed: number;\n  message: string;\n  clientGroups: Array<string>;\n  username: string;\n}\n\nexport type Job =\n  | JobQueued\n  | JobRunning\n  | JobFinished\n  | JobCanceledWhileQueued\n  | JobCanceledWhileRunning\n  | JobErroredWhileQueued\n  | JobErroredWhileRunning;\n\ninterface JobsState {\n  jobs: Array<Job>;\n}\n\nexport type EpochTime = number;\n\nexport type TimeRangePresets = \"lastHour\" | \"last48Hours\" | \"lastWeek\" | \"lastMonth\";\n\nexport interface TimeRangePreset {\n  kind: \"preset\";\n  preset: TimeRangePresets;\n}\n\nexport interface TimeRangeLiteral {\n  kind: \"literal\";\n  start: EpochTime;\n  end: EpochTime;\n}\n\nexport type TimeRange = TimeRangePreset | TimeRangeLiteral;\n\nexport interface TimeRange2 {\n  preset: TimeRangePresets;\n  start: EpochTime | null;\n  end: EpochTime | null;\n}\n\nexport interface SortSpec {\n  field: string;\n  direction: \"ascending\" | \"descending\";\n}\n\nexport interface JobsSearchExpression {\n  query: string;\n  timeRange: TimeRange;\n  sort: SortSpec | null;\n  // timeRangeStart: EpochTime;\n  // timeRangeEnd: EpochTime;\n  jobStatus: Array<JobStatus>;\n  forceSearch: boolean;\n}\n\nexport enum SearchState {\n  NONE = 0,\n  SEARCHING,\n  SEARCHED,\n  ERROR\n}\n\nexport enum ComponentLoadingState {\n  NONE = 0,\n  LOADING,\n  SUCCESS,\n  ERROR\n}\n\n// The Store!\n\nexport interface MainView {\n  loadingState: ComponentLoadingState;\n  error: AppError | null;\n  isAdmin: boolean;\n}\n\nexport interface MyJobsView {\n  searchState: SearchState;\n  error: AppError | null;\n  searchExpression: JobsSearchExpression | null;\n  jobsFetchedAt: EpochTime | null;\n  rawJobs: Array<Job>;\n  jobs: Array<Job>;\n}\n\nexport interface UserJobsView {\n  searchState: SearchState;\n  searchExpression: JobsSearchExpression | null;\n  jobsFetchedAt: EpochTime | null;\n  rawJobs: Array<Job>;\n  jobs: Array<Job>;\n}\n\nexport interface MyStoreState {\n  views: {\n    mainView: MainView;\n    myJobsView: MyJobsView;\n    userJobsView: UserJobsView;\n    publicAppStatsView: PublicAppStatsView;\n    userRunSummaryView: UserRunSummaryView;\n  };\n}\n\nexport interface StoreState extends BaseStoreState, MyStoreState {\n  // entities: {\n  //     jobs: {\n  //         byId: Map<string, Job>\n  //     }\n  // },\n}\n\n// App Stats\n\nexport interface PublicAppStatsQuery {\n  query: string;\n}\n\nexport interface PublicAppStatsView {\n  searchState: SearchState;\n  rawAppStats: Array<AppStat>;\n  appStats: Array<AppStat>;\n  query: PublicAppStatsQuery;\n}\n\nexport interface AppStat {\n  appId: string;\n  functionId: string;\n  functionTitle: string;\n  moduleId: string;\n  moduleTitle: string;\n  runCount: number;\n  errorCount: number;\n  successRate: number;\n  averageRunTime: number;\n  averageQueueTime: number;\n  totalRunTime: number;\n}\n\n/**\n * User Run Summary types\n */\n\nexport interface UserRunSummaryQuery {\n  query: string;\n}\n\nexport interface UserRunSummaryStat {\n  username: string;\n  isApp: boolean;\n  appId: string | null;\n  moduleName: string;\n  functionName: string;\n  runCount: number;\n}\n\nexport interface UserRunSummaryView {\n  searchState: SearchState;\n  userRunSummary: Array<UserRunSummaryStat>;\n  query: UserRunSummaryQuery;\n}\n\nexport function makeInitialStoreState(): StoreState {\n  const jobs: Array<Job> = [];\n  const baseState = makeBaseStoreState();\n  return {\n    ...baseState,\n    views: {\n      mainView: {\n        loadingState: ComponentLoadingState.NONE,\n        error: null,\n        isAdmin: false\n      },\n      myJobsView: {\n        searchState: SearchState.NONE,\n        error: null,\n        searchExpression: null,\n        jobsFetchedAt: null,\n        rawJobs: jobs,\n        jobs\n      },\n      userJobsView: {\n        searchState: SearchState.NONE,\n        searchExpression: null,\n        jobsFetchedAt: null,\n        rawJobs: jobs,\n        jobs\n      },\n      publicAppStatsView: {\n        searchState: SearchState.NONE,\n        rawAppStats: [],\n        appStats: [],\n        query: {\n          query: \"\"\n        }\n      },\n      userRunSummaryView: {\n        searchState: SearchState.NONE,\n        userRunSummary: [],\n        query: {\n          query: \"\"\n        }\n      }\n    }\n  };\n}\n\nexport function createReduxStore() {\n  return createStore(reducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n}\n","import { Action, Reducer } from 'redux';\nimport { StoreState } from '../store';\n\nimport { baseReducer } from '@kbase/ui-components';\nimport { BaseStoreState } from '@kbase/ui-components';\nimport myJobsReducer from './myJobs';\nimport userJobsReducer from './userJobs';\nimport appReducer from './app';\nimport publicAppStatsReducer from './publicAppStats';\nimport userRunSummary from './userRunSummary';\n\n// export default function reducer<StoreState, Action>(state: StoreState, action: Action): StoreState {\n//     return state;\n// }\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    // TODO: we cast state to baseStore state, which should be fine since StoreState extends BaseStoreState.\n    // and then we recast to store state when returning to make ts happy; the actual state object which passes\n    // into and ...\n    // WARNING: this may break if a base reducer (app or auth) does not copy all the state with ...state.\n    // we probably need to use combine reducers?\n    const baseState = baseReducer(state as BaseStoreState, action);\n    if (baseState) {\n        return baseState as StoreState;\n    }\n    return (\n        appReducer(state, action) ||\n        myJobsReducer(state, action) ||\n        userJobsReducer(state, action) ||\n        publicAppStatsReducer(state, action) ||\n        userRunSummary(state, action) ||\n        state\n    );\n};\n\nexport default reducer;\n","import React from 'react';\nimport { Tag, Icon } from 'antd';\nimport { JobStatus, Job } from '../redux/store';\nimport { NiceElapsedTime, NiceRelativeTime } from '@kbase/ui-components';\n\n/**\n* Translates a job status value to a label, with optional icon, suitable for\n* display as the child of the job status tag.\n*\n* @param status - the status of the job\n*\n* @note Since the switch is over an enum, we don't have to worry about the default case\n*/\nfunction jobStatusLabel(status: JobStatus): JSX.Element | string {\n    switch (status) {\n        case JobStatus.QUEUED:\n            return (\n                <span>\n                    <Icon type=\"loading\" spin /> Queued\n                </span>\n            );\n        case JobStatus.RUNNING:\n            return (\n                <span>\n                    <Icon type=\"loading-3-quarters\" spin /> Running\n                </span>\n            );\n        case JobStatus.CANCELED_QUEUED:\n        case JobStatus.CANCELED_RUNNING:\n            return 'Canceled';\n        case JobStatus.FINISHED:\n            return 'Success';\n        case JobStatus.ERRORED_QUEUED:\n        case JobStatus.ERRORED_RUNNING:\n            return 'Errored';\n        default:\n            throw new Error('Invalid job status');\n    }\n}\n\n/**\n * Translates a job status value to a color value acceptable for the color\n * prop for the job status tag.\n *\n * @param status - the status of the job\n */\nexport function jobColor(status: JobStatus): string {\n    switch (status) {\n        case JobStatus.QUEUED:\n            return 'orange';\n        case JobStatus.RUNNING:\n            return 'blue';\n        case JobStatus.CANCELED_QUEUED:\n        case JobStatus.CANCELED_RUNNING:\n            return 'gray';\n        case JobStatus.FINISHED:\n            return 'green';\n        case JobStatus.ERRORED_QUEUED:\n        case JobStatus.ERRORED_RUNNING:\n            return 'red';\n        default:\n            throw new Error('Invalid job status');\n    }\n}\n\nexport interface JobStatusProps {\n    job: Job\n    showTiming?: boolean\n}\n\ninterface JobStatusState {\n\n}\n\nexport default class JobStatusComponent extends React.Component<JobStatusProps, JobStatusState> {\n\n    renderTag() {\n        const label = jobStatusLabel(this.props.job.status);\n        const color = jobColor(this.props.job.status);\n        return <Tag color={color}>{label}</Tag>\n    }\n\n    renderTiming() {\n        switch (this.props.job.status) {\n            case JobStatus.QUEUED:\n                return <span>\n                    <NiceElapsedTime from={this.props.job.queuedAt} useClock={true} />\n                </span>\n            case JobStatus.RUNNING:\n                return <span>\n                    <NiceElapsedTime from={this.props.job.runAt} useClock={true} />\n                </span>\n            case JobStatus.FINISHED:\n            case JobStatus.ERRORED_QUEUED:\n            case JobStatus.ERRORED_RUNNING:\n            case JobStatus.CANCELED_QUEUED:\n            case JobStatus.CANCELED_RUNNING:\n                return <span>\n                    <NiceRelativeTime time={new Date(this.props.job.finishAt)} />\n                </span>\n        }\n    }\n\n    render() {\n        const timing = this.props.showTiming ? this.renderTiming() : '';\n        return (\n            <span>\n                {this.renderTag()}\n                {timing}\n            </span>\n        )\n    }\n}","import React from 'react';\nimport './style.css';\nimport { Job, JobStatus } from '../../redux/store';\nimport { JobLogLine, JobLog } from './state';\nimport { Table, Tooltip, Empty, Button, Dropdown, Menu, Spin } from 'antd';\nimport { ClickParam } from 'antd/lib/menu';\nimport Papa from 'papaparse';\nimport ButtonGroup from 'antd/lib/button/button-group';\n\nenum PlayState {\n    NONE,\n    PLAYING,\n    PAUSED,\n    DISABLED\n}\n\nexport interface JobLogProps {\n    job: Job;\n    log: JobLog;\n}\n\ninterface JobLogState {\n    playState: PlayState;\n    isPaused: boolean;\n}\n\nexport default class JobLogs extends React.Component<JobLogProps, JobLogState> {\n    playLogTimer: number;\n    bodyRef: React.RefObject<HTMLDivElement>\n    // a hack to detect state change... \n    currentJobStatus: JobStatus | null;\n\n    constructor(params: JobLogProps) {\n        super(params);\n        this.playLogTimer = 0;\n        this.bodyRef = React.createRef();\n        this.currentJobStatus = null;\n        this.state = {\n            playState: PlayState.NONE,\n            isPaused: false\n        }\n    }\n    componentDidMount() {\n        this.currentJobStatus = this.props.job.status;\n\n        // if (this.state.playState !== PlayState.PLAYING) {\n        //     return;\n        // }\n        if (this.state.isPaused) {\n            return;\n        }\n        if (!this.isActive()) {\n            return;\n        }\n        this.scrollToBottom();\n    }\n    scrollToBottom() {\n        if (this.bodyRef.current === null) {\n            return;\n        }\n        this.bodyRef.current.scrollTop = this.bodyRef.current.scrollHeight;\n    }\n    componentDidUpdate() {\n        const lastJobStatus = this.currentJobStatus;\n        this.currentJobStatus = this.props.job.status;\n        // if (this.state.playState !== PlayState.PLAYING) {\n        //     return;\n        // }\n        if (this.state.isPaused) {\n            return;\n        }\n        if (!this.isActive()) {\n            if (lastJobStatus === JobStatus.RUNNING &&\n                this.props.job.status === JobStatus.RUNNING) {\n                return;\n            }\n        }\n        this.scrollToBottom();\n    }\n    isActive() {\n        return this.props.job.status === JobStatus.QUEUED ||\n            this.props.job.status === JobStatus.RUNNING;\n    }\n    renderLastLine() {\n        let message;\n\n        if (this.isActive()) {\n            message = <span>\n                Polling for additional log entries...{' '}\n                <Spin size=\"small\" />\n            </span>\n        } else {\n            message = <div style={{ textAlign: 'center', fontStyle: 'italic' }}>Log complete</div>\n        }\n        return (\n            <div className=\"FlexTable-row\" key='END' style={{ backgroundColor: 'rgba(200, 200, 200, 0.5)' }} data-end=\"end\">\n                <div className=\"FlexTable-col\"></div>\n                <div className=\"FlexTable-col\">{message}</div>\n            </div>\n        )\n    }\n    renderJobLog() {\n        const lines = this.props.log;\n        if (lines.length === 0) {\n            return (\n                <Empty />\n            )\n        }\n        const rows = lines.map((line) => {\n            const rowStyle: React.CSSProperties = {};\n            if (line.isError) {\n                rowStyle.color = 'red';\n            }\n            return <div className=\"FlexTable-row\" style={rowStyle} key={line.lineNumber}>\n                <div className=\"FlexTable-col\">\n                    {line.lineNumber}\n                </div>\n                <div className=\"FlexTable-col\">\n                    {line.line}\n                </div>\n            </div>\n        })\n        rows.push(\n            this.renderLastLine()\n        )\n        return (\n            <div className=\"FlexTable\" key=\"log\">\n                <div className=\"FlexTable-header\">\n                    <div className=\"FlexTable-row\">\n                        <div className=\"FlexTable-col\">Line #</div>\n                        <div className=\"FlexTable-col\">Log line</div>\n                    </div>\n                </div>\n                <div className=\"FlexTable-body\" ref={this.bodyRef}>\n                    {rows}\n                </div>\n            </div>\n        )\n    }\n\n    renderJobLogRow() {\n\n    }\n    renderJobLogLines() {\n        return (\n            <Table\n                dataSource={this.props.log}\n                size=\"small\"\n                // scroll={{ y: 400 }}\n                rowKey={(logLine: JobLogLine) => {\n                    return String(logLine.lineNumber);\n                }}\n                // pagination={{ position: 'top', showSizeChanger: true }}\n                pagination={false}\n                scroll={{ y: '100%' }}\n                rowClassName={(line: JobLogLine) => {\n                    if (line.isError) {\n                        return 'JobLog-errorRow';\n                    } else {\n                        return 'JobLog-normalRow';\n                    }\n                }}\n            >\n                <Table.Column\n                    title=\"Row\"\n                    dataIndex=\"lineNumber\"\n                    key=\"lineNumber\"\n                    width=\"8%\"\n                    render={(lineNumber: number, logLine: JobLogLine) => {\n                        const numberDisplay = new Intl.NumberFormat('en-US', { useGrouping: true }).format(lineNumber);\n                        if (logLine.isError) {\n                            return <span className=\"JobLog-errorText\">{numberDisplay}</span>;\n                        }\n                        return numberDisplay;\n                    }}\n                    sorter={(a: JobLogLine, b: JobLogLine) => {\n                        return a.lineNumber - b.lineNumber;\n                    }}\n                />\n                <Table.Column\n                    title=\"Log line\"\n                    dataIndex=\"line\"\n                    key=\"line\"\n                    width=\"92%\"\n                    render={(line: string, logLine: JobLogLine) => {\n                        let row;\n                        if (logLine.isError) {\n                            row = <span className=\"JobLog-errorText\">{line}</span>;\n                        } else {\n                            row = <span>{line}</span>;\n                        }\n                        return <Tooltip title={line}>{row}</Tooltip>;\n                    }}\n                />\n            </Table>\n        );\n    }\n    downloadLog(type: string, log: JobLog) {\n        function download(filename: string, contentType: string, content: string) {\n            const downloadLink = document.createElement('a');\n            const downloadContent = new Blob([content]);\n            downloadLink.href = URL.createObjectURL(downloadContent);\n            downloadLink.download = filename;\n            downloadLink.style.visibility = 'none';\n            downloadLink.type = contentType;\n            document.body.appendChild(downloadLink);\n            downloadLink.click();\n            document.body.removeChild(downloadLink);\n            URL.revokeObjectURL(downloadLink.href);\n        }\n        function logToCSV(log: JobLog): string {\n            return Papa.unparse(log);\n        }\n        function logToTSV(log: JobLog): string {\n            return Papa.unparse(log, {\n                delimiter: '\\t'\n            });\n        }\n        function logToJSON(log: JobLog): string {\n            return JSON.stringify(log);\n        }\n        function logToText(log: JobLog): string {\n            return log.map((line) => {\n                return line.line;\n            }).join('\\n');\n        }\n\n        let contentType: string;\n        let content: string;\n        switch (type) {\n            case 'tsv':\n                contentType = 'application/octet-stream';\n                content = logToTSV(log);\n                break;\n            case 'json':\n                contentType = 'application/octet-stream';\n                content = logToJSON(log);\n                break;\n            case 'text':\n                contentType = 'text/plain';\n                content = logToText(log);\n                break;\n            default:\n            case 'csv':\n                contentType = 'application/octet-stream';\n                content = logToCSV(log);\n                break;\n        }\n\n        download('job-log.' + type, contentType, content)\n    }\n\n    onMenuClick(param: ClickParam | undefined) {\n        if (!param) {\n            return\n        }\n        this.downloadLog(param.key, this.props.log);\n    }\n\n    onPlayLog() {\n        // this.props.updateJobLog();\n        this.scrollToBottom();\n        this.setState({\n            playState: PlayState.PLAYING,\n            isPaused: false\n        })\n    }\n\n    onPauseLog() {\n        this.setState({\n            playState: PlayState.PAUSED,\n            isPaused: true\n        })\n    }\n\n    renderPlayPauseTooltips() {\n        let playTooltip: string;\n        let pauseTooltip: string;\n        const isPaused = this.state.isPaused;\n\n        switch (this.props.job.status) {\n            case JobStatus.RUNNING:\n                if (isPaused) {\n                    playTooltip = 'Click to automatically scroll to the bottom of the logs when new entries arrive';\n                    pauseTooltip = 'Automatic scrolling is already paused';\n                } else {\n                    playTooltip = 'Automatic scrolling is already active';\n                    pauseTooltip = 'Click to pause automatic scrolling to the bottom of the logs when new entries arrive';\n                }\n                break;\n            case JobStatus.QUEUED:\n            case JobStatus.FINISHED:\n            case JobStatus.ERRORED_QUEUED:\n            case JobStatus.ERRORED_RUNNING:\n            case JobStatus.CANCELED_QUEUED:\n            case JobStatus.CANCELED_RUNNING:\n            default:\n                playTooltip = 'Log playing only available when the job is running';\n                pauseTooltip = 'Log playing only available when the job is running';\n                break;\n\n        }\n        return [playTooltip, pauseTooltip];\n    }\n\n    renderPlayPause() {\n        let irrelevant: boolean;\n\n        // Does the job status make log playing irrelevant.\n        switch (this.props.job.status) {\n            case JobStatus.QUEUED:\n                irrelevant = true;\n                break;\n            case JobStatus.RUNNING:\n                irrelevant = false;\n                break;\n            case JobStatus.FINISHED:\n            case JobStatus.ERRORED_QUEUED:\n            case JobStatus.ERRORED_RUNNING:\n            case JobStatus.CANCELED_QUEUED:\n            case JobStatus.CANCELED_RUNNING:\n            default:\n                irrelevant = true;\n        }\n\n        const [playTooltip, pauseTooltip] = this.renderPlayPauseTooltips();\n\n        return (\n            <ButtonGroup >\n                <Tooltip title={playTooltip}>\n                    <Button icon=\"caret-right\" disabled={irrelevant || !this.state.isPaused} onClick={this.onPlayLog.bind(this)} />\n                </Tooltip>\n                <Tooltip title={pauseTooltip}>\n                    <Button icon=\"pause\" disabled={irrelevant || this.state.isPaused} onClick={this.onPauseLog.bind(this)} />\n                </Tooltip>\n            </ButtonGroup>\n        )\n    }\n    renderToolbar() {\n        const disabled = this.props.log.length === 0;\n        const menu = (\n            <Menu onClick={this.onMenuClick.bind(this)}>\n                <Menu.Item key=\"csv\" disabled={disabled}>CSV</Menu.Item>\n                <Menu.Item key=\"tsv\" disabled={disabled}>TSV</Menu.Item>\n                <Menu.Item key=\"json\" disabled={disabled}>JSON</Menu.Item>\n                <Menu.Item key=\"text\" disabled={disabled}>TEXT</Menu.Item>\n            </Menu>\n        )\n        return (\n            <div key=\"toolbar\">\n                <Dropdown overlay={menu}>\n                    <Button icon=\"download\"></Button>\n                </Dropdown>\n                {' '}\n                {this.renderPlayPause()}\n            </div>\n        )\n    }\n    render() {\n        return <div className=\"JobLog\">\n            {this.renderToolbar()}\n            {this.renderJobLog()}\n        </div>\n    }\n    // render() {\n    //     return this.renderJobLog();\n    // }\n}\n","import React from 'react';\nimport { Button } from 'antd';\nimport './FlexTabs.css';\n\nexport interface Tab {\n    tab: string;\n    title: JSX.Element | string;\n    component: JSX.Element\n}\n\nexport interface TabsProps {\n    tabs: Array<Tab>\n}\n\ninterface TabsState {\n    selectedTabIndex: number;\n}\n\nexport default class Tabs extends React.Component<TabsProps, TabsState> {\n    constructor(props: TabsProps) {\n        super(props);\n        this.state = {\n            selectedTabIndex: 0\n        };\n    }\n\n    selectTab(tabIndex: number) {\n        this.setState({ selectedTabIndex: tabIndex })\n    }\n\n    renderTabs() {\n        return this.props.tabs.map((tab, index) => {\n            const classNames = ['FlexTabs-tab']\n            if (index === this.state.selectedTabIndex) {\n                classNames.push('FlexTabs-tab-active');\n            }\n            return (\n                <span key={String(index)} className={classNames.join(' ')}>\n                    <Button type=\"link\" onClick={() => { this.selectTab(index) }}>{tab.title}</Button>\n                </span>\n            )\n        })\n    }\n\n    renderTabBody() {\n        return this.props.tabs[this.state.selectedTabIndex].component\n    }\n\n    render() {\n        return <div className=\"FlexTabs\">\n            <div className=\"FlexTabs-header\">\n                {this.renderTabs()}\n            </div>\n            <div className=\"FlexTabs-body\">\n                {this.renderTabBody()}\n            </div>\n        </div>\n    }\n}","import React from 'react';\n\nexport interface UILinkProps {\n    path: string;\n    openIn: 'same-window' | 'new-tab';\n}\n\ninterface UILinkState {\n\n}\n\nexport default class UILink extends React.Component<UILinkProps, UILinkState> {\n    render() {\n        const href = `/#${this.props.path}`;\n        switch (this.props.openIn) {\n            case 'same-window':\n                return <a href={href} target='_parent'>\n                    {this.props.children}\n                </a>;\n            case 'new-tab':\n                return <a href={href} target='_blank' rel=\"noopener noreferrer\">\n                    {this.props.children}\n                </a>;\n        }\n    }\n}","import React from 'react';\n\nexport interface NarrativeLinkProps {\n    narrativeID: number;\n}\n\ninterface NarrativeLinkState {\n\n}\n\nexport default class NarrativeLink extends React.Component<NarrativeLinkProps, NarrativeLinkState> {\n    render() {\n        const href = `/narrative/${this.props.narrativeID}`;\n        return <a href={href} target='_blank' rel=\"noopener noreferrer\">\n            {this.props.children}\n        </a>;\n    }\n}","import React from 'react';\nimport { Job, JobStatus } from '../redux/store';\nimport { NiceRelativeTime, NiceElapsedTime } from '@kbase/ui-components';\nimport JobStatusBadge, { jobColor } from './JobStatus';\nimport { Spin } from 'antd';\nimport UILink from './UILink';\nimport NarrativeLink from './NarrativeLink';\n\nexport interface Props {\n    job: Job;\n}\n\ninterface State {\n\n}\n\nexport default class JobInfo extends React.Component<Props, State> {\n    renderSubmitted() {\n        const date = this.props.job.queuedAt;\n        if (!date) {\n            return <span>** empty **</span>;\n        }\n        return <NiceRelativeTime time={new Date(date)} />;\n    }\n    renderQueuedFor() {\n        const job = this.props.job;\n        switch (job.status) {\n            case JobStatus.QUEUED:\n                return <NiceElapsedTime from={job.queuedAt} precision={2} useClock={true} />;\n            case JobStatus.RUNNING:\n                return <NiceElapsedTime from={job.queuedAt} to={job.runAt} precision={2} />;\n            case JobStatus.FINISHED:\n                return <NiceElapsedTime from={job.queuedAt} to={job.runAt} precision={2} />;\n            case JobStatus.CANCELED_QUEUED:\n                return <NiceElapsedTime from={job.queuedAt} to={job.finishAt} precision={2} />;\n            case JobStatus.CANCELED_RUNNING:\n                return <NiceElapsedTime from={job.queuedAt} to={job.runAt} precision={2} />;\n            case JobStatus.ERRORED_QUEUED:\n                return <NiceElapsedTime from={job.queuedAt} to={job.finishAt} precision={2} />;\n            case JobStatus.ERRORED_RUNNING:\n                return <NiceElapsedTime from={job.queuedAt} to={job.runAt} precision={2} />;\n        }\n    }\n    renderRunFor() {\n        const job = this.props.job;\n        switch (job.status) {\n            case JobStatus.QUEUED:\n                return <span>-</span>;\n            case JobStatus.RUNNING:\n                return <NiceElapsedTime from={job.runAt} precision={2} useClock={true} />;\n            case JobStatus.FINISHED:\n                return <NiceElapsedTime from={job.runAt} to={job.finishAt} precision={2} />;\n            case JobStatus.CANCELED_QUEUED:\n                return <span>-</span>;\n            case JobStatus.CANCELED_RUNNING:\n                return <NiceElapsedTime from={job.runAt} to={job.finishAt} precision={2} />;\n            case JobStatus.ERRORED_QUEUED:\n                return <span>-</span>;\n            case JobStatus.ERRORED_RUNNING:\n                return <NiceElapsedTime from={job.runAt} to={job.finishAt} precision={2} />;\n        }\n        // if (!this.props.job.runElapsed) {\n        //     return <span>-</span>\n        // }\n        // return <NiceElapsedTime duration={this.props.job.runElapsed} precision={2} />;\n    }\n\n    renderStateSpinner(jobStatus: JobStatus) {\n        if (this.props.job.status === jobStatus) {\n            return <span>\n                {' '}\n                <Spin size=\"small\" style={{ color: jobColor(jobStatus) }} />\n            </span>;\n        }\n    }\n\n    renderNarrativeLink() {\n        const id = this.props.job.narrativeID;\n        if (id === null) {\n            return;\n        }\n        return <NarrativeLink narrativeID={id}>\n            {this.props.job.narrativeTitle}\n        </NarrativeLink>;\n    }\n\n    render() {\n        return (\n            <div className=\"JobInfo InfoTable\">\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Job ID\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.job.id}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Status\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        <JobStatusBadge job={this.props.job} />\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Narrative\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.renderNarrativeLink()}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        App\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        <UILink path={`catalog/apps/${this.props.job.appID}`}\n                            openIn='new-tab'>\n                            {this.props.job.appTitle}\n                        </UILink>\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Submitted\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.renderSubmitted()}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Queued For\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.renderQueuedFor()}\n                        {this.renderStateSpinner(JobStatus.QUEUED)}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Run For\n                </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.renderRunFor()}\n                        {this.renderStateSpinner(JobStatus.RUNNING)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport { Spin, Alert } from 'antd';\nimport FlexTabs from '../FlexTabs';\nimport JobLog from '../JobLog/view';\nimport JobInfo from '../JobInfo';\nimport './style.css'\nimport { JobLogView, JobLogState, JobLogViewError } from './state';\nimport JobStatusBadge from '../JobStatus';\n\nexport interface JobDetailProps {\n    view: JobLogView\n}\n\ninterface JobDetailState {\n}\n\nexport default class JobDetail extends React.Component<JobDetailProps, JobDetailState> {\n    renderLoading() {\n        return (\n            <div className=\"FullyCenteredBox\">\n                <span>Loading ... <Spin /></span>\n            </div>\n        );\n    }\n\n    renderQueued() {\n        return (\n            <div className=\"FullyCenteredBox\">\n                <span>\n                    The job is <i>queued</i>. The log will be displayed when the job starts running ... <Spin />\n                </span>\n            </div >\n        );\n    }\n\n    renderError(view: JobLogViewError) {\n        return (\n            <Alert type=\"error\" message={view.error} />\n        )\n    }\n\n    renderJobLog() {\n        switch (this.props.view.status) {\n            case JobLogState.NONE:\n            case JobLogState.JOB_QUEUED:\n                return this.renderQueued();\n            case JobLogState.INITIAL_LOADING:\n                return this.renderLoading();\n            case JobLogState.ERROR:\n                return this.renderError(this.props.view);\n            case JobLogState.ACTIVE_LOADED:\n            case JobLogState.ACTIVE_LOADING:\n                return <JobLog job={this.props.view.job} log={this.props.view.log} />;\n            case JobLogState.FINISHED_LOADED:\n                return <JobLog job={this.props.view.job} log={this.props.view.log} />;\n        }\n    }\n    renderJobInfo() {\n        switch (this.props.view.status) {\n            case JobLogState.NONE:\n                return this.renderLoading();\n            case JobLogState.JOB_QUEUED:\n                return <JobInfo job={this.props.view.job} />;\n            case JobLogState.INITIAL_LOADING:\n                return this.renderLoading();\n            case JobLogState.ERROR:\n                return this.renderError(this.props.view);\n            case JobLogState.ACTIVE_LOADED:\n            case JobLogState.ACTIVE_LOADING:\n                return <JobInfo job={this.props.view.job} />;\n            case JobLogState.FINISHED_LOADED:\n                return <JobInfo job={this.props.view.job} />;\n        }\n    }\n    renderTest() {\n        const content = Array.from(Array(100).keys()).map((i) => {\n            return <div style={{ flex: '0 0 auto', display: 'flex', flexDirection: 'row', borderBottom: '1px silver solid' }} key={String(i)}>\n                <div style={{ flex: '0 0 auto', padding: '4px', overflowWrap: 'break-word', wordWrap: 'break-word' }}>\n                    {i}\n                </div>\n            </div>\n        });\n        return (\n            <div style={{ flex: '1 1 0px', display: 'flex', flexDirection: 'column', minHeight: 0 }}>\n                <div>Header Here</div>\n                <div style={{ flex: '1 1 0px', display: 'flex', flexDirection: 'column', minHeight: 0, overflowY: 'auto' }}>\n                    {content}\n                </div>\n            </div>\n        )\n    }\n    renderTest2() {\n        const content = Array.from(Array(100).keys()).map((i) => {\n            return <div className=\"FlexTable-row\" key={String(i)}>\n                <div className=\"FlexTable-col\">{i}</div>\n                <div className=\"FlexTable-col\">This is row {i}</div>\n            </div>\n        });\n        return (\n            <div className=\"FlexTable\">\n                <div className=\"FlexTable-header\">\n                    <div className=\"FlexTable-row\">\n                        <div className=\"FlexTable-col\">#</div>\n                        <div className=\"FlexTable-col\">Data</div>\n                    </div>\n                </div>\n                <div className=\"FlexTable-body\">\n                    {content}\n                </div>\n            </div>\n        )\n    }\n    renderStatus() {\n        switch (this.props.view.status) {\n            case JobLogState.NONE:\n            case JobLogState.INITIAL_LOADING:\n                return <Spin size=\"small\" />\n            case JobLogState.ERROR:\n                return <Alert type=\"error\" message={this.props.view.error} />\n            default:\n                return <JobStatusBadge job={this.props.view.job} showTiming={true} />\n        }\n    }\n    renderMiniDetails() {\n        return <div style={{ flex: '0 0 auto' }}>\n            {this.renderStatus()}\n        </div>\n\n    }\n    render() {\n        const tabs = [\n            {\n                tab: 'log',\n                title: 'Log',\n                component: this.renderJobLog()\n            },\n            {\n                tab: 'detail',\n                title: 'Detail',\n                component: this.renderJobInfo()\n            },\n        ]\n        return (\n            <React.Fragment>\n                {this.renderMiniDetails()}\n                <FlexTabs tabs={tabs} />\n            </React.Fragment>\n        )\n    }\n}","// class HttpQueryField {\n//     key: string;\n//     value: string;\n\n//     constructor(key: string, value: string) {\n//         this.key = key;\n//         this.value = value;\n//     }\n// }\n\nexport type QueryMap = { [key: string]: string; };\n\nexport class HTTPQuery {\n\n    queryMap: QueryMap = {};\n\n    constructor(map?: QueryMap) {\n        if (typeof map === 'undefined') {\n            map = <QueryMap>{};\n        }\n        this.queryMap = map;\n    }\n\n    addField(key: string, value: string) {\n        this.queryMap[key] = value;\n    }\n\n    removeField(key: string) {\n        delete this.queryMap[key];\n    }\n\n    toString(): string {\n        let that = this;\n        return Object.keys(this.queryMap).map(function (key) {\n            return [key, that.queryMap[key]]\n                .map(encodeURIComponent)\n                .join('=');\n        }).join('&');\n    }\n\n}","import { HTTPQuery, QueryMap } from './HTTPUtils';\n\n// import * as Bluebird from 'bluebird';\n\n// Bluebird.config({\n//     cancellation: true\n// });\n\n\nexport type HTTPHeaderFields = { [key: string]: string; };\n\ninterface ContentType {\n    mediaType: string;\n    charset?: string;\n}\n\nexport class HTTPHeader {\n    header: HTTPHeaderFields;\n\n    public static fromXHR(xhr: XMLHttpRequest): HTTPHeaderFields {\n        let responseHeaders = xhr.getAllResponseHeaders();\n        if (!responseHeaders) {\n            return {};\n        }\n        let fieldsArray = responseHeaders.split(/\\n/);\n        var fieldsMap: { [key: string]: string; } = {};\n        fieldsArray.forEach((field) => {\n            let firstColon = field.indexOf(':', 0);\n            let name = field.substr(0, firstColon).trim();\n            let value = field.substr(firstColon + 1).trim();\n            fieldsMap[name.toLowerCase()] = value;\n        });\n        return fieldsMap;\n    }\n\n    public static fromMap(header: any): HTTPHeaderFields {\n        var fieldsMap: { [key: string]: string; } = {};\n        Object.keys(header).forEach((name) => {\n            fieldsMap[name.toLowerCase()] = header[name];\n        });\n        return fieldsMap;\n    }\n\n    constructor(initialHeaders?: any) {\n        if (typeof initialHeaders === 'undefined') {\n            this.header = {};\n        } else if (initialHeaders instanceof XMLHttpRequest) {\n            this.header = HTTPHeader.fromXHR(initialHeaders);\n        } else {\n            this.header = HTTPHeader.fromMap(initialHeaders);\n        }\n    }\n\n    getHeader(fieldName: string): string {\n        return this.header[fieldName.toLowerCase()];\n    }\n\n    setHeader(fieldName: string, fieldValue: string): void {\n        this.header[fieldName.toLowerCase()] = fieldValue;\n    }\n\n    exportHeader(xhr: XMLHttpRequest) {\n        Object.keys(this.header)\n            .filter((key) => {\n                if (this.getHeader(key) === undefined ||\n                    this.getHeader(key) === null) {\n                    return false;\n                }\n                return true;\n            })\n            .forEach((key) => {\n                // normalize value?\n                var stringValue = ((value) => {\n                    switch (typeof value) {\n                        case 'string': return value;\n                        case 'number': return String(value);\n                        case 'boolean': return String(value);\n                        default:\n                            throw new Error('Invalid type for header value: ' + typeof value);\n                    }\n                })(this.getHeader(key));\n                xhr.setRequestHeader(key, stringValue);\n            });\n    }\n\n    getContentType(): ContentType | null {\n        let value = this.header['content-type'];\n        if (!value) {\n            return null;\n        }\n        let values = value.split(';').map((x) => x.trim());\n        if (values[1]) {\n            return {\n                mediaType: values[0],\n                charset: values[1]\n            };\n        } else {\n            return {\n                mediaType: values[0]\n            };\n        }\n    }\n}\n\n// interface HttpHeaderField {\n//     name: string;\n//     value: string;\n// }\n\n\nexport class TimeoutError extends Error {\n    timeout: number;\n    elapsed: number;\n    xhr: XMLHttpRequest;\n\n    constructor(timeout: number, elapsed: number, message: string, xhr: XMLHttpRequest) {\n        super(message);\n\n        Object.setPrototypeOf(this, TimeoutError.prototype);\n\n        this.name = 'TimeoutError';\n        this.stack = (<any>new Error()).stack;\n\n        this.timeout = timeout;\n        this.elapsed = elapsed;\n        this.xhr = xhr;\n    }\n\n    toString(): string {\n        return this.message;\n    }\n}\n\nexport class GeneralError extends Error {\n    xhr: XMLHttpRequest;\n    constructor(message: string, xhr: XMLHttpRequest) {\n        super(message);\n\n        Object.setPrototypeOf(this, GeneralError.prototype);\n\n        this.name = 'GeneralError';\n        this.stack = (<any>new Error()).stack;\n\n        this.xhr = xhr;\n    }\n    toString(): string {\n        return this.message;\n    }\n}\n\nexport class AbortError extends Error {\n    xhr: XMLHttpRequest;\n    constructor(message: string, xhr: XMLHttpRequest) {\n        super(message);\n        Object.setPrototypeOf(this, AbortError.prototype);\n\n        this.name = 'AbortError';\n        this.stack = (<any>new Error()).stack;\n\n        this.xhr = xhr;\n    }\n    toString(): string {\n        return this.message;\n    }\n}\n\nexport interface RequestOptions {\n    url: string,\n    method: string,\n    query?: QueryMap,\n    timeout: number,\n    header?: HTTPHeader,\n    responseType?: string,\n    withCredentials?: boolean,\n    data?: null | string | Array<number>;\n    onCancel?: (callback: () => void) => void;\n}\n\nexport interface Response {\n    status: number,\n    response: string,\n    responseType: string,\n    header: HTTPHeader;\n}\n\nexport class HTTPClient {\n    constructor() {\n    }\n\n    async request(options: RequestOptions): Promise<Response> {\n        let startTime = new Date().getTime();\n        let that = this;\n        return <Promise<Response>>new Promise((resolve, reject) => {\n            const xhr: XMLHttpRequest = new XMLHttpRequest();\n            xhr.onload = () => {\n                resolve(<Response>{\n                    status: xhr.status,\n                    response: xhr.response,\n                    responseType: xhr.responseType,\n                    header: new HTTPHeader(xhr)\n                });\n            };\n            xhr.ontimeout = () => {\n                var elapsed = (new Date().getTime()) - startTime;\n                reject(new TimeoutError(options.timeout, elapsed, 'Request timeout', xhr));\n            };\n            xhr.onerror = () => {\n                reject(new GeneralError('General request error ' + options.url, xhr));\n            };\n            xhr.onabort = () => {\n                reject(new AbortError('Request was aborted', xhr));\n            };\n\n            var url = options.url;\n            if (options.query) {\n                url += '?' + new HTTPQuery(options.query).toString();\n            }\n\n            const rt = (options.responseType || 'text') as XMLHttpRequestResponseType;\n            xhr.responseType = rt;\n\n            try {\n                xhr.open(options.method, url, true);\n            } catch (ex) {\n                reject(new GeneralError('Error opening request ' + ex.name, xhr));\n                return;\n            }\n\n            if (options.timeout) {\n                xhr.timeout = options.timeout;\n            }\n\n            xhr.withCredentials = options.withCredentials || false;\n\n            try {\n                if (options.header) {\n                    options.header.exportHeader(xhr);\n                }\n            } catch (ex) {\n                reject(new GeneralError('Error applying header before send ' + ex.name, xhr));\n            }\n\n            try {\n                if (typeof options.data === 'string') {\n                    xhr.send(options.data);\n                    if (options.onCancel) {\n                        options.onCancel(() => {\n                            xhr.abort();\n                        });\n                    }\n                } else if (options.data instanceof Array) {\n                    xhr.send(new Uint8Array(options.data));\n                } else if (typeof options.data === 'undefined') {\n                    xhr.send();\n                } else if (options.data === null) {\n                    xhr.send();\n                } else {\n                    reject(new Error('Invalid type of data to send: ' + typeof options.data));\n                }\n            } catch (ex) {\n                reject(new GeneralError('Error sending data in request', xhr));\n            }\n        });\n    }\n}","import {\n    HTTPClient, GeneralError, TimeoutError, AbortError, Response,\n    RequestOptions, HTTPHeader\n} from './HTTPClient';\n\nimport uuid from 'uuid';\nimport { JSONValue } from '../json';\n\nexport interface JSONRPCRequestOptions {\n    func: string,\n    params: any,\n    timeout?: number,\n    authorization?: string;\n}\n\n// The JSON RPC Request parameters\n// An array of  JSON objects\nexport interface JSONRPCParam {\n    [key: string]: any;\n}\n\n// The entire JSON RPC request object\nexport interface JSONRPCRequest {\n    method: string,\n    version: '1.1',\n    id: string,\n    params: Array<JSONRPCParam>,\n    context?: any;\n}\n\nexport interface JSONRPCErrorInfo {\n    code: string,\n    status?: number,\n    message: string,\n    detail?: string;\n    data?: any;\n}\n\n// export class JSONRPCError extends Error {\n//     code: string;\n//     message: string;\n//     detail?: string;\n//     data?: any;\n//     constructor(errorInfo: JSONRPCErrorInfo) {\n//         super(errorInfo.message);\n//         this.name = 'JSONRPCError';\n\n//         this.code = errorInfo.code;\n//         this.message = errorInfo.message;\n//         this.detail = errorInfo.detail;\n//         this.data = errorInfo.data;\n//         this.stack = (<any>new Error()).stack;\n//     }\n// }\n\nexport interface JSONRPCClientParams {\n    url: string,\n    timeout: number;\n    authorization?: string;\n}\n\nexport interface JSONPayload {\n    version: string;\n    method: string;\n    id: string;\n    params: Array<JSONValue>;\n}\n\nexport interface JSONRPC11Error {\n    name: string;\n    code: number;\n    message: string;\n    error: JSONValue;\n}\n\nexport type JSONRPCError = JSONRPC11Error;\n\nexport class JSONRPC11Exception extends Error {\n    error: JSONRPC11Error;\n    constructor(error: JSONRPCError) {\n        super(error.message);\n        this.error = error;\n    }\n}\n\nexport interface JSONRPCResponseResult {\n    result: Array<JSONValue>;\n    error: null;\n}\n\nexport interface JSONRPCResponseError {\n    result: null;\n    error: JSONRPCError;\n}\n\nexport type JSONRPCResponse = JSONRPCResponseResult | JSONRPCResponseError;\n\nexport class JSONRPCClient {\n    url: string;\n    timeout: number;\n    authorization?: string;\n    constructor({ url, timeout, authorization }: JSONRPCClientParams) {\n        this.url = url;\n        this.timeout = timeout;\n        this.authorization = authorization;\n    }\n\n    isGeneralError(error: GeneralError) {\n        return (error instanceof GeneralError);\n    }\n\n\n    protected makePayload(method: string, params: Array<JSONRPCParam>): JSONPayload {\n        return {\n            version: '1.1',\n            method,\n            id: uuid.v4(),\n            params: params\n        };\n    }\n\n    async callMethod(method: string, params: Array<JSONRPCParam>, { timeout }: { timeout?: number; } = {}): Promise<Array<JSONValue>> {\n        const payload = this.makePayload(method, params);\n        // const rpc: JSONRPCRequest = {\n        //     version: '1.1',\n        //     method: method,\n        //     id: uuid.v4(),\n        //     params: [params],\n        // };\n\n        const header: HTTPHeader = new HTTPHeader();\n        header.setHeader('content-type', 'application/json');\n        header.setHeader('accept', 'application/json');\n        if (this.authorization) {\n            header.setHeader('authorization', this.authorization);\n        }\n\n        const requestOptions: RequestOptions = {\n            method: 'POST',\n            url: this.url,\n            timeout: timeout || this.timeout,\n            data: JSON.stringify(payload),\n            header: header\n        };\n\n        const httpClient = new HTTPClient();\n        return httpClient.request(requestOptions)\n            .then((httpResponse) => {\n                let result: JSONRPCResponse;\n                try {\n                    result = (JSON.parse(httpResponse.response) as unknown) as JSONRPCResponse;\n                } catch (ex) {\n                    throw new JSONRPC11Exception({\n                        name: 'parse error',\n                        code: 100,\n                        message: 'The response from the service could not be parsed',\n                        error: {\n                            originalMessage: ex.message,\n                            responseText: httpResponse.response\n                        }\n                    });\n                }\n\n\n                if (result.hasOwnProperty('error')) {\n                    const errorResult = (result as unknown) as JSONRPCResponseError;\n                    throw new JSONRPC11Exception({\n                        name: errorResult.error.name,\n                        code: errorResult.error.code,\n                        message: errorResult.error.message,\n                        error: errorResult.error.error\n                    });\n                }\n\n                // if (!(result instanceof Array)) {\n                //     throw new JSONRPC11Exception({\n                //         name: 'params not array',\n                //         code: 100,\n                //         message: 'Parameter is not an array',\n                //         error: {}\n                //     });\n                // }\n                const rpcResponse = (result as unknown) as JSONRPCResponseResult;\n                return rpcResponse.result;\n                // let x: T = ({} as unknown) as T;\n                // return x;\n            });\n        // .then((response) => {\n        //     let result: JSONValue;\n        //     try {\n        //         result = JSON.parse(response.response);\n        //     } catch (ex) {\n        //         throw new JSONRPC11Exception({\n        //             name: 'parse error',\n        //             code: 100,\n        //             message: 'The response from the service could not be parsed',\n        //             error: {\n        //                 originalMessage: ex.message,\n        //                 responseText: response.response\n        //             }\n        //         });\n        //     }\n        //     if (result.hasOwnProperty('error')) {\n        //         const errorResult = (result as unknown) as JSONRPCResponseError;\n        //         throw new JSONRPC11Exception({\n        //             name: result.name,\n        //             code: result.code,\n\n        //         })\n        //     }\n        //     const rpcResponse = (result as unknown) as JSONRPCResponseResult<T>;\n        //     return rpcResponse.result;\n        // })\n        // .catch((err) => {\n        //     if (err instanceof GeneralError) {\n        //         throw new JSONRPC11Exception({\n        //             name: 'connection-error',\n        //             code: 100,\n        //             message: 'An error was encountered communicating with the service',\n        //             error: {\n        //                 originalMessage: err.message\n        //             }\n        //         });\n        //     } else if (err instanceof TimeoutError) {\n        //         throw new JSONRPC11Exception({\n        //             name: 'timeout-error',\n        //             code: 100,\n        //             error: {\n        //                 originalMessage: err.message\n        //             },\n        //             message: 'There was a timeout communicating with the service'\n        //         });\n        //     } else if (err instanceof AbortError) {\n        //         throw new JSONRPC11Exception({\n        //             name: 'abort-error',\n        //             code: 100,\n        //             error: {\n        //                 originalMessage: err.message\n        //             },\n        //             message: 'The connection was aborted while communicating with the service'\n        //         });\n        //     }\n        // });\n    }\n}","import { JSONRPCClient } from './JSONRPC11';\n\nexport interface ServiceClientParams {\n    url: string;\n    timeout: number;\n    authorization?: string;\n}\n\nexport abstract class ServiceClient {\n    abstract module: string;\n    url: string;\n    timeout: number;\n    authorization?: string;\n    constructor({ url, timeout, authorization }: ServiceClientParams) {\n        this.url = url;\n        this.timeout = timeout;\n        this.authorization = authorization;\n    }\n    async callFunc<ParamType, ReturnType>(funcName: string, params: ParamType): Promise<ReturnType> {\n        const client = new JSONRPCClient({ url: this.url, timeout: this.timeout, authorization: this.authorization });\n        const method = this.module + '.' + funcName;\n        const result = await client.callMethod(method, [params], { timeout: this.timeout });\n\n        if (result.length === 0) {\n            throw new Error('Too few (none) return values in return array');\n        }\n\n        return (result[0] as unknown) as ReturnType;\n    }\n    async callFuncEmptyResult<ParamType, ReturnType>(funcName: string, params: ParamType): Promise<void> {\n        const client = new JSONRPCClient({ url: this.url, timeout: this.timeout, authorization: this.authorization });\n        const method = this.module + '.' + funcName;\n        const result = await client.callMethod(method, [params], { timeout: this.timeout });\n\n        if (result.length !== 0) {\n            throw new Error(`Too many (${result.length}) return values in return array`);\n        }\n\n        return;\n    }\n\n}","import { ServiceClient } from '../ServiceClient';\n\n// types from module\n\nexport interface Service {\n    module_name: string;\n    version: string | null;\n}\n\nexport interface ServiceStatus {\n    module_name: string;\n    version: string;\n    git_commit_hash: string;\n    release_tags: Array<string>;\n    hash: string;\n    url: string;\n    up: number; // aka boolean\n    status: string;\n    health: string;\n}\n\nfunction isString(x: any, p: string): boolean {\n    if (typeof x === 'object' && Reflect.has(x, p)) {\n        if (typeof ((Reflect.get(x, p) as unknown) as any) === 'string') {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction isNumber(x: any, p: string): boolean {\n    if (typeof x === 'object' && Reflect.has(x, p)) {\n        if (typeof ((Reflect.get(x, p) as unknown) as any) === 'number') {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction isArray(x: any, p: string, subType: string): boolean {\n    if (typeof x === 'object' && Reflect.has(x, p)) {\n        const value = Reflect.get(x, p) as unknown;\n        if (typeof value === 'object' && value instanceof Array) {\n            if (value.length === 0) {\n                return true;\n            }\n            return value.every((arrayElement: unknown) => {\n                return typeof arrayElement === 'string';\n            });\n        }\n    }\n    return false;\n}\n\nfunction isGetServiceStatusResult(x: any): x is GetServiceStatusResult {\n    if (\n        isString(x, 'module_name') &&\n        isString(x, 'version') &&\n        isString(x, 'git_commit_hash') &&\n        isArray(x, 'release_tags', 'string') &&\n        isString(x, 'url') &&\n        isNumber(x, 'up') &&\n        isString(x, 'status') &&\n        isString(x, 'health')\n    ) {\n        return true;\n    }\n    return false;\n}\n\n// impl\n\n/**\n * Params structure for client constructor\n */\n// export interface ServiceWizardClientParams extends JSONRPCClientParams { }\n\n/**\n * Params (input) structure for the get_service_status call\n */\nexport interface GetServiceStatusParams extends Service { }\n\n/**\n * Result (output) structure for the get_service_status call.\n */\nexport interface GetServiceStatusResult extends ServiceStatus { }\n\n/**\n * The service wizard client.\n */\nexport class ServiceWizardClient extends ServiceClient {\n    module: string = 'ServiceWizard';\n\n    // constructor(params: ServiceWizardClientParams) {\n    //     super(params);\n    // }\n\n    async getServiceStatus(params: GetServiceStatusParams): Promise<GetServiceStatusResult> {\n        const result = await this.callFunc<GetServiceStatusParams, GetServiceStatusResult>('get_service_status', params);\n\n        if (!result) {\n            throw new Error('Crazy as it seems, result is falsy');\n        }\n        if (isGetServiceStatusResult(result)) {\n            return result;\n        } else {\n            throw new Error('Sorry, result does not conform to \"GetServiceStatusResult\"');\n        }\n    }\n}\n","export interface CacheParams {\n    itemLifetime: number;\n    monitoringFrequency: number;\n    waiterTimeout: number;\n    waiterFrequency: number;\n}\n\nexport enum CacheItemState {\n    RESERVED,\n    PRESENT\n}\n\nexport interface CacheItemBase<T> {\n    state: CacheItemState;\n    id: string;\n    fetcher: () => Promise<T>;\n}\n\nexport interface CacheItemReserved<T> extends CacheItemBase<T> {\n    state: CacheItemState.RESERVED;\n    reservedAt: number;\n}\n\nexport interface CacheItemPresent<T> extends CacheItemBase<T> {\n    state: CacheItemState.PRESENT;\n    createdAt: number;\n    value: T;\n}\n\nexport type CacheItem<T> = CacheItemReserved<T> | CacheItemPresent<T>;\n\n// export interface CacheItemBase<T> {\n//     state: CacheItemState;\n//     id: string;\n//     value: T ;\n//     createdAt: number;\n//     fetcher: () => Promise<T>;\n//     reserved: boolean;\n// }\n\n\nexport type Fetcher<T> = () => Promise<T>;\n\nexport default class Cache<T> {\n    cache: Map<string, CacheItem<T>>;\n    cacheLifetime: number;\n    monitoringFrequency: number;\n    waiterTimeout: number;\n    waiterFrequency: number;\n    isMonitoring: boolean;\n\n    constructor({ itemLifetime, monitoringFrequency, waiterTimeout, waiterFrequency }: CacheParams) {\n        this.cache = new Map<string, CacheItem<T>>();\n\n        // 10 minute cache lifetime\n        this.cacheLifetime = itemLifetime || 1800000;\n\n        // Frequency with which to monitor the cache for expired items\n        // or refreshing them.\n        this.monitoringFrequency = monitoringFrequency || 60000;\n\n        // The waiter waits for a cache item to become available if it has\n        // been reserved. These settings determine how long to wait\n        // for a waiter to wait, and how often to check the cache item to see if it has\n        // yet been fulfilled.\n        this.waiterTimeout = waiterTimeout || 30000;\n        this.waiterFrequency = waiterFrequency || 100;\n\n        this.isMonitoring = false;\n    }\n\n    private runMonitor() {\n        if (this.isMonitoring) {\n            return;\n        }\n        this.isMonitoring = true;\n        setTimeout(() => {\n            const newCache = new Map<string, any>();\n            let cacheRenewed = false;\n            Object.keys(this.cache).forEach((id) => {\n                const item = this.cache.get(id);\n                if (!this.isExpired(item)) {\n                    newCache.set(id, item);\n                    cacheRenewed = true;\n                }\n            });\n            this.cache = newCache;\n            this.isMonitoring = false;\n            if (cacheRenewed) {\n                this.runMonitor();\n            }\n        }, this.monitoringFrequency);\n    }\n\n    private isExpired(cacheItem: any) {\n        const now = new Date().getTime();\n        const elapsed = now - cacheItem.createdAt;\n        return elapsed > this.cacheLifetime;\n    }\n\n    private getItem(id: string) {\n        if (this.cache.get(id) === undefined) {\n            return null;\n        }\n        const cached = this.cache.get(id);\n        if (this.isExpired(cached)) {\n            this.cache.delete(id);\n            return;\n        }\n        return cached;\n    }\n\n    /**\n     * Wait for a reserved item associated with id to become available, and then \n     * return it.\n     * Implements this by polling for a given amount of time, with a given pause time between\n     * poll attempts. \n     * Handles the case of a reserve item disappearing between polls, in which case the item\n     * will be reserved and fetched.\n     * \n     * @param id - an identifier which uniquely identifies an item of type T\n     * @param fetcher - a function returning a promise of an item of type T\n     */\n    private async reserveWaiter(id: string, fetcher: Fetcher<T>): Promise<CacheItemPresent<T>> {\n        return new Promise<CacheItemPresent<T>>((resolve, reject) => {\n            const started = new Date().getTime();\n            const resolveItem = async () => {\n                const item = this.cache.get(id);\n\n                // If on a wait-loop cycle we discover that the\n                // cache item has been deleted, we volunteer\n                // to attempt to fetch it ourselves.\n                // The only case now for this is a cancellation\n                // of the first request to any dynamic service,\n                // which may cancel the initial service wizard\n                // call rather than the service call.\n\n                // Handle case of an item disappearing from the cache.\n                if (typeof item === 'undefined') {\n                    return await this.reserveAndFetch(id, fetcher);\n                }\n\n                switch (item.state) {\n                    case CacheItemState.RESERVED:\n                        const elapsed = new Date().getTime() - started;\n                        if (elapsed < this.waiterTimeout) {\n                            // Our time spent waiting is still within the timeout window, so keep going.\n                            waiter();\n                        } else {\n                            // Otherwise we have waited too long, and we just give up.\n                            reject(new Error(`Timed-out waiting for cache item to become available; timeout ${this.waiterTimeout}, waited ${elapsed}`));\n                        }\n                        break;\n                    case CacheItemState.PRESENT:\n                        resolve(item);\n                }\n            };\n\n            const waiter = async () => {\n                setTimeout(resolveItem, this.waiterFrequency);\n            };\n            waiter();\n        });\n    }\n\n    /**\n     * Reserve an item of type T, uniquely identified by id, and the proceed to fetch it \n     * and add it to the cache (under that id).\n     * \n     * @param id - \n     * @param fetcher - a function which returns promise of a thing T\n     */\n    private async reserveAndFetch(id: string, fetcher: Fetcher<T>): Promise<T> {\n        // now, reserve it.\n        this.reserveItem(id, fetcher);\n\n        const newItem = await fetcher();\n        const newCacheItem: CacheItemPresent<T> = {\n            id, fetcher,\n            createdAt: new Date().getTime(),\n            value: newItem,\n            state: CacheItemState.PRESENT\n        };\n        this.cache.set(id, newCacheItem);\n        this.runMonitor();\n        return newItem;\n        // // and then fetch it.\n        // // We keep a reference to the fetch so that we can determine if\n        // // the fetch was cancelled.\n        // const fetchPromise = fetcher()\n        //     .then((result: any) => {\n        //         this.setItem(id, result, fetcher);\n        //         return result;\n        //     })\n        //     .finally(() => {\n        //         // If the fetch was cancelled, we need to remove\n        //         // the reserved item. This should signal any queued waiters\n        //         // to spawn their own fetch.\n        //         // TODO: restore this!\n        //         // if (fetchPromise.isCancelled()) {\n        //         //     this.cache.delete(id);\n        //         // }\n        //     });\n        // return fetchPromise;\n    }\n\n    /**\n     * Given an id which uniquely identifies an item of type T,\n     * and a fetcher with which to retrieve such an item,\n     * return a promise for such an item.\n     * \n     * @param id - unique identifier for an object of type T\n     * @param fetcher - a function returning a promise of an item of type T\n     */\n    async getItemWithWait({ id, fetcher }: { id: string; fetcher: Fetcher<T>; }): Promise<T> {\n        const cached = this.cache.get(id);\n\n        // If there is no item cached yet, we reserve it and then fetch it. We don't \n        // need to wait. (Others asking for this cache item, though, will need to wait\n        // until the reserve is cleared.)\n        if (typeof cached === 'undefined') {\n            return this.reserveAndFetch(id, fetcher);\n        }\n\n        // If an item is expired, we immediately remove it and then re-reserve-and-fetch-it\n        if (this.isExpired(cached)) {\n            this.cache.delete(id);\n            return this.reserveAndFetch(id, fetcher);\n        }\n\n        switch (cached.state) {\n            case CacheItemState.RESERVED:\n                return (await this.reserveWaiter(id, fetcher)).value;\n            case CacheItemState.PRESENT:\n                return cached.value;\n        }\n    }\n\n    /**\n     * Adds an item to the cache in a \"reserved\" state. \n     * This state implies that item is or is going to soon be \n     * fetched.\n     * \n     * @param id - some opaque string identifier uniquely associated with the thing T\n     * @param fetcher \n     */\n    private reserveItem(id: string, fetcher: () => Promise<T>): CacheItemReserved<T> {\n        const reservedItem: CacheItemReserved<T> = {\n            id, fetcher,\n            reservedAt: new Date().getTime(),\n            state: CacheItemState.RESERVED\n        };\n        this.cache.set(id, reservedItem);\n        return reservedItem;\n    }\n\n    // private setItem(id: string, value: T, fetcher: () => Promise<T>) {\n    //     if (this.cache.has(id)) {\n    //         const item = this.cache.get(id);\n    //         if (item && item.reserved) {\n    //             item.reserved = false;\n    //             item.value = value;\n    //             item.fetcher = fetcher;\n    //         } else {\n    //             // overwriting? should we allow this?\n    //             this.cache.set(id, {\n    //                 id: id,\n    //                 createdAt: new Date().getTime(),\n    //                 fetcher: fetcher,\n    //                 reserved: false,\n    //                 value: value\n    //             });\n    //         }\n    //     } else {\n    //         this.cache.set(id, {\n    //             id: id,\n    //             createdAt: new Date().getTime(),\n    //             fetcher: fetcher,\n    //             reserved: false,\n    //             value: value\n    //         });\n    //     }\n    //     this.runMonitor();\n    // }\n}","import { ServiceWizardClient, GetServiceStatusResult, ServiceStatus } from './coreServices/ServiceWizard';\nimport { ServiceClient, ServiceClientParams } from './ServiceClient';\nimport Cache from './Cache';\n\n// now import the service wizard, and one auth generic client\n\n// type Promise<T> = Promise<T>\n\ninterface ModuleInfo {\n\n    module_name: string;\n}\n\nvar moduleCache = new Cache<ServiceStatus>({\n    itemLifetime: 1800000,\n    monitoringFrequency: 60000,\n    waiterTimeout: 30000,\n    waiterFrequency: 100\n});\n\n/*\n * arg is:\n * url - service wizard url\n * timeout - request timeout\n * version - service release version or tag\n * auth - auth structure\n *   token - auth token\n *   username - username\n * rpcContext\n */\n\nexport interface DynamicServiceClientParams extends ServiceClientParams {\n    version?: string;\n    // module: string;\n}\n\nconst DEFAULT_TIMEOUT = 10000;\n\nexport abstract class DynamicServiceClient extends ServiceClient {\n    version: string | null;\n\n    abstract module: string;\n\n    serviceDiscoveryURL: string;\n    serviceDiscoveryModule: string = 'ServiceWizard';\n\n    constructor(params: DynamicServiceClientParams) {\n        super(params);\n        const { version } = params;\n\n\n        this.version = version || null;\n        if (this.version === 'auto') {\n            this.version = null;\n        }\n\n        this.serviceDiscoveryURL = params.url;\n        // this.module = module;\n    }\n\n    private moduleId() {\n        let moduleId;\n        if (!this.version) {\n            moduleId = this.module + ':auto';\n        } else {\n            moduleId = this.module + ':' + this.version;\n        }\n        return moduleId;\n    }\n\n    private getCached(fetcher: () => Promise<GetServiceStatusResult>) {\n        return moduleCache.getItemWithWait({\n            id: this.moduleId(),\n            fetcher: fetcher\n        });\n    }\n\n    // setCached(value: any) {\n    //     moduleCache.setItem(this.moduleId(), value);\n    // }\n\n    // TODO: Promise<any> -> Promise<ServiceStatusResult>\n    private async lookupModule(): Promise<GetServiceStatusResult> {\n        const moduleInfo = await this.getCached(\n            (): Promise<GetServiceStatusResult> => {\n                const client = new ServiceWizardClient({\n                    url: this.serviceDiscoveryURL!,\n                    authorization: this.authorization,\n                    timeout: this.timeout\n                });\n                // NB wrapped in promise.resolve because the promise we have \n                // here is bluebird, which supports cancellation, which we need.\n                return Promise.resolve(\n                    client.getServiceStatus({\n                        module_name: this.module,\n                        version: this.version\n                    })\n                );\n            }\n        );\n        this.module = moduleInfo.module_name;\n        this.url = moduleInfo.url;\n        return moduleInfo;\n    }\n\n    // private async syncModule()\n\n    // async callFunc<P, T>(funcName: string, params: P): Promise<T> {\n    //     const moduleInfo = await this.lookupModule();\n    //     const client = new ServiceClient({\n    //         module: moduleInfo.module_name,\n    //         url: moduleInfo.url,\n    //         token: this.token\n    //     });\n\n    //     return await client.callFunc<P, T>(funcName, params);\n    // }\n\n    async callFunc<ParamType, ReturnType>(funcName: string, params: ParamType): Promise<ReturnType> {\n        await this.lookupModule();\n        return super.callFunc(funcName, params);\n    }\n    async callFuncEmptyResult<ParamType, ReturnType>(funcName: string, params: ParamType): Promise<void> {\n        await this.lookupModule();\n        return super.callFuncEmptyResult(funcName, params);\n    }\n}\n\n","import { DynamicServiceClient, DynamicServiceClientParams } from '../lib/comm/DynamicServiceClient';\n\n// Metrics client --\n// TODO: move\n// TODO: use a more dynamic dynamic service client??\n\ninterface MetricsServiceParams extends DynamicServiceClientParams { }\n\n\nexport interface JobState {\n    app_id: string;\n    client_groups: Array<string>;\n    user?: string;\n\n    complete: boolean;\n    error: boolean;\n    status: string;\n    state: string;\n\n    creation_time: number;\n    exec_start_time?: number;\n    modification_time?: number;\n    finish_time?: number;\n\n    job_id: string;\n    method: string;\n\n    wsid: string;\n    narrative_objNo: number;\n\n    narrative_name: string;\n    workspace_name: string;\n}\n\n\ninterface GetAppMetricsParam {\n    epoch_range: [number, number];\n    user_ids: Array<string>;\n}\ninterface GetAppMetricsResult {\n    job_states: Array<JobState>;\n}\n\ninterface GetJobsParam {\n    epoch_range: [number, number];\n    user_ids: Array<string>;\n}\ninterface GetJobsResult {\n    job_states: Array<JobState>;\n    total_count: number;\n}\n\ninterface GetJobParam {\n    job_id: string;\n}\ninterface GetJobResult {\n    job_state: JobState;\n}\n\nexport default class MetricsServiceClient extends DynamicServiceClient {\n    module: string = 'kb_Metrics';\n    constructor(params: DynamicServiceClientParams) {\n        super(params);\n    }\n\n    async getJobs({ epoch_range, user_ids }: GetJobsParam): Promise<GetJobsResult> {\n        return this.callFunc<GetJobsParam, GetJobsResult>('get_jobs', {\n            epoch_range,\n            user_ids\n        });\n    }\n\n    async getJob({ job_id }: GetJobParam): Promise<GetJobResult> {\n        return this.callFunc<GetJobParam, GetJobResult>('get_job', {\n            job_id\n        }\n        );\n    }\n\n    async getAppMetrics({ epoch_range, user_ids }: GetAppMetricsParam): Promise<GetAppMetricsResult> {\n        return await this.callFunc<GetAppMetricsParam, GetAppMetricsResult>('get_job', {\n            epoch_range,\n            user_ids\n        });\n\n    }\n}\n","import { JobStatus, Job, EpochTime, TimeRangePresets, TimeRange, JobQueued, JobRunning, JobFinished, JobCanceledWhileQueued, JobCanceledWhileRunning, JobErroredWhileQueued, JobErroredWhileRunning } from '../store';\nimport { JobState } from '../../lib/MetricsServiceClient';\n\nfunction getJobStatus(job: JobState): JobStatus {\n    switch (job.state) {\n        case 'QUEUED': return JobStatus.QUEUED;\n        case 'RUNNING': return JobStatus.RUNNING;\n        case 'FINISHED': return JobStatus.FINISHED;\n        case 'CANCELED_QUEUED': return JobStatus.CANCELED_QUEUED;\n        case 'CANCELED_RUNNING': return JobStatus.CANCELED_QUEUED;\n\n        // case 'ERRORED': return JobStatus.ERRORED;\n        case 'ERRORED_QUEUED':\n            // console.warn('QUEUE_ERRORED', job);\n            return JobStatus.ERRORED_QUEUED;\n        case 'ERRORED_RUNNING':\n            return JobStatus.ERRORED_RUNNING;\n        default:\n            throw new Error('Unknown job state: ' + job.state);\n    }\n    // Use most reliable fields first.\n    // if (job.complete) {\n    //     if (job.error) {\n    //         return JobStatus.ERRORED;\n    //     } else {\n    //         if (job.status === 'done') {\n    //             return JobStatus.FINISHED;\n    //         }\n    //         if (job.status.startsWith('canceled')) {\n    //             return JobStatus.CANCELED;\n    //         }\n    //         if (job.status === 'Unknown error') {\n    //             return JobStatus.ERRORED;\n    //         }\n    //         return JobStatus.ERRORED;\n    //         // TODO: handle this error by creating a new job state - UNKNOWN\n    //         // console.log('detection error', job);\n    //         // throw new Error('Cannot detect job state');\n    //     }\n    // } else {\n    //     if (!job.status || job.status === 'queued') {\n    //         return JobStatus.QUEUED;\n    //     }\n    //     // Various status values indicate the job is running, but\n    //     // we don't need any more evidence because that is the only possible\n    //     // other job state.\n    //     // E.g. 'in-progress', 'running', 'starting job so that it can be finished'\n\n    //     return JobStatus.RUNNING;\n    // }\n\n    // if (job.status === 'Unknown error') {\n    //     return JobStatus.ERRORED;\n    // }\n    // console.log('detection error', job);\n    // throw new Error('Cannot detect job state');\n}\n\nfunction makeJobQueued(job: JobState, username: string): JobQueued {\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status: JobStatus.QUEUED,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        // runAt: job.exec_start_time! || null,\n        queuedElapsed: Date.now() - job.creation_time,\n        clientGroups: job.client_groups,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username\n    };\n}\n\nfunction makeJobRunning(job: JobState, username: string): JobRunning {\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n    if (!job.exec_start_time) {\n        console.error('ERROR: Running job without exec_start_time!', job);\n        throw new Error('Running job without exec_start_time!');\n    }\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status: JobStatus.RUNNING,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        runAt: job.exec_start_time,\n        runElapsed: Date.now() - job.exec_start_time,\n        queuedElapsed: Date.now() - job.creation_time,\n        clientGroups: job.client_groups,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username\n    };\n}\n\nfunction makeJobFinished(job: JobState, username: string): JobFinished {\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n    if (!job.exec_start_time) {\n        throw new Error('Running job without exec_start_time!');\n    }\n    if (!job.finish_time) {\n        throw new Error('Running job without finish_time!');\n    }\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status: JobStatus.FINISHED,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        runAt: job.exec_start_time,\n        runElapsed: job.finish_time - job.exec_start_time,\n        finishAt: job.finish_time,\n        queuedElapsed: Date.now() - job.creation_time,\n        clientGroups: job.client_groups,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username\n    };\n}\n\nfunction makeJobCanceledQueued(job: JobState, username: string): JobCanceledWhileQueued {\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n\n    if (!job.finish_time) {\n        throw new Error('Canceled job without finish_time!');\n    }\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status: JobStatus.CANCELED_QUEUED,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        queuedElapsed: Date.now() - job.creation_time,\n        clientGroups: job.client_groups,\n        finishAt: job.finish_time,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username\n    };\n}\n\nfunction makeJobCanceledRunning(job: JobState, username: string): JobCanceledWhileRunning {\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n    if (!job.exec_start_time) {\n        throw new Error('Canceled job without exec_start_time!');\n    }\n    if (!job.finish_time) {\n        throw new Error('Canceled job without finish_time!');\n    }\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status: JobStatus.CANCELED_RUNNING,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        runAt: job.exec_start_time,\n        runElapsed: job.finish_time - job.exec_start_time,\n        finishAt: job.finish_time,\n        queuedElapsed: Date.now() - job.creation_time,\n        clientGroups: job.client_groups,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username\n    };\n}\n\nfunction makeJobErroredQueued(job: JobState, username: string): JobErroredWhileQueued {\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n    if (!job.finish_time) {\n        throw new Error('Errored job without finish_time!');\n    }\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status: JobStatus.ERRORED_QUEUED,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        finishAt: job.finish_time,\n        queuedElapsed: job.finish_time - job.creation_time,\n        clientGroups: job.client_groups,\n        message: job.status,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username\n    };\n}\n\nfunction makeJobErroredRunning(job: JobState, username: string): JobErroredWhileRunning {\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n    if (!job.exec_start_time) {\n        console.error('ERROR: Errored job without exec_start_time!', job);\n        throw new Error('Errored job without exec_start_time!');\n    }\n    if (!job.finish_time) {\n        throw new Error('Errored job without finish_time!');\n    }\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status: JobStatus.ERRORED_RUNNING,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        runAt: job.exec_start_time,\n        runElapsed: job.finish_time - job.exec_start_time,\n        finishAt: job.finish_time,\n        queuedElapsed: job.exec_start_time - job.creation_time,\n        clientGroups: job.client_groups,\n        message: job.status,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username\n    };\n}\n\nexport function serviceJobToUIJob(job: JobState, username: string): Job {\n    const status = getJobStatus(job);\n    switch (status) {\n        case JobStatus.QUEUED:\n            return makeJobQueued(job, username);\n        case JobStatus.RUNNING:\n            return makeJobRunning(job, username);\n        case JobStatus.FINISHED:\n            return makeJobFinished(job, username);\n        case JobStatus.ERRORED_QUEUED:\n            return makeJobErroredQueued(job, username);\n        case JobStatus.ERRORED_RUNNING:\n            return makeJobErroredRunning(job, username);\n        case JobStatus.CANCELED_QUEUED:\n            return makeJobCanceledQueued(job, username);\n        case JobStatus.CANCELED_RUNNING:\n            return makeJobCanceledRunning(job, username);\n        default:\n            throw new Error('Invalid job status: ' + job.status);\n    }\n}\n\nexport function compareTimeRange(job: Job, timeRangeStart: EpochTime, timeRangeEnd: EpochTime) {\n    // // if any of the timestamps fall within the time range, we are good\n    // if (\n    //     [job.queuedAt, job.runAt, job.finishAt].some((eventTime) => {\n    //         if (!eventTime) {\n    //             return false;\n    //         }\n    //         return eventTime > timeRangeStart && eventTime < timeRangeEnd;\n    //     })\n    // ) {\n    //     return true;\n    // }\n\n    // // If the timestamps span the time range, we are also good.\n    // if (!job.queuedAt) {\n    //     return false;\n    // }\n    // // if start past the end time, no match.\n    // if (job.queuedAt > timeRangeEnd) {\n    //     return false;\n    // }\n    // // If start after or on start time, then, we have a match.\n    // if (job.queuedAt >= timeRangeStart) {\n    //     return true;\n    // }\n\n    // // Otherwise, the job started (queued) before out time range, but\n    // // there is still hope, maybe it is still queued or started after the\n    // // start date.\n    // if (!job.runAt) {\n    //     // Not run yet, a match.\n    //     return true;\n    // }\n    // // Otherwise, if it starts after the range start, a match\n    // if (job.runAt >= timeRangeStart) {\n    //     return true;\n    // }\n\n    // // Otherwise, yes, there is still hope...\n\n    // // If not finished yet, a match.\n    // if (!job.finishAt) {\n    //     return true;\n    // }\n\n    // // Otherwise, if it finished after the range start, a match\n    // if (job.finishAt >= timeRangeStart) {\n    //     return true;\n    // }\n\n    // return false;\n    return true;\n}\n\nexport function compareStatus(job: Job, jobStatus?: Array<JobStatus>) {\n    if (!jobStatus) {\n        return true;\n    }\n    return jobStatus.some((status) => {\n        return job.status === status;\n    });\n}\n\nexport function calcAverage(total: number, count: number) {\n    if (total) {\n        if (count) {\n            return total / count;\n        } else {\n            return null;\n        }\n    } else {\n        if (count) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n}\n\nexport function calcRate(part: number, whole: number) {\n    if (part) {\n        if (whole) {\n            return part / whole;\n        } else {\n            return null;\n        }\n    } else {\n        if (whole) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n}\n\nexport function getTimeRange(preset: TimeRangePresets): [EpochTime, EpochTime] {\n    const hourInMilliseconds = 1000 * 60 * 60;\n    const endDate = new Date().getTime();\n    switch (preset) {\n        case 'lastHour':\n            return [endDate - hourInMilliseconds, endDate];\n        case 'last48Hours':\n            return [endDate - hourInMilliseconds * 24 * 2, endDate];\n        case 'lastWeek':\n            return [endDate - hourInMilliseconds * 24 * 7, endDate];\n        case 'lastMonth':\n            return [endDate - hourInMilliseconds * 24 * 30, endDate];\n    }\n}\n\nexport function extractTimeRange(timeRange: TimeRange): [EpochTime, EpochTime] {\n    switch (timeRange.kind) {\n        case 'preset':\n            return getTimeRange(timeRange.preset);\n        case 'literal':\n            return [timeRange.start, timeRange.end];\n        default:\n            throw new Error('Invalid time range kind value (should be impossible');\n    }\n}\n","import React from 'react';\nimport { Job, JobID, JobStatus } from '../../redux/store';\nimport JobDetailComponent from './view';\nimport { Spin, Alert } from 'antd';\nimport { NarrativeJobServiceClient } from '@kbase/ui-lib';\nimport MetricsServiceClient from '../../lib/MetricsServiceClient';\nimport { serviceJobToUIJob } from '../../redux/actions/utils';\n\nconst POLLING_INTERVAL = 5000;\n\n// A simple state wrapper for job logs.\n\nexport interface JobLogLine {\n    lineNumber: number;\n    line: string;\n    isError: boolean;\n}\nexport type JobLog = Array<JobLogLine>;\n\nexport enum JobLogState {\n    NONE,\n    JOB_QUEUED,\n    INITIAL_LOADING,\n    ACTIVE_LOADED,\n    ACTIVE_LOADING,\n    FINISHED_LOADED,\n    ERROR\n}\n\n// TODO: rename this and other things to JobDetailView...\nexport interface JobLogViewNone {\n    status: JobLogState.NONE;\n}\n\nexport interface JobLogViewQueued {\n    status: JobLogState.JOB_QUEUED;\n    job: Job;\n}\n\nexport interface JobLogViewInitialLoading {\n    status: JobLogState.INITIAL_LOADING;\n}\n\nexport interface JobLogViewActiveLoaded {\n    status: JobLogState.ACTIVE_LOADED,\n    log: Array<JobLogLine>;\n    job: Job;\n}\n\nexport interface JobLogViewActiveLoading {\n    status: JobLogState.ACTIVE_LOADING,\n    log: Array<JobLogLine>;\n    job: Job;\n}\n\nexport interface JobLogViewFinishedLoaded {\n    status: JobLogState.FINISHED_LOADED,\n    log: Array<JobLogLine>;\n    job: Job;\n}\n\nexport interface JobLogViewError {\n    status: JobLogState.ERROR,\n    error: string;\n}\n\nexport type JobLogView = JobLogViewNone | JobLogViewQueued | JobLogViewInitialLoading | JobLogViewActiveLoaded | JobLogViewActiveLoading | JobLogViewFinishedLoaded | JobLogViewError;\n\nexport interface JobLogsStateProps {\n    jobID: JobID;\n    token: string;\n    njsURL: string;\n    serviceWizardURL: string;\n}\n\ntype JobLogsStateState = JobLogView;\n\nexport default class JobLogsState extends React.Component<JobLogsStateProps, JobLogsStateState> {\n    constructor(props: JobLogsStateProps) {\n        super(props);\n\n        this.state = {\n            status: JobLogState.NONE\n        };\n    }\n\n    async getJob(): Promise<Job> {\n        const metricsClient = new MetricsServiceClient({\n            authorization: this.props.token,\n            url: this.props.serviceWizardURL,\n            timeout: 10000\n            // version: 'dev'\n        });\n\n        const job_id = this.props.jobID;\n\n        const job = await metricsClient.getJob({ job_id });\n        return serviceJobToUIJob(job.job_state, 'UNKNOWN');\n    }\n\n    async getJobLog(skipLines: number): Promise<Array<JobLogLine>> {\n        const njsClient = new NarrativeJobServiceClient({\n            token: this.props.token,\n            url: this.props.njsURL,\n            module: 'NarrativeJobService'\n        });\n\n        const [jobLog] = await njsClient.getJobLogs({ job_id: this.props.jobID, skip_lines: skipLines });\n\n        return jobLog.lines.map((line, index) => {\n            return {\n                lineNumber: skipLines + index + 1,\n                line: line.line,\n                isError: line.is_error ? true : false\n            };\n        });\n    }\n\n    // async updateJobLog() {\n    //     const startingLines = this.state.log.length;\n    //     const lines = await this.getJobLog(startingLines);\n    //     this.setState({\n    //         log: {\n    //             isLoaded: this.state.log.isLoaded,\n    //             lines: this.state.log.lines.concat(lines)\n    //         }\n    //     })\n    // }\n\n    startRunningPolling() {\n        const poller = async () => {\n            const state = this.state;\n            if (state.status !== JobLogState.ACTIVE_LOADED) {\n                this.setState({\n                    status: JobLogState.ERROR,\n                    error: 'Invalid state for polling: ' + state.status\n                });\n                return;\n            }\n            const { log } = state;\n            this.setState({\n                status: JobLogState.ACTIVE_LOADING,\n                log\n            });\n            const job = await this.getJob();\n            const startingLines = log.length;\n            const newLog = await this.getJobLog(startingLines);\n            switch (job.status) {\n                case JobStatus.QUEUED:\n                    // should not occur!\n                    this.startQueuedPolling();\n                    break;\n                case JobStatus.RUNNING:\n                    this.setState({\n                        status: JobLogState.ACTIVE_LOADED,\n                        log: log.concat(newLog),\n                        job\n                    });\n                    loop();\n                    break;\n                case JobStatus.FINISHED:\n                case JobStatus.ERRORED_QUEUED:\n                case JobStatus.ERRORED_RUNNING:\n                case JobStatus.CANCELED_RUNNING:\n                case JobStatus.CANCELED_QUEUED:\n                    this.setState({\n                        status: JobLogState.FINISHED_LOADED,\n                        log: log.concat(newLog),\n                        job\n                    });\n            }\n        };\n        const loop = () => {\n            setTimeout(poller, POLLING_INTERVAL);\n        };\n        loop();\n    }\n\n    startQueuedPolling() {\n        const poller = async () => {\n            try {\n                const job = await this.getJob();\n                switch (job.status) {\n                    case JobStatus.QUEUED:\n                        // still queued, eh?\n                        loop();\n                        return;\n                    default:\n                        const log = await this.getJobLog(0);\n                        switch (job.status) {\n                            case JobStatus.RUNNING:\n                                this.setState({\n                                    status: JobLogState.ACTIVE_LOADED,\n                                    log,\n                                    job\n                                });\n                                this.startRunningPolling();\n                                break;\n                            case JobStatus.FINISHED:\n                                // case JobStatus.CANCELED_RUNNING:\n                                this.setState({\n                                    status: JobLogState.FINISHED_LOADED,\n                                    log,\n                                    job\n                                });\n                                break;\n\n                            case JobStatus.CANCELED_QUEUED:\n                            case JobStatus.CANCELED_RUNNING:\n                                this.setState({\n                                    status: JobLogState.FINISHED_LOADED,\n                                    log,\n                                    job\n                                });\n                                break;\n                            case JobStatus.ERRORED_QUEUED:\n                            case JobStatus.ERRORED_RUNNING:\n                                this.setState({\n                                    status: JobLogState.ERROR,\n                                    log,\n                                    job\n                                });\n                                break;\n                        }\n                }\n            } catch (ex) {\n                console.error('ERROR', ex);\n            }\n        };\n\n        const loop = () => {\n            setTimeout(poller, POLLING_INTERVAL);\n        };\n\n        loop();\n    }\n\n    async getInitialJobLog() {\n        this.setState({\n            status: JobLogState.INITIAL_LOADING\n        });\n        const job = await this.getJob();\n        // const log = await this.getJobLog(0);\n\n        let log;\n        switch (job.status) {\n            case JobStatus.QUEUED:\n                // still queued, eh?\n                this.setState({\n                    status: JobLogState.JOB_QUEUED,\n                    job\n                });\n                this.startQueuedPolling();\n                return;\n            case JobStatus.RUNNING:\n                log = await this.getJobLog(0);\n                this.setState({\n                    status: JobLogState.ACTIVE_LOADED,\n                    log,\n                    job\n                });\n                this.startRunningPolling();\n                return;\n            case JobStatus.FINISHED:\n            case JobStatus.ERRORED_QUEUED:\n            case JobStatus.ERRORED_RUNNING:\n            case JobStatus.CANCELED_QUEUED:\n            case JobStatus.CANCELED_RUNNING:\n                log = await this.getJobLog(0);\n                this.setState({\n                    status: JobLogState.FINISHED_LOADED,\n                    log,\n                    job\n                });\n                return;\n        }\n    }\n\n    componentDidMount() {\n        this.getInitialJobLog();\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                Loading ... <Spin />\n            </div>\n        );\n    }\n\n    renderQueued() {\n        return (\n            <div>\n                Queued ... <Spin />\n            </div>\n        );\n    }\n\n    renderError(view: JobLogViewError) {\n        return (\n            <Alert type=\"error\" message={view.error} />\n        );\n    }\n\n    render() {\n        return <JobDetailComponent view={this.state} />;\n    }\n}\n","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\nimport JobLogState from './state';\nimport { StoreState } from '../../redux/store';\n\nexport interface OwnProps {\n}\n\ninterface StateProps {\n    token: string;\n    njsURL: string;\n    serviceWizardURL: string;\n}\n\ninterface DispatchProps { }\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: {\n            config: {\n                services: {\n                    NarrativeJobService: { url: njsURL },\n                    ServiceWizard: { url: serviceWizardURL }\n                }\n            }\n        }\n    } = state;\n\n    let token;\n    if (!userAuthorization) {\n        throw new Error('Invalid state: token required');\n    } else {\n        token = userAuthorization.token;\n    }\n\n    return { token, njsURL, serviceWizardURL };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(JobLogState);\n","import PubSub, { PubSubProxy } from \"./PubSub\";\n\n// const MONITORING_INTERVAL = 10000;\n// const MONITORING_FEEDBACK_STEPS = 100;\n// const WATCH_INTERVAL = 100;\n\nconst POLLING_TIMEOUT = 10000;\n\nexport interface PollerParams {\n    // callback to trigger a polling action, whatever that is.\n    onPoll: () => void,\n    // callback for progress\n    onProgress: (progress: number) => void,\n    pubsub: PubSub,\n    progressSteps: number,\n    pollInterval: number,\n    watchInterval: number\n}\n\nexport enum PollerState {\n    STARTED,\n    POLLING,\n    WAITING,\n    PAUSED,\n    STOPPED,\n    ERROR\n}\n\nexport class Poller {\n    params: PollerParams;\n\n    statusTimer: number | null;\n    statusCount: number;\n\n    watchStartAt: number;\n    status: PollerState;\n    // isPollerRunning: boolean;\n    // isPollerPaused: boolean;\n    error: string;\n\n    watcherTimer: number | null;\n    waitTimer: number | null;\n\n    pubsubProxy: PubSubProxy;\n\n    constructor(params: PollerParams) {\n        this.params = params;\n\n        this.statusTimer = null;\n        this.statusCount = 0;\n\n        this.watchStartAt = 0;\n        // this.isPollerRunning = false;\n        // this.isPollerPaused = true;\n        this.status = PollerState.STOPPED;\n\n        this.watcherTimer = null;\n\n        this.waitTimer = null\n\n        this.pubsubProxy = new PubSubProxy(this.params.pubsub);\n        this.error = '';\n\n    }\n\n    stop() {\n        this.pubsubProxy.off();\n    }\n\n    pause() {\n        this.status = PollerState.PAUSED;\n\n        if (this.waitTimer) {\n            window.clearInterval(this.waitTimer);\n        }\n        if (this.statusTimer) {\n            window.clearInterval(this.statusTimer);\n        }\n        if (this.watcherTimer) {\n            window.clearTimeout(this.watcherTimer);\n        }\n\n        this.statusCount = 0;\n        this.updateOnProgress();\n    }\n\n    play() {\n        this.startWaiting();\n    }\n\n    startWatching() {\n        this.watchStartAt = Date.now();\n        this.status = PollerState.STARTED;\n\n        const pollWatch = () => {\n            const elapsed = Date.now() - this.watchStartAt;\n            if (elapsed > POLLING_TIMEOUT) {\n                this.status = PollerState.ERROR;\n                this.error = `Polling took too long (${elapsed}ms)`\n                this.stopPolling();\n                return;\n            }\n\n            switch (this.status) {\n                // case PollerState.NONE:\n                //     console.error('Error: Invalid state NONE');\n                //     this.stopPolling();\n                //     break;\n                case PollerState.STARTED:\n                case PollerState.POLLING:\n                    pollWatcherLoop();\n                    return;\n                case PollerState.WAITING:\n                    if (this.watcherTimer) {\n                        window.clearTimeout(this.watcherTimer);\n                    }\n                    this.status = PollerState.WAITING;\n                    this.startWaiting();\n                    break;\n                case PollerState.STOPPED:\n                    pollWatcherLoop();\n                    break;\n                case PollerState.PAUSED:\n                    console.warn('unexpected state PAUSED');\n                    // nothing to do\n                    break;\n                case PollerState.ERROR:\n                    console.warn('unexpected state ERROR');\n                    break;\n            }\n        }\n        const pollWatcherLoop = () => {\n            this.watcherTimer = window.setTimeout(pollWatch, this.params.watchInterval);\n        }\n\n        pollWatcherLoop();\n    }\n\n    startWaiting() {\n        this.status = PollerState.WAITING;\n        // Here we enter a loop to pause until the next polling event.\n        const pollWaitLoop = () => {\n            // This will fire another polling request after the interval passes,\n            // via a timeout.\n            this.waitTimer = window.setTimeout(this.runPoll.bind(this), this.params.pollInterval);\n            this.statusCount = 0;\n            pollWaitProgressLoop();\n        }\n\n        // This interval timer is for animating the progress bar.\n        // It is an interval which should run for the same period that the poll\n        // waiter above does, but in steps defined by MONITORING_FEEDBACK_STEPS.\n        const pollWaitProgressLoop = () => {\n            this.statusTimer = window.setInterval(() => {\n                this.statusCount += 1;\n                this.updateOnProgress();\n            }, this.params.pollInterval / this.params.progressSteps);\n        }\n\n        pollWaitLoop()\n    }\n\n    runPoll() {\n        if (this.statusTimer) {\n            window.clearInterval(this.statusTimer);\n        }\n\n        this.params.onPoll();\n        this.statusCount = 0;\n        this.startWatching();\n    }\n\n    startListeningForPollingEvent() {\n        this.pubsubProxy.on('searching', ({ is }) => {\n            if (is) {\n                switch (this.status) {\n                    // case PollerState.NONE:\n                    //     // Should not occur, but move into polling state.\n                    //     this.status = PollerState.POLLING;\n                    case PollerState.STARTED:\n                        // this is where we move into the polling state!\n                        this.status = PollerState.POLLING;\n                        break;\n                    case PollerState.POLLING:\n                        // hmm, if a polling event ('searching' for now) comes in,\n                        // and we are already polling, this is weird, but lets stay\n                        // in the polling state.\n                        break;\n                    case PollerState.WAITING:\n                        this.pause();\n                        break;\n                    case PollerState.STOPPED:\n                        break;\n                    case PollerState.PAUSED:\n                        // nothing to do\n                        break;\n                    case PollerState.ERROR:\n                        break;\n                }\n            } else {\n                switch (this.status) {\n                    // case PollerState.NONE:\n                    //     break;\n                    case PollerState.STARTED:\n                        break;\n                    case PollerState.POLLING:\n                        this.status = PollerState.WAITING;\n                        break;\n                    case PollerState.WAITING:\n                        break;\n                    case PollerState.STOPPED:\n                        break;\n                    case PollerState.PAUSED:\n                        // this.status = this.play();;\n                        // nothing to do\n                        this.play();\n                        break;\n                    case PollerState.ERROR:\n                        break;\n                }\n            }\n        });\n    }\n\n    stopListeningForPollingEvent() {\n        this.pubsubProxy.off();\n    }\n\n    startPolling() {\n        this.startListeningForPollingEvent();\n        this.runPoll();\n    }\n\n    updateOnProgress() {\n        this.params.onProgress(100 * this.statusCount / this.params.progressSteps);\n    }\n\n    stopPolling() {\n        if (this.waitTimer) {\n            window.clearInterval(this.waitTimer);\n        }\n        if (this.statusTimer) {\n            window.clearInterval(this.statusTimer);\n        }\n        if (this.watcherTimer) {\n            window.clearTimeout(this.watcherTimer);\n        }\n\n        this.statusCount = 0;\n        this.updateOnProgress();\n        this.stopListeningForPollingEvent();\n    }\n\n}","import uuid from 'uuid';\n\nexport interface SubscriptionDefinition {\n    channel: string | null;\n    message: string;\n}\n\nexport interface Subscription {\n    id: string,\n    channelName: string,\n    messageName: string\n}\n\nexport interface Channel {\n    messages: Map<string, MessageListener>\n}\n\n// export interface Listener {\n\n// }\n\nexport interface PublishDefinition {\n    channel: string;\n    message: string;\n\n}\n\nexport interface Payload { }\n\nexport interface Message {\n    id: MessageID,\n    payload: any\n}\n\nconst SEND_WINDOW = 1000 / 60;\n\n// Listen for message T\nexport interface Listener {\n    id: string;\n    messageID: MessageID;\n    handler: (message: Message) => void\n}\n\nexport interface MessageListener {\n    listeners: Array<Listener>;\n}\n\nexport type MessageID = string;\n\nexport class PubSubProxy {\n    subscriptions: Array<string>;\n    pubsub: PubSub;\n\n    constructor(pubsub: PubSub) {\n        this.subscriptions = [];\n        this.pubsub = pubsub;\n    }\n\n    on(messageID: string, handler: (payload: any) => void) {\n        const id = this.pubsub.on(messageID, handler);\n        this.subscriptions.push(id);\n    }\n\n    off() {\n        this.subscriptions.forEach((id) => {\n            this.pubsub.off(id);\n        })\n    }\n}\n\nexport default class PubSub {\n    sendQueue: Array<Message>\n    messageListeners: Map<MessageID, MessageListener>\n    allListeners: Map<string, Listener>\n    constructor() {\n        this.sendQueue = [];\n        this.messageListeners = new Map<MessageID, MessageListener>();\n        this.allListeners = new Map<string, Listener>();\n    }\n\n    private sendMessages() {\n        const queue = this.sendQueue;\n        this.sendQueue = [];\n        queue.forEach((message: Message) => {\n            const messageListener = this.messageListeners.get(message.id);\n            if (!messageListener) {\n                return;\n            }\n            messageListener.listeners.forEach((listener: Listener) => {\n                try {\n                    listener.handler(message.payload);\n                } catch (ex) {\n                    console.error('ERROR', ex);\n                }\n            });\n        });\n    }\n\n    private processQueue() {\n        if (this.sendQueue.length === 0) {\n            return;\n        }\n        window.setTimeout(() => {\n            this.sendMessages();\n        }, SEND_WINDOW)\n    }\n\n    send<T>(messageID: string, payload: any) {\n        const message: Message = {\n            id: messageID,\n            payload\n        }\n        this.sendQueue.push(message);\n        this.processQueue();\n    }\n\n    on(messageID: string, handler: (m: Message) => void): string {\n        let messageListener = this.messageListeners.get(messageID);\n        if (!messageListener) {\n            messageListener = {\n                listeners: []\n            }\n            this.messageListeners.set(messageID, messageListener);\n        }\n        const id = uuid.v4();\n        const listener = {\n            id, messageID, handler\n        }\n        messageListener.listeners.push(listener);\n        this.allListeners.set(id, listener);\n        return id;\n    }\n\n    off(id: string) {\n        const listener = this.allListeners.get(id);\n        if (!listener) {\n            return;\n        }\n        const messageListener = this.messageListeners.get(listener.messageID);\n        if (!messageListener) {\n            return;\n        }\n        messageListener.listeners = messageListener.listeners.filter((l) => {\n            return l.id !== listener.id\n        })\n    }\n}","import * as React from 'react';\nimport { Progress, Button, Tooltip, Switch } from 'antd';\nimport PubSub, { PubSubProxy } from '../lib/PubSub';\nimport { Poller } from '../lib/Poller';\n\nconst MONITORING_INTERVAL = 10000;\nconst MONITORING_FEEDBACK_STEPS = 100;\nconst WATCH_INTERVAL = 100;\n\nexport interface MonitorProps {\n    showControls: boolean;\n    startPolling: boolean;\n    startOpen: boolean;\n    isPollerRunning: boolean;\n    pubsub: PubSub;\n    onPoll: () => void;\n}\n\nexport interface MonitorState {\n    /** Support for job monitoring */\n    isMonitoring: boolean;\n\n    /**  */\n    isPollingInitiated: boolean;\n    pollingStartedAt: number;\n\n    /** Monitoring progress */\n    // monitoringStatusCount: number;\n    pollWaitProgress: number;\n\n    isPolling: boolean;\n\n    isOpen: boolean;\n}\n\nexport default class Monitor extends React.Component<MonitorProps, MonitorState> {\n    monitoringTimer: number | null;\n    monitoringStatusTimer: number | null;\n    pollWatcherTimer: number | null;\n    searchListenerID: string | null;\n    pubsubProxy: PubSubProxy;\n\n    poller: Poller;\n\n    constructor(props: MonitorProps) {\n        super(props);\n\n        this.monitoringTimer = null;\n        this.monitoringStatusTimer = null;\n        this.pollWatcherTimer = null;\n        this.searchListenerID = null;\n        this.pubsubProxy = new PubSubProxy(this.props.pubsub);\n\n        this.poller = new Poller({\n            onPoll: this.props.onPoll,\n            onProgress: this.onProgress.bind(this),\n            pubsub: this.props.pubsub,\n            pollInterval: MONITORING_INTERVAL,\n            progressSteps: MONITORING_FEEDBACK_STEPS,\n            watchInterval: WATCH_INTERVAL\n        })\n\n        this.state = {\n            isMonitoring: false,\n            // monitoringStatusCount: 0,\n            pollWaitProgress: 0,\n            isPollingInitiated: false,\n            pollingStartedAt: 0,\n            isPolling: false,\n            isOpen: this.props.startOpen\n        };\n    }\n\n    onProgress(progress: number) {\n        this.setState({\n            pollWaitProgress: progress\n        })\n    }\n\n    componentDidMount() {\n        if (this.props.startPolling) {\n            this.startMonitoring();\n        }\n        this.pubsubProxy.on('searching', ({ is }) => {\n            if (is) {\n                this.setState({\n                    isPolling: true\n                });\n                // this.poller.stopPolling();\n            } else {\n                this.setState({\n                    isPolling: false\n                });\n                // this.poller.startPolling();\n            }\n        })\n    }\n\n    componentWillUnmount() {\n        this.stopMonitoring();\n        this.poller.stop();\n        this.pubsubProxy.off();\n    }\n\n    componentDidUpdate() {\n\n    }\n\n    startMonitoring() {\n        this.setState({\n            isMonitoring: true\n        });\n        this.poller.startPolling();\n    }\n\n    // resetMonitoring() {\n    //     if (!this.state.isMonitoring) {\n    //         return;\n    //     }\n\n    //     // If waiting for a poll, do nothing.\n    //     if (!this.state.isPolling) {\n    //         return;\n    //     }\n\n    //     // If waiting to poll again, our only possible other state,\n    //     // restart the timers.\n    //     // clear the timers\n    //     this.poller.stopPolling();\n\n    //     // reset the count.\n    //     this.poller.startPolling();\n    // }\n\n    stopMonitoring() {\n        this.poller.stopPolling();\n        this.setState({\n            isMonitoring: false\n        });\n    }\n\n    toggleMonitoring() {\n        if (this.state.isMonitoring) {\n            this.stopMonitoring();\n        } else {\n            this.startMonitoring();\n        }\n    }\n\n    onToggleOpen(isOpen: boolean) {\n        this.setState({ isOpen });\n    }\n\n    render() {\n        if (!this.props.showControls) {\n            return null;\n        }\n        let monitoringStatus;\n        let label = 'Start Polling';\n        let buttonType: 'default' | 'danger' = 'default';\n        // let opener;\n        // let openerStyle: React.CSSProperties = {};\n        // if (this.state.isMonitoring) {\n        //     openerStyle.color = 'red';\n        // }\n        // if (!this.state.isOpen) {\n        //     opener = <Tooltip title=\"Open the monitor\">\n        //         <Button type=\"link\" icon=\"sync\" onClick={this.onToggleOpen.bind(this)} style={openerStyle} />\n        //     </Tooltip>\n        // } else {\n        //     openerStyle.backgroundColor = 'rgba(200, 200, 200, 0.3)';\n        //     opener = <Tooltip title=\"Close the monitor\">\n        //         <Button type=\"link\" icon=\"sync\" onClick={this.onToggleOpen.bind(this)} style={openerStyle} />\n        //     </Tooltip>\n        // }\n        const opener = (\n            <Switch\n                defaultChecked={this.state.isOpen}\n                checkedChildren=\"hide monitor\"\n                unCheckedChildren=\"show monitor\"\n                onChange={this.onToggleOpen.bind(this)} />\n        );\n\n        if (this.state.isMonitoring) {\n            label = 'Stop Polling';\n            buttonType = 'danger';\n            if (!this.state.isPolling) {\n                monitoringStatus = (\n                    <span>\n                        {' '}\n                        <Progress type=\"circle\" percent={this.state.pollWaitProgress} width={30} strokeWidth={30} showInfo={false} />\n                    </span>\n                );\n            } else {\n                monitoringStatus = (\n                    <span>\n                        {' '}<Progress type=\"circle\" percent={100} width={30} showInfo={false} strokeWidth={30} strokeColor={'orange'} />\n                    </span>\n                )\n            }\n            // } else {\n            //     const spinnerIcon = <Icon type=\"loading\" style={{ fontSize: '1em', color: 'orange' }} spin />;\n            //     monitoringStatus = (\n            //         <span>\n            //             {' '}<Spin size=\"small\" indicator={spinnerIcon} />\n            //         </span>\n            //     )\n            // }\n        }\n        let title;\n        if (this.state.isMonitoring) {\n            title = `Polling is running, with an interval of ${MONITORING_INTERVAL}ms and ${MONITORING_FEEDBACK_STEPS} update steps.`\n        } else {\n            title = 'Polling is currently stopped.';\n        }\n        let monitor;\n        if (this.state.isOpen) {\n            monitor = <Tooltip title={title}>\n                <Button onClick={this.toggleMonitoring.bind(this)} type={buttonType} size=\"small\" style={{ fontSize: \"80%\" }}>\n                    {label}\n                </Button>\n                {monitoringStatus}\n            </Tooltip>\n        }\n        return (\n            <span>\n                {opener}\n                {' '}\n                {monitor}\n            </span>\n        );\n    }\n}\n","/**\n * A component for browsing through (search, filter, sort) jobs submitted by\n * the current user.\n */\n\n// 3rd party imports\nimport React from 'react';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport {\n    Table, Form, Input, Button, Checkbox, Select, DatePicker,\n    Popconfirm, Tooltip, Modal, Switch\n} from 'antd';\nimport moment, { Moment } from 'moment';\nimport JobStatusBadge from '../JobStatus';\n\n// project imports (should be shared lib)\nimport { NiceRelativeTime, NiceElapsedTime } from '@kbase/ui-components';\n\n// project imports\nimport {\n    Job, JobStatus, JobsSearchExpression, SearchState, TimeRange,\n    TimeRangePresets, TimeRangeLiteral, SortSpec\n} from '../../redux/store';\nimport JobDetail from '../JobDetail';\n\n// file imports\nimport './style.css';\nimport Monitor from '../Monitor';\nimport PubSub from '../../lib/PubSub';\nimport UILink from '../UILink';\nimport NarrativeLink from '../NarrativeLink';\n\n/*\n    Props and State\n*/\n\ntype JobStatusFilterKey = 'queued' | 'running' | 'canceled' | 'success' | 'error';\n\ninterface JobStatusFilterOption {\n    label: string;\n    value: JobStatusFilterKey;\n}\n\nconst jobStatusFilterOptions: Array<JobStatusFilterOption> = [\n    {\n        label: 'Queued',\n        value: 'queued'\n    },\n    {\n        label: 'Running',\n        value: 'running'\n    },\n    {\n        label: 'Canceled',\n        value: 'canceled'\n    },\n    {\n        label: 'Success',\n        value: 'success'\n    },\n    {\n        label: 'Error',\n        value: 'error'\n    }\n];\n\nfunction jobStatusFilterOptionsToJobStatus(filter: Array<JobStatusFilterKey>): Array<JobStatus> {\n    let jobStatuses: Array<JobStatus> = [];\n    filter.forEach((status) => {\n        switch (status) {\n            case 'queued':\n                jobStatuses.push(JobStatus.QUEUED);\n                break;\n            case 'running':\n                jobStatuses.push(JobStatus.RUNNING);\n                break;\n            case 'canceled':\n                jobStatuses.push(JobStatus.CANCELED_QUEUED);\n                jobStatuses.push(JobStatus.CANCELED_RUNNING);\n                break;\n            case 'success':\n                jobStatuses.push(JobStatus.FINISHED);\n                break;\n            case 'error':\n                jobStatuses.push(JobStatus.ERRORED_QUEUED);\n                jobStatuses.push(JobStatus.ERRORED_RUNNING);\n                break;\n        }\n    });\n    return jobStatuses;\n}\n\nexport interface UserJobsProps {\n    jobs: Array<Job>;\n    searchState: SearchState;\n    showMonitoringControls: boolean;\n    search: (searchExpression: JobsSearchExpression) => void;\n    cancelJob: (jobID: string) => void;\n}\n\ninterface UserJobsState {\n    showDates: boolean;\n    currentJobStatusFilter: Array<JobStatusFilterKey>;\n    timeRange: TimeRange;\n    isFilterOpen: boolean;\n    selectedJob: Job | null;\n    currentSort: SortSpec | null;\n}\n\nexport default class UserJobs extends React.Component<UserJobsProps, UserJobsState> {\n    currentQuery?: string;\n\n    static defaultTimeRange: TimeRangePresets = 'last48Hours';\n    pubsub: PubSub;\n\n    constructor(props: UserJobsProps) {\n        super(props);\n\n        this.currentQuery = '';\n        this.pubsub = new PubSub();\n\n        this.state = {\n            showDates: false,\n            currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error'],\n            timeRange: { kind: 'preset', preset: UserJobs.defaultTimeRange },\n            isFilterOpen: false,\n            selectedJob: null,\n            currentSort: null\n        };\n    }\n\n    componentDidMount() {\n        this.doSearch(true);\n    }\n\n    componentDidUpdate() {\n        if (this.props.searchState === SearchState.SEARCHING) {\n            this.pubsub.send('searching', { is: true });\n        } else {\n            this.pubsub.send('searching', { is: false });\n        }\n    }\n\n    onChangeTimeRange(value: string) {\n        // TODO: should narrow the string value\n        if (value === 'customRange') {\n            this.setState({\n                showDates: true,\n                timeRange: { kind: 'literal', start: Date.now(), end: Date.now() }\n            });\n            // nothing else to do.\n            return;\n        } else {\n            this.setState(\n                {\n                    showDates: false,\n                    timeRange: { kind: 'preset', preset: value as TimeRangePresets }\n                },\n                () => {\n                    this.doSearch(true);\n                }\n            );\n        }\n    }\n\n    onChangeQuery(event: React.ChangeEvent<HTMLInputElement>) {\n        this.currentQuery = event.target.value;\n    }\n\n    onSubmit(event: React.FormEvent) {\n        event.preventDefault();\n        this.doSearch(true);\n    }\n\n    doSearch(forceSearch: boolean) {\n        if (typeof this.currentQuery === 'undefined') {\n            return;\n        }\n\n        const jobStatusFilter = jobStatusFilterOptionsToJobStatus(this.state.currentJobStatusFilter);\n\n        const searchExpression: JobsSearchExpression = {\n            query: this.currentQuery,\n            timeRange: this.state.timeRange,\n            jobStatus: jobStatusFilter,\n            forceSearch,\n            sort: this.state.currentSort\n        };\n\n        this.pubsub.send('search', {});\n\n        this.props.search(searchExpression);\n        return false;\n    }\n\n    onRangeFromChange(date: Moment | null, dateString: string) {\n        // TODO: if the range ends up null (how?), should it default\n        // to the previously selected preset? For now, just go back to lastHourl.\n        if (date === null) {\n            this.setState({\n                timeRange: {\n                    kind: 'preset',\n                    preset: 'lastHour'\n                }\n            });\n            return;\n        }\n\n        // handle logic of switching from 'preset' to 'literal'\n        let existingTimeRange = this.state.timeRange;\n        let timeRange: TimeRange;\n        switch (existingTimeRange.kind) {\n            case 'preset':\n                timeRange = {\n                    kind: 'literal',\n                    start: date.valueOf(),\n                    end: Infinity\n                };\n                break;\n            case 'literal':\n                timeRange = {\n                    kind: 'literal',\n                    start: date.valueOf(),\n                    end: existingTimeRange.end\n                };\n                break;\n            default:\n                return;\n        }\n\n        this.setState({\n            timeRange\n        });\n    }\n\n    onRangeToChange(date: Moment | null, dateString: string) {\n        // TODO: if the range ends up null (how?), should it default\n        // to the previously selected preset? For now, just go back to lastHourl.\n        if (date === null) {\n            this.setState({\n                timeRange: {\n                    kind: 'preset',\n                    preset: 'lastHour'\n                }\n            });\n            return;\n        }\n        let existingTimeRange = this.state.timeRange;\n        let timeRange: TimeRange;\n        switch (existingTimeRange.kind) {\n            case 'preset':\n                timeRange = {\n                    kind: 'literal',\n                    start: Infinity,\n                    end: date.valueOf()\n                };\n                break;\n            case 'literal':\n                timeRange = {\n                    kind: 'literal',\n                    start: existingTimeRange.start,\n                    end: date.valueOf()\n                };\n                break;\n            default:\n                return;\n        }\n\n        this.setState({\n            timeRange\n        });\n    }\n\n    renderJobAction(job: Job) {\n        switch (job.status) {\n            case JobStatus.QUEUED:\n            case JobStatus.RUNNING:\n                return (\n                    <Popconfirm\n                        title=\"Cancel this job?\"\n                        onConfirm={() => {\n                            this.props.cancelJob(job.id);\n                        }}\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                    >\n                        <Button icon=\"close\" type=\"danger\" size=\"small\" />\n                    </Popconfirm>\n                );\n            default:\n                return;\n        }\n    }\n\n    renderTimeRangeSelectionControl() {\n        return <Select\n            defaultValue={UserJobs.defaultTimeRange}\n            onChange={this.onChangeTimeRange.bind(this)}\n            dropdownMatchSelectWidth={true}\n            style={{ width: '11em' }}\n        >\n            <Select.Option value=\"lastHour\">Previous Hour</Select.Option>\n            <Select.Option value=\"last48Hours\">Previous 48 Hours</Select.Option>\n            <Select.Option value=\"lastWeek\">Previous Week</Select.Option>\n            <Select.Option value=\"lastMonth\">Previous Month</Select.Option>\n            <Select.Option value=\"customRange\">Custom Range</Select.Option>\n        </Select>;\n    }\n\n    renderTimeRangeControl(timeRange: TimeRangeLiteral) {\n        return <React.Fragment>\n            <Form.Item label=\"From\">\n                <DatePicker\n                    showTime={true}\n                    allowClear={false}\n                    value={moment(timeRange.start)}\n                    onChange={this.onRangeFromChange.bind(this)}\n                />\n            </Form.Item>\n            <Form.Item label=\"To\">\n                <DatePicker\n                    showTime={true}\n                    allowClear={false}\n                    value={moment(timeRange.end)}\n                    onChange={this.onRangeToChange.bind(this)}\n                />\n            </Form.Item>\n        </React.Fragment>;\n    }\n\n    renderSearchInput() {\n        let dateControls;\n        if (this.state.showDates) {\n            const timeRange = this.state.timeRange;\n            if (timeRange.kind === 'literal') {\n                dateControls = this.renderTimeRangeControl(timeRange);\n            }\n        }\n        return (\n            <Form layout=\"inline\" onSubmit={this.onSubmit.bind(this)}>\n                <Form.Item>\n                    <Input\n                        defaultValue={this.currentQuery}\n                        placeholder=\"Search jobs\"\n                        style={{ width: '15em' }}\n                        onChange={this.onChangeQuery.bind(this)}\n                    />\n                </Form.Item>\n\n                <Form.Item label=\"TimeRange\" />\n                <Form.Item>\n                    {this.renderTimeRangeSelectionControl()}\n                </Form.Item>\n\n                {dateControls}\n\n                <Form.Item>\n                    <Button icon=\"search\" type=\"primary\" htmlType=\"submit\" />\n                </Form.Item>\n\n                <Form.Item>\n                    <Switch checkedChildren=\"hide filters\" unCheckedChildren=\"show filters\" onChange={this.onToggleFilterArea.bind(this)} />\n                </Form.Item>\n\n                <Form.Item>\n                    <Monitor\n                        onPoll={() => {\n                            this.doSearch(true);\n                        }}\n                        pubsub={this.pubsub}\n                        startPolling={true}\n                        isPollerRunning={this.props.searchState === SearchState.SEARCHING}\n                        showControls={this.props.showMonitoringControls}\n                        startOpen={true}\n                    />\n                </Form.Item>\n            </Form>\n        );\n    }\n\n    onToggleFilterArea(isFilterOpen: boolean) {\n        this.setState({ isFilterOpen });\n    }\n\n    onFilterChange(filters: Array<CheckboxValueType>) {\n        const filter = filters as Array<JobStatusFilterKey>;\n\n        this.setState(\n            {\n                currentJobStatusFilter: filter\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onChangeJobStatusAny(event: CheckboxChangeEvent) {\n        if (event.target.checked) {\n            this.setState(\n                {\n                    currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error']\n                },\n                () => {\n                    this.doSearch(false);\n                }\n            );\n        }\n    }\n\n    onClickAny() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onClickFinished() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['canceled', 'success', 'error']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onClickActive() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['queued', 'running']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    renderFilterInput() {\n        const options = jobStatusFilterOptions;\n        return (\n            <div className=\"UserJobs-filterArea\">\n                <span style={{ color: 'gray', fontWeight: 'bold', marginRight: '10px' }}>Filter by Job Status</span>\n                <Button size=\"small\" onClick={this.onClickAny.bind(this)}>\n                    <i>Any</i>\n                </Button>{' '}\n                <Button size=\"small\" onClick={this.onClickActive.bind(this)}>\n                    <i>Active</i>\n                </Button>{' '}\n                <Button size=\"small\" onClick={this.onClickFinished.bind(this)} style={{ marginRight: '10px' }}>\n                    <i>Finished</i>\n                </Button>\n                <Checkbox.Group\n                    options={options}\n                    onChange={this.onFilterChange.bind(this)}\n                    value={this.state.currentJobStatusFilter}\n                />\n            </div>\n        );\n    }\n\n    renderControlBar() {\n        let filterRowStyle: React.CSSProperties = { margin: '10px 10px 10px 0' };\n        if (!this.state.isFilterOpen) {\n            filterRowStyle.display = 'none';\n        }\n        let filterRow;\n        if (this.state.isFilterOpen) {\n            filterRow = <div className=\"Row\" style={filterRowStyle}>\n                {this.renderFilterInput()}\n            </div>;\n        }\n        return (\n            <div className=\"Col\">\n                <div className=\"Row\">{this.renderSearchInput()}</div>\n                {filterRow}\n            </div>\n        );\n    }\n\n    onClickDetail(job: Job) {\n        this.setState({\n            selectedJob: job\n        });\n    }\n\n    onCloseModal() {\n        this.setState({\n            selectedJob: null\n        });\n    }\n\n    renderJobDetail() {\n        if (!this.state.selectedJob) {\n            return;\n        }\n        const footer = (\n            <Button key=\"cancel\" onClick={this.onCloseModal.bind(this)}>\n                Close\n            </Button>\n        );\n        const title = (\n            <span>\n                Detail for Job <span style={{ fontFamily: 'monospace', fontWeight: 'bold' }}>{this.state.selectedJob.id}</span>\n            </span>\n        );\n        return (\n            <Modal className=\"FullScreenModal\" title={title}\n                onCancel={this.onCloseModal.bind(this)} visible={true}\n                footer={footer}>\n                <JobDetail jobID={this.state.selectedJob.id} />\n            </Modal>\n        );\n    }\n\n    renderJobsTable() {\n        const loading = this.props.searchState === SearchState.SEARCHING;\n        return (\n            <Table\n                size=\"small\"\n                className=\"UserJobs-table xScrollingFlexTable\"\n                dataSource={this.props.jobs}\n                loading={loading}\n                rowKey={(job: Job) => {\n                    return job.id;\n                }}\n                pagination={{ position: 'bottom', showSizeChanger: true }}\n            // onChange={this.onTableChanged.bind(this)}\n            // pagination={false}\n            // scroll={{ y: '100%' }}\n\n            >\n                <Table.Column\n                    title=\"ID\"\n                    dataIndex=\"id\"\n                    key=\"id\"\n                    width=\"8%\"\n                    render={(jobID: string, job: Job): any => {\n                        const title = jobID;\n                        return (\n                            <Tooltip title={title}>\n                                <a href=\"https://example.com\" onClick={(e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n                                    e.preventDefault();\n                                    this.onClickDetail(job);\n                                }}>{jobID}</a>\n                            </Tooltip>\n                        );\n                    }}\n                />\n                <Table.Column\n                    title=\"User\"\n                    dataIndex=\"username\"\n                    key=\"username\"\n                    width=\"10%\"\n                    render={(username: string) => {\n                        return (\n                            <UILink path={`people/${username}`}\n                                openIn='new-tab'>\n                                {username}\n                            </UILink>\n                        );\n                    }}\n                />\n                <Table.Column\n                    title=\"Narrative\"\n                    dataIndex=\"narrativeTitle\"\n                    key=\"narrativeTitle\"\n                    width=\"17%\"\n                    render={(title: string, job: Job): any => {\n                        if (!title || !job.narrativeID) {\n                            return 'n/a';\n                        }\n                        return (\n                            <Tooltip title={title}>\n                                <NarrativeLink narrativeID={job.narrativeID}>\n                                    {title}\n                                </NarrativeLink>\n                            </Tooltip>\n                        );\n                    }}\n                />\n                <Table.Column\n                    title=\"App\"\n                    dataIndex=\"appTitle\"\n                    key=\"appTitle\"\n                    width=\"18%\"\n                    // style={cellStyle}\n                    render={(title: string, job: Job): any => {\n                        if (!title) {\n                            return 'n/a';\n                        }\n                        return (\n                            <Tooltip title={title}>\n                                <UILink path={`catalog/apps/${job.appID}`}\n                                    openIn='same-window'>\n                                    {title}\n                                </UILink>\n                            </Tooltip>\n                        );\n                    }}\n                />\n                <Table.Column\n                    title=\"Submitted\"\n                    dataIndex=\"queuedAt\"\n                    key=\"queuedAt\"\n                    width=\"8%\"\n                    render={(date: number, job: Job) => {\n                        if (!date) {\n                            return <span>** empty **</span>;\n                        }\n                        return <NiceRelativeTime time={new Date(date)} />;\n                    }}\n                    defaultSortOrder=\"descend\"\n                    sorter={(a: Job, b: Job) => {\n                        if (a.queuedAt === null) {\n                            if (b.queuedAt === null) {\n                                return 0;\n                            }\n                            return -1;\n                        } else {\n                            if (b.queuedAt === null) {\n                                return 1;\n                            }\n                            return a.queuedAt - b.queuedAt;\n                        }\n                    }}\n                />\n                <Table.Column\n                    title=\"Queued\"\n                    dataIndex=\"queuedElapsed\"\n                    key=\"queuedElapsed\"\n                    width=\"10%\"\n                    render={(_, job: Job) => {\n                        switch (job.status) {\n                            case JobStatus.QUEUED:\n                                return <NiceElapsedTime from={job.queuedAt} precision={2} useClock={true} />;\n                            case JobStatus.ERRORED_QUEUED:\n                            case JobStatus.CANCELED_QUEUED:\n                                return <NiceElapsedTime from={job.queuedAt} to={job.finishAt} precision={2} />;\n                            default:\n                                return <NiceElapsedTime from={job.queuedAt} to={job.runAt} precision={2} />;\n                        }\n                    }}\n                />\n                <Table.Column\n                    title=\"Run\"\n                    // dataIndex=\"runElapsed\"\n                    key=\"runElapsed\"\n                    width=\"10%\"\n                    render={(_, job: Job) => {\n                        switch (job.status) {\n                            case JobStatus.QUEUED:\n                            case JobStatus.ERRORED_QUEUED:\n                            case JobStatus.CANCELED_QUEUED:\n                                return '-';\n                            case JobStatus.RUNNING:\n                                return <NiceElapsedTime from={job.runAt} precision={2} useClock={true} />;\n                            case JobStatus.FINISHED:\n                            case JobStatus.CANCELED_RUNNING:\n                            case JobStatus.ERRORED_RUNNING:\n                                return <NiceElapsedTime from={job.runAt} to={job.finishAt} precision={2} />;\n                        }\n                    }}\n                />\n                <Table.Column\n                    title=\"Status\"\n                    dataIndex=\"status\"\n                    key=\"status\"\n                    width=\"8%\"\n                    render={(status: JobStatus, job: Job) => {\n                        return <JobStatusBadge job={job} />;\n                    }}\n                />\n                <Table.Column\n                    title=\"Server\"\n                    dataIndex=\"clientGroups\"\n                    key=\"clientGroups\"\n                    width=\"8%\"\n                    render={(clientGroups: Array<string>) => {\n                        return clientGroups.join(',');\n                    }}\n                />\n                <Table.Column\n                    title=\"Cancel\"\n                    dataIndex=\"action\"\n                    key=\"action\"\n                    width=\"5%\"\n                    render={(status: JobStatus, job: Job) => {\n                        return this.renderJobAction(job);\n                    }}\n                />\n            </Table>\n        );\n    }\n\n    render() {\n        return (\n            <div data-k-b-testhook-component=\"UserJobs\" className=\"UserJobs\">\n                <div>{this.renderControlBar()}</div>\n                {this.renderJobsTable()}\n                {this.renderJobDetail()}\n            </div>\n        );\n    }\n}\n","import uuid from 'uuid';\n\nexport type TaskID = string;\n\nexport interface Task<ResultType> {\n    id: TaskID;\n    promise: Promise<ResultType>\n    isCanceled: boolean;\n}\n\n// type Request<ParamType, ResultType> = (param: ParamType) => Promise<ResultType>;\n\nexport default abstract class CancelableRequest<ParamType, ResultType> {\n    pendingTasks: Map<TaskID, Task<ResultType>>;\n    isCanceled: boolean;\n    constructor() {\n        this.pendingTasks = new Map<TaskID, Task<ResultType>>();\n        this.isCanceled = false;\n    }\n\n    newID() {\n        return uuid.v4();\n    }\n\n    cancel(task: Task<ResultType>) {\n        task.isCanceled = true;\n        this.pendingTasks.delete(task.id);\n    }\n\n    cancelPending() {\n        this.pendingTasks.forEach((task, key) => {\n            this.cancel(task);\n        });\n    }\n\n    done(task: Task<ResultType>) {\n        this.pendingTasks.delete(task.id);\n    }\n\n    spawn(param: ParamType): Task<ResultType> {\n        this.cancelPending();\n        return this.request(param);\n    }\n\n    abstract request(param: ParamType): Task<ResultType>;\n}","import { Job, JobsSearchExpression, EpochTime, StoreState } from '../store';\nimport MetricsServiceClient from '../../lib/MetricsServiceClient';\nimport { serviceJobToUIJob, compareTimeRange, compareStatus, extractTimeRange } from './utils';\nimport { Action } from 'redux';\nimport { ActionType } from '.';\nimport { NarrativeJobServiceClient } from '@kbase/ui-lib';\nimport { AppError } from '@kbase/ui-components';\nimport { ThunkDispatch } from 'redux-thunk';\nimport CancelableRequest, { Task } from '../../lib/CancelableRequest';\n\nexport interface UserJobsSearch extends Action<ActionType.USER_JOBS_SEARCH> {\n    type: ActionType.USER_JOBS_SEARCH;\n    searchExpression: JobsSearchExpression;\n}\n\nexport interface UserJobsSearchStart extends Action<ActionType.USER_JOBS_SEARCH_START> {\n    type: ActionType.USER_JOBS_SEARCH_START;\n}\n\nexport interface UserJobsSearchSuccess extends Action<ActionType.USER_JOBS_SEARCH_SUCCESS> {\n    type: ActionType.USER_JOBS_SEARCH_SUCCESS;\n    searchExpression: JobsSearchExpression;\n    rawJobs: Array<Job>;\n    jobs: Array<Job>;\n    jobsFetchedAt: EpochTime;\n}\n\nexport interface UserJobsSearchError extends Action<ActionType.USER_JOBS_SEARCH_ERROR> {\n    type: ActionType.USER_JOBS_SEARCH_ERROR;\n    error: AppError;\n}\n\nexport function userJobsSearchStart(): UserJobsSearchStart {\n    return {\n        type: ActionType.USER_JOBS_SEARCH_START\n    };\n}\n\nexport function userJobsSearchSuccess(\n    rawJobs: Array<Job>,\n    jobs: Array<Job>,\n    jobsFetchedAt: EpochTime,\n    searchExpression: JobsSearchExpression\n): UserJobsSearchSuccess {\n    return {\n        type: ActionType.USER_JOBS_SEARCH_SUCCESS,\n        searchExpression,\n        rawJobs,\n        jobs,\n        jobsFetchedAt\n    };\n}\n\nexport function userJobsSearchError(error: AppError): UserJobsSearchError {\n    return {\n        type: ActionType.USER_JOBS_SEARCH_ERROR,\n        error\n    };\n}\n\ninterface UserJobsParam {\n    token: string,\n    serviceWizardURL: string,\n    from: number,\n    to: number;\n}\n\ntype UserJobsResult = Array<Job>;\n\nclass UserJobsRequest extends CancelableRequest<UserJobsParam, UserJobsResult> {\n    request({ token, serviceWizardURL, from, to }: UserJobsParam): Task<UserJobsResult> {\n        const client = new MetricsServiceClient({\n            url: serviceWizardURL,\n            authorization: token,\n            timeout: 10000\n            // version: 'dev'\n        });\n        const promise = client\n            .getJobs({\n                epoch_range: [from, to],\n                user_ids: []\n            })\n            .then((metrics) => {\n                const converted = metrics.job_states.map((jobState) => {\n                    return serviceJobToUIJob(jobState, 'UNKNOWN');\n                });\n                return converted;\n            });\n\n        const task: Task<UserJobsResult> = {\n            id: this.newID(),\n            promise,\n            isCanceled: false\n        };\n        this.pendingTasks.set(task.id, task);\n        return task;\n    }\n}\n\nconst userJobsSearchRequest = new UserJobsRequest();\n\nexport function userJobsSearch(searchExpression: JobsSearchExpression) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(userJobsSearchStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url: serviceWizardURL }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                userJobsSearchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        let {\n            views: {\n                userJobsView: { jobsFetchedAt, rawJobs }\n            }\n        } = getState();\n\n        const searchTerms = searchExpression.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n\n        const [timeRangeStart, timeRangeEnd] = extractTimeRange(searchExpression.timeRange);\n\n        if (!jobsFetchedAt || searchExpression.forceSearch) {\n\n            const task = userJobsSearchRequest.spawn({\n                token: userAuthorization.token,\n                serviceWizardURL,\n                from: timeRangeStart,\n                to: timeRangeEnd\n            });\n\n            rawJobs = await task.promise;\n            if (task.isCanceled) {\n                // just do nothing\n                return;\n            }\n            jobsFetchedAt = new Date().getTime();\n            userJobsSearchRequest.done(task);\n\n            // rawJobs = await fetchAllUserJobs(userAuthorization.token, serviceWizardURL, timeRangeStart, timeRangeEnd);\n            jobsFetchedAt = new Date().getTime();\n            // UPDATE: update the raw jobs\n        }\n\n        const newJobs = rawJobs.filter((job) => {\n            return (\n                searchTerms.every((term) => {\n                    return term.test(job.appTitle) || term.test(job.narrativeTitle) || term.test(job.id) || term.test(job.username);\n                }) &&\n                compareTimeRange(\n                    job,\n                    // searchExpression.timeRange,\n                    timeRangeStart,\n                    timeRangeEnd\n                ) &&\n                compareStatus(job, searchExpression.jobStatus)\n            );\n        });\n\n        dispatch(userJobsSearchSuccess(rawJobs, newJobs, jobsFetchedAt, searchExpression));\n    };\n}\n\nexport function userJobsRefreshSearch() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(userJobsSearchStart());\n\n        const {\n            auth: { userAuthorization }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                userJobsSearchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        const {\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url: serviceWizardURL }\n                    }\n                }\n            },\n            views: {\n                userJobsView: { searchExpression }\n            }\n        } = getState();\n\n        if (!searchExpression) {\n            userJobsSearchError({\n                message: 'No search expression',\n                code: 'nosearchexpression'\n            });\n            return;\n        }\n\n        const searchTerms = searchExpression.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n\n        const [timeRangeStart, timeRangeEnd] = extractTimeRange(searchExpression.timeRange);\n\n\n        const task = userJobsSearchRequest.spawn({\n            token: userAuthorization.token,\n            serviceWizardURL,\n            from: timeRangeStart,\n            to: timeRangeEnd\n        });\n\n        const rawJobs = await task.promise;\n        if (task.isCanceled) {\n            // just do nothing\n            return;\n        }\n\n        userJobsSearchRequest.done(task);\n\n        const newJobs = rawJobs.filter((job) => {\n            return (\n                searchTerms.every((term) => {\n                    return term.test(job.appTitle) || term.test(job.narrativeTitle);\n                }) &&\n                compareTimeRange(\n                    job,\n                    // searchExpression.timeRange,\n                    timeRangeStart,\n                    timeRangeEnd\n                ) &&\n                compareStatus(job, searchExpression.jobStatus)\n            );\n        });\n\n        dispatch(userJobsSearchSuccess(rawJobs, newJobs, Date.now(), searchExpression));\n    };\n}\n\n// user job cancellation...\n// Job Cancelation\n\nexport interface UserJobsCancelJob {\n    type: ActionType.USER_JOBS_CANCEL;\n    jobID: string;\n}\n\nexport interface UserJobsCancelJobStart {\n    type: ActionType.USER_JOBS_CANCEL_START;\n}\n\nexport interface UserJobsCancelJobSuccess {\n    type: ActionType.USER_JOBS_CANCEL_SUCCESS;\n}\n\nexport interface UserJobsCancelJobError {\n    type: ActionType.USER_JOBS_CANCEL_ERROR;\n    error: AppError;\n}\n\nexport function userJobsCancelJobStart(): UserJobsCancelJobStart {\n    return {\n        type: ActionType.USER_JOBS_CANCEL_START\n    };\n}\n\nexport function userJobsCancelJobSuccess(): UserJobsCancelJobSuccess {\n    return {\n        type: ActionType.USER_JOBS_CANCEL_SUCCESS\n    };\n}\n\nexport function userJobsCancelJobError(error: AppError): UserJobsCancelJobError {\n    return {\n        type: ActionType.USER_JOBS_CANCEL_ERROR,\n        error\n    };\n}\n\nexport function userJobsCancelJob(jobID: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(userJobsCancelJobStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        NarrativeJobService: { url: njsURL }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                userJobsCancelJobError({\n                    message: 'no authorization',\n                    code: 'no-authorization'\n                })\n            );\n            return;\n        }\n\n        // do it\n        const njsClient = new NarrativeJobServiceClient({\n            url: njsURL,\n            token: userAuthorization.token,\n            module: 'NarrativeJobService'\n        });\n        njsClient\n            .cancelJob({ job_id: jobID })\n            .then(() => {\n                dispatch(userJobsCancelJobSuccess());\n                dispatch(userJobsRefreshSearch());\n            })\n            .catch((err) => {\n                console.error('error canceling job', err);\n                dispatch(\n                    userJobsCancelJobError({\n                        message: 'error canceling job: ' + err.message,\n                        code: 'error-canceling'\n                    })\n                );\n            });\n    };\n}\n","/**\n * A redux adapter container for the User Jobs view component.\n *\n * For those not familiar with redux-based apps: Redux exists as a parallel system to the react component hierarchy. The react \"store\" (database)\n * is established in the top level `App` component. A component can access the store data and the store actions through what is commonly\n * referred to as a \"container\" module. We prefer to call them \"redux adapters\", to be more specific.\n *\n * A redux adapter is a separate component file. It essentially creates a component (via the `connect` function) which \"wraps\" the underlying\n * view component. It extracts the data and action generators and supplies them to the view component.\n */\n\n/**\n * Imports, ignore\n */\n// 3rd party\nimport { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\n\n// project\nimport UserJobs from './view';\nimport { StoreState, Job, JobsSearchExpression, SearchState } from '../../redux/store';\nimport { userJobsSearch, userJobsCancelJob } from '../../redux/actions/userJobs';\n\n/**\n * The props which this redux adapter requires in it's invocation.\n *\n * Current empty\n */\nexport interface OwnProps { }\n\n/**\n * The props this redux adapter extracts from the store and injects in\n * its call to the child component, UserJobs.\n *\n * @note These properties must exist in UserJobs.\n */\ninterface StateProps {\n    jobs: Array<Job>;\n    searchState: SearchState;\n    showMonitoringControls: boolean;\n    // searchExpression: JobsSearchExpression;\n}\n\n/**\n * The props this redux adapter extracts from actions and injects into\n * its call to the child component, UserJobs.\n *\n * @note These properties must exist in UserJobs.\n */\ninterface DispatchProps {\n    search: (searchExpression: JobsSearchExpression) => void;\n    cancelJob: (jobID: string) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        views: {\n            userJobsView: { searchState, jobs }\n        }\n    } = state;\n\n    if (!userAuthorization) {\n        throw new Error('Not authorized!');\n    }\n\n    // const { roles } = userAuthorization\n    // const showMonitoringControls = roles.some((role) => {\n    //     return role === 'DevToken';\n    // })\n    const showMonitoringControls = true;\n    return { jobs, searchState, showMonitoringControls };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        search: (searchExpression: JobsSearchExpression) => {\n            dispatch(userJobsSearch(searchExpression) as any);\n        },\n        cancelJob: (jobID: string) => {\n            dispatch(userJobsCancelJob(jobID) as any);\n        }\n    };\n}\n\nconst UserJobsReduxAdapter = connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserJobs);\n\nexport default UserJobsReduxAdapter;\n","/**\n * A component for browsing through (search, filter, sort) jobs submitted by\n * the current user.\n */\n\n/** imports */\n// 3rd party imports\nimport React from \"react\";\nimport { Table, Form, Input, Button, Checkbox, Select, DatePicker, Popconfirm, Tooltip, Modal, Switch, Alert } from \"antd\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { CheckboxChangeEvent } from \"antd/lib/checkbox\";\nimport moment, { Moment } from \"moment\";\n\n// project imports\nimport {\n    Job,\n    JobStatus,\n    JobsSearchExpression,\n    SearchState,\n    TimeRangePresets,\n    TimeRange,\n    SortSpec\n} from \"../../redux/store\";\n\n// kbase imports (or should be kbase imports)\nimport { NiceRelativeTime, NiceElapsedTime, AppError } from \"@kbase/ui-components\";\nimport JobStatusBadge from \"../JobStatus\";\n\n// project imoprts\nimport JobDetail from \"../JobDetail\";\n\n// file imports\nimport \"./style.css\";\nimport Monitor from \"../Monitor\";\nimport PubSub from \"../../lib/PubSub\";\nimport { SortOrder } from \"antd/lib/table\";\nimport UILink from \"../UILink\";\nimport NarrativeLink from \"../NarrativeLink\";\n\n/**\n * This version of the job status defines the set of strings that may be used\n * in the ui controls.\n *\n */\ntype JobStatusFilterKey = \"queued\" | \"running\" | \"canceled\" | \"success\" | \"error\";\n\n/**\n * This interface describes a single option for the available job status filter options.\n *\n * Job status filter options are used to populate the checkboxgroup.\n * Note that the value of each option is a job status filter key.\n */\ninterface JobStatusFilterOption {\n    label: string;\n    value: JobStatusFilterKey;\n}\n\n/**\n * A set of job status filter options used to populate and control a set of checkboxes provided\n * for the user to be able to filter jobs according to their job status.\n *\n * Note that this is a set of options because the antd checkboxgroup simplifies a set of checkboxes\n * through sets of options.\n */\nconst jobStatusFilterOptions: Array<JobStatusFilterOption> = [\n    {\n        label: \"Queued\",\n        value: \"queued\"\n    },\n    {\n        label: \"Running\",\n        value: \"running\"\n    },\n    {\n        label: \"Canceled\",\n        value: \"canceled\"\n    },\n    {\n        label: \"Success\",\n        value: \"success\"\n    },\n    {\n        label: \"Error\",\n        value: \"error\"\n    }\n];\n\n/**\n * Translates an array of job status filter keys, as provided by the ui job status\n * filter checkboxes, to an array of job statuses suitable for passing to the job\n * status search.\n *\n * @param filter - an array of job status filter keys\n *\n * @note Since the switch is over an enum, we don't have to worry about the default case\n *\n * @returns an array of job statuses\n */\nfunction jobStatusFilterOptionsToJobStatus(filter: Array<JobStatusFilterKey>): Array<JobStatus> {\n    let jobStatuses: Array<JobStatus> = [];\n    filter.forEach(status => {\n        switch (status) {\n            case \"queued\":\n                jobStatuses.push(JobStatus.QUEUED);\n                break;\n            case \"running\":\n                jobStatuses.push(JobStatus.RUNNING);\n                break;\n            case \"canceled\":\n                jobStatuses.push(JobStatus.CANCELED_QUEUED);\n                jobStatuses.push(JobStatus.CANCELED_RUNNING);\n                break;\n            case \"success\":\n                jobStatuses.push(JobStatus.FINISHED);\n                break;\n            case \"error\":\n                jobStatuses.push(JobStatus.ERRORED_QUEUED);\n                jobStatuses.push(JobStatus.ERRORED_RUNNING);\n                break;\n        }\n    });\n    return jobStatuses;\n}\n\n/**\n * Semantic aliasing of for epoch time in milliseconds, as produced\n * by Date.now(), new Date().getTime(), etc.\n *\n * @todo move to a common location\n */\ntype EpochTime = number;\n\n/**\n * Props for the MyJobs component\n */\nexport interface MyJobsProps {\n    /** The list of jobs to display */\n    jobs: Array<Job>;\n\n    error: AppError | null;\n    /** The current search state, used to control the primary display (none, searching, searched, error) */\n    searchState: SearchState;\n    showMonitoringControls: boolean;\n    /** Triggers a redux action to search of the user's jobs according to the given search expression\n     * @remarks Since at present the service used to fetch the jobs can suffer performance issues, the\n     * default search action does not fetch search results each time (rather ??).\n     * @todo when job search is more performant, this function may be removed and redirected to the\n     * search function.\n     */\n    search: (searchExpression: JobsSearchExpression) => void;\n    /** Triggers a redux action to cancel the indicated job */\n    cancelJob: (jobID: string) => void;\n}\n\n/**\n * State for the MyJobs component\n */\ninterface MyJobsState {\n    /** Flag to show the date controls */\n    showDates: boolean;\n    /** Contains the current selection of job statuses in the checkbox control */\n    currentJobStatusFilter: Array<JobStatusFilterKey>;\n    /** Contains the initial timestamp (ms epoch time) for time range */\n    timeRange: TimeRange;\n\n    isFilterOpen: boolean;\n\n    selectedJob: Job | null;\n    currentSort: SortSpec | null;\n}\n\n/**\n * A View Component for browsing through the current user's jobs.\n *\n * @remarks\n * This component is really just a tabular view into a user's jobs. It provides\n * support for free text searching, filtering by job state, and date ranges.\n *\n */\nexport default class MyJobs extends React.Component<MyJobsProps, MyJobsState> {\n    currentQuery?: string;\n\n    static defaultTimeRangePreset: TimeRangePresets = \"lastWeek\";\n\n    pubsub: PubSub;\n\n    constructor(props: MyJobsProps) {\n        super(props);\n\n        this.currentQuery = \"\";\n        this.pubsub = new PubSub();\n\n        this.state = {\n            showDates: false,\n            currentJobStatusFilter: [\"queued\", \"running\", \"canceled\", \"success\", \"error\"],\n            timeRange: { kind: \"preset\", preset: MyJobs.defaultTimeRangePreset },\n            isFilterOpen: false,\n            selectedJob: null,\n            currentSort: null\n        };\n    }\n\n    componentDidMount() {\n        this.doSearch(true);\n    }\n\n    componentDidUpdate() {\n        if (this.props.searchState === SearchState.SEARCHING) {\n            this.pubsub.send(\"searching\", { is: true });\n        } else {\n            this.pubsub.send(\"searching\", { is: false });\n        }\n    }\n\n    onChangeTimeRange(value: string) {\n        // TODO: should narrow the string value\n        if (value === \"customRange\") {\n            this.setState({\n                showDates: true,\n                timeRange: { kind: \"literal\", start: Date.now(), end: Date.now() }\n            });\n            // nothing else to do.\n            return;\n        } else {\n            this.setState(\n                {\n                    showDates: false,\n                    timeRange: { kind: \"preset\", preset: value as TimeRangePresets }\n                },\n                () => {\n                    this.doSearch(true);\n                }\n            );\n        }\n    }\n\n    onChangeQuery(event: React.ChangeEvent<HTMLInputElement>) {\n        this.currentQuery = event.target.value;\n    }\n\n    onSubmit(event: React.FormEvent) {\n        event.preventDefault();\n        this.doSearch(true);\n    }\n\n    doSearch(forceSearch: boolean) {\n        if (typeof this.currentQuery === \"undefined\") {\n            return;\n        }\n\n        const jobStatusFilter = jobStatusFilterOptionsToJobStatus(this.state.currentJobStatusFilter);\n\n        const searchExpression: JobsSearchExpression = {\n            query: this.currentQuery,\n            timeRange: this.state.timeRange,\n            jobStatus: jobStatusFilter,\n            forceSearch,\n            sort: null\n            // sort: this.state.currentSort\n        };\n\n        // TODO: document wth is happening here.\n        this.pubsub.send(\"search\", {});\n\n        this.props.search(searchExpression);\n        return false;\n    }\n\n    onRangeFromChange(date: Moment | null, dateString: string) {\n        // TODO: if the range ends up null (how?), should it default\n        // to the previously selected preset? For now, just go back to lastHourl.\n        if (date === null) {\n            this.setState({\n                timeRange: {\n                    kind: \"preset\",\n                    preset: \"lastHour\"\n                }\n            });\n            return;\n        }\n\n        // handle logic of switching from 'preset' to 'literal'\n        let existingTimeRange = this.state.timeRange;\n        let timeRange: TimeRange;\n        switch (existingTimeRange.kind) {\n            case \"preset\":\n                timeRange = {\n                    kind: \"literal\",\n                    start: date.valueOf(),\n                    end: Infinity\n                };\n                break;\n            case \"literal\":\n                timeRange = {\n                    kind: \"literal\",\n                    start: date.valueOf(),\n                    end: existingTimeRange.end\n                };\n                break;\n            default:\n                return;\n        }\n\n        this.setState({\n            timeRange\n        });\n    }\n\n    onRangeToChange(date: Moment | null, dateString: string) {\n        // TODO: if the range ends up null (how?), should it default\n        // to the previously selected preset? For now, just go back to lastHourl.\n        if (date === null) {\n            this.setState({\n                timeRange: {\n                    kind: \"preset\",\n                    preset: \"lastHour\"\n                }\n            });\n            return;\n        }\n\n        let existingTimeRange = this.state.timeRange;\n        let timeRange: TimeRange;\n        switch (existingTimeRange.kind) {\n            case \"preset\":\n                timeRange = {\n                    kind: \"literal\",\n                    start: Infinity,\n                    end: date.valueOf()\n                };\n                break;\n            case \"literal\":\n                timeRange = {\n                    kind: \"literal\",\n                    start: existingTimeRange.start,\n                    end: date.valueOf()\n                };\n                break;\n            default:\n                return;\n        }\n\n        this.setState({\n            timeRange\n        });\n    }\n\n    renderSearchInput() {\n        let dateControls;\n        if (this.state.showDates) {\n            const timeRange = this.state.timeRange;\n            if (timeRange.kind === \"literal\") {\n                dateControls = (\n                    <React.Fragment>\n                        <Form.Item label=\"From\">\n                            <DatePicker\n                                showTime={true}\n                                allowClear={false}\n                                value={moment(timeRange.start)}\n                                onChange={this.onRangeFromChange.bind(this)}\n                            />\n                        </Form.Item>\n                        <Form.Item label=\"To\">\n                            <DatePicker\n                                showTime={true}\n                                allowClear={false}\n                                value={moment(timeRange.end)}\n                                onChange={this.onRangeToChange.bind(this)}\n                            />\n                        </Form.Item>\n                    </React.Fragment>\n                );\n            }\n        }\n        return (\n            <Form layout=\"inline\" onSubmit={this.onSubmit.bind(this)}>\n                <Form.Item>\n                    <Input\n                        defaultValue={this.currentQuery}\n                        placeholder=\"Search jobs\"\n                        style={{ width: \"15em\" }}\n                        onChange={this.onChangeQuery.bind(this)}\n                    />\n                </Form.Item>\n\n                <Form.Item label=\"TimeRange\" />\n                <Form.Item>\n                    <Select\n                        defaultValue={MyJobs.defaultTimeRangePreset}\n                        onChange={this.onChangeTimeRange.bind(this)}\n                        dropdownMatchSelectWidth={true}\n                        style={{ width: \"11em\" }}\n                    >\n                        <Select.Option value=\"lastHour\">Previous Hour</Select.Option>\n                        <Select.Option value=\"last48Hours\">Previous 48 Hours</Select.Option>\n                        <Select.Option value=\"lastWeek\">Previous Week</Select.Option>\n                        <Select.Option value=\"lastMonth\">Previous Month</Select.Option>\n                        <Select.Option value=\"customRange\">Custom Range</Select.Option>\n                    </Select>\n                </Form.Item>\n                {dateControls}\n\n                <Form.Item>\n                    <Button icon=\"search\" type=\"primary\" htmlType=\"submit\" />\n                </Form.Item>\n\n                <Form.Item>\n                    <Switch\n                        checkedChildren=\"hide filters\"\n                        unCheckedChildren=\"show filters\"\n                        onChange={this.onToggleFilterArea.bind(this)}\n                    />\n                </Form.Item>\n\n                <Form.Item>\n                    <Monitor\n                        onPoll={() => {\n                            this.doSearch(true);\n                        }}\n                        pubsub={this.pubsub}\n                        isPollerRunning={this.props.searchState === SearchState.SEARCHING}\n                        startPolling={false}\n                        showControls={this.props.showMonitoringControls}\n                        startOpen={false}\n                    />\n                </Form.Item>\n            </Form>\n        );\n    }\n\n    onToggleFilterArea(isFilterOpen: boolean) {\n        this.setState({ isFilterOpen });\n        // this.setState({ isFilterOpen: !this.state.isFilterOpen });\n    }\n\n    onFilterChange(filters: Array<CheckboxValueType>) {\n        const filter = filters as Array<JobStatusFilterKey>;\n        this.setState(\n            {\n                currentJobStatusFilter: filter\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onChangeJobStatusAny(event: CheckboxChangeEvent) {\n        if (event.target.checked) {\n            this.setState(\n                {\n                    currentJobStatusFilter: [\"queued\", \"running\", \"canceled\", \"success\", \"error\"]\n                },\n                () => {\n                    this.doSearch(false);\n                }\n            );\n        }\n    }\n\n    onClickAny() {\n        this.setState(\n            {\n                currentJobStatusFilter: [\"queued\", \"running\", \"canceled\", \"success\", \"error\"]\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onClickFinished() {\n        this.setState(\n            {\n                currentJobStatusFilter: [\"canceled\", \"success\", \"error\"]\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onClickActive() {\n        this.setState(\n            {\n                currentJobStatusFilter: [\"queued\", \"running\"]\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    renderFilterInput() {\n        const options = jobStatusFilterOptions;\n        return (\n            <div className=\"MyJobs-filterArea\">\n                <span style={{ color: \"gray\", fontWeight: \"bold\", marginRight: \"10px\" }}>Filter by Job Status</span>\n                <Button size=\"small\" type=\"link\" onClick={this.onClickAny.bind(this)} data-k-b-testhook-button=\"any\">\n                    <i>Any</i>\n                </Button>{\" \"}\n                <Button size=\"small\" type=\"link\" onClick={this.onClickActive.bind(this)} data-k-b-testhook-button=\"active\">\n                    <i>Active</i>\n                </Button>{\" \"}\n                <Button\n                    size=\"small\"\n                    type=\"link\"\n                    onClick={this.onClickFinished.bind(this)}\n                    style={{ marginRight: \"10px\" }}\n                    data-k-b-testhook-button=\"finished\"\n                >\n                    <i>Finished</i>\n                </Button>\n                <Checkbox.Group\n                    options={options}\n                    onChange={this.onFilterChange.bind(this)}\n                    value={this.state.currentJobStatusFilter}\n                />\n            </div>\n        );\n    }\n\n    renderControlBar() {\n        let filterRowStyle: React.CSSProperties = { margin: \"10px 10px 10px 0\" };\n        if (!this.state.isFilterOpen) {\n            filterRowStyle.display = \"none\";\n        }\n        let filterRow;\n        if (this.state.isFilterOpen) {\n            filterRow = (\n                <div className=\"Row\" style={filterRowStyle}>\n                    {this.renderFilterInput()}\n                </div>\n            );\n        }\n        return (\n            <div className=\"Col\">\n                <div className=\"Row\">{this.renderSearchInput()}</div>\n                {filterRow}\n            </div>\n        );\n    }\n\n    onJobCancel(job: Job) {\n        this.props.cancelJob(job.id);\n    }\n\n    renderJobAction(job: Job) {\n        switch (job.status) {\n            case JobStatus.QUEUED:\n            case JobStatus.RUNNING:\n                return (\n                    <Popconfirm\n                        title=\"Cancel this job?\"\n                        onConfirm={() => {\n                            this.onJobCancel(job);\n                        }}\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                    >\n                        <Button icon=\"close\" type=\"danger\" size=\"small\" data-k-b-testhook-button=\"cancel\" />\n                    </Popconfirm>\n                );\n            default:\n                return;\n        }\n    }\n\n    onClickDetail(job: Job) {\n        this.setState({\n            selectedJob: job\n        });\n    }\n\n    onCloseModal() {\n        this.setState({\n            selectedJob: null\n        });\n    }\n\n    renderNarrativeLink(job: Job) {\n        const id = job.narrativeID;\n        if (id === null) {\n            return;\n        }\n        return <NarrativeLink narrativeID={id}>{job.narrativeTitle}</NarrativeLink>;\n    }\n\n    renderError(error: AppError) {\n        return (\n            <Alert type=\"error\" message={error.message} />\n        );\n    }\n\n    renderJobsTable() {\n        console.log('render jobs table...', this.props, this.props.searchState === SearchState.ERROR);\n        if (this.props.searchState === SearchState.ERROR) {\n            if (this.props.error) {\n                return this.renderError(this.props.error);\n            } else {\n                return this.renderError({\n                    code: 'Unknown',\n                    message: 'Unknown error'\n                });\n            }\n        }\n\n        const loading = this.props.searchState === SearchState.SEARCHING;\n        return (\n            <Table\n                size=\"small\"\n                className=\"MyJobs-table xScrollingFlexTable\"\n                dataSource={this.props.jobs}\n                loading={loading}\n                rowKey={(job: Job) => {\n                    return job.id;\n                }}\n                pagination={{ position: \"bottom\", showSizeChanger: true }}\n            // pagination={false}\n            // scroll={{ y: '100%' }}\n            >\n                <Table.Column\n                    title=\"ID\"\n                    dataIndex=\"id\"\n                    key=\"id\"\n                    width=\"10%\"\n                    render={(jobID: string, job: Job): any => {\n                        const title = jobID;\n                        return (\n                            <Tooltip title={title}>\n                                <a\n                                    href=\"https://example.com\"\n                                    onClick={(e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n                                        e.preventDefault();\n                                        this.onClickDetail(job);\n                                    }}\n                                >\n                                    {jobID}\n                                </a>\n                            </Tooltip>\n                        );\n                    }}\n                />\n                <Table.Column\n                    title=\"Narrative\"\n                    dataIndex=\"narrativeTitle\"\n                    key=\"narrativeTitle\"\n                    width=\"17%\"\n                    render={(title: string, job: Job): any => {\n                        if (!title || !job.narrativeID) {\n                            return \"n/a\";\n                        }\n                        return <Tooltip title={title}>{this.renderNarrativeLink(job)}</Tooltip>;\n                    }}\n                />\n                <Table.Column\n                    title=\"App\"\n                    dataIndex=\"appTitle\"\n                    key=\"appTitle\"\n                    width=\"20%\"\n                    render={(title: string, job: Job): any => {\n                        if (!title) {\n                            return \"n/a\";\n                        }\n                        return (\n                            <Tooltip title={title}>\n                                <UILink path={`catalog/apps/${job.appID}`} openIn=\"new-tab\">\n                                    {title}\n                                </UILink>\n                            </Tooltip>\n                        );\n                    }}\n                />\n                <Table.Column\n                    title=\"Submitted\"\n                    dataIndex=\"queuedAt\"\n                    key=\"queuedAt\"\n                    width=\"10%\"\n                    render={(date: number, job: Job) => {\n                        if (!date) {\n                            return <span>** empty **</span>;\n                        }\n                        return <NiceRelativeTime time={new Date(date)} />;\n                    }}\n                    defaultSortOrder=\"descend\"\n                    sorter={(a: Job, b: Job, sortOrder?: SortOrder) => {\n                        let direction: number;\n                        if (sortOrder === \"ascend\") {\n                            direction = -1;\n                        } else {\n                            direction = 1;\n                        }\n                        if (a.queuedAt === null) {\n                            if (b.queuedAt === null) {\n                                return 0;\n                            }\n                            return -1 * direction;\n                        } else {\n                            if (b.queuedAt === null) {\n                                return 1 * direction;\n                            }\n                            return (a.queuedAt - b.queuedAt) * direction;\n                        }\n                    }}\n                />\n                <Table.Column\n                    title=\"Queued\"\n                    dataIndex=\"queuedElapsed\"\n                    key=\"queuedElapsed\"\n                    width=\"10%\"\n                    render={(_, job: Job) => {\n                        switch (job.status) {\n                            case JobStatus.QUEUED:\n                                return <NiceElapsedTime from={job.queuedAt} precision={2} useClock={true} />;\n                            case JobStatus.ERRORED_QUEUED:\n                            case JobStatus.CANCELED_QUEUED:\n                                return <NiceElapsedTime from={job.queuedAt} to={job.finishAt} precision={2} />;\n                            default:\n                                return <NiceElapsedTime from={job.queuedAt} to={job.runAt} precision={2} />;\n                        }\n                    }}\n                />\n                <Table.Column\n                    title=\"Run\"\n                    // dataIndex=\"runElapsed\"\n                    key=\"runElapsed\"\n                    width=\"10%\"\n                    render={(_, job: Job) => {\n                        switch (job.status) {\n                            case JobStatus.QUEUED:\n                            case JobStatus.ERRORED_QUEUED:\n                            case JobStatus.CANCELED_QUEUED:\n                                return \"-\";\n                            case JobStatus.RUNNING:\n                                return <NiceElapsedTime from={job.runAt} precision={2} useClock={true} />;\n                            case JobStatus.FINISHED:\n                            case JobStatus.CANCELED_RUNNING:\n                            case JobStatus.ERRORED_RUNNING:\n                                return <NiceElapsedTime from={job.runAt} to={job.finishAt} precision={2} />;\n                        }\n                    }}\n                />\n                <Table.Column\n                    title=\"Status\"\n                    dataIndex=\"status\"\n                    key=\"status\"\n                    width=\"10%\"\n                    render={(status: JobStatus, job: Job) => {\n                        return <JobStatusBadge job={job} />;\n                    }}\n                />\n                <Table.Column\n                    title=\"Server\"\n                    dataIndex=\"clientGroups\"\n                    key=\"clientGroups\"\n                    width=\"8%\"\n                    render={(clientGroups: Array<string>) => {\n                        return clientGroups.join(\",\");\n                    }}\n                />\n                <Table.Column\n                    title=\"Cancel\"\n                    dataIndex=\"action\"\n                    key=\"action\"\n                    width=\"5%\"\n                    render={(status: JobStatus, job: Job) => {\n                        return this.renderJobAction(job);\n                    }}\n                />\n            </Table>\n        );\n    }\n\n    renderJobDetail() {\n        if (!this.state.selectedJob) {\n            return;\n        }\n        const footer = (\n            <Button key=\"cancel\" onClick={this.onCloseModal.bind(this)}>\n                Close\n      </Button>\n        );\n        const title = (\n            <span>\n                Detail for Job <span style={{ fontFamily: \"monospace\", fontWeight: \"bold\" }}>{this.state.selectedJob.id}</span>\n            </span>\n        );\n        return (\n            <Modal\n                className=\"FullScreenModal\"\n                title={title}\n                onCancel={this.onCloseModal.bind(this)}\n                visible={true}\n                footer={footer}\n            >\n                <JobDetail jobID={this.state.selectedJob.id} />\n            </Modal>\n        );\n    }\n\n    render() {\n        return (\n            <div data-k-b-testhook-component=\"MyJobs\" className=\"MyJobs\">\n                <div>{this.renderControlBar()}</div>\n                {this.renderJobsTable()}\n                {this.renderJobDetail()}\n            </div>\n        );\n    }\n}\n","import { Action } from \"redux\";\nimport { ActionType } from \".\";\nimport { JobsSearchExpression, Job, EpochTime, StoreState } from \"../store\";\nimport { NarrativeJobServiceClient } from \"@kbase/ui-lib\";\nimport { AppError } from \"@kbase/ui-components\";\nimport MetricsServiceClient from \"../../lib/MetricsServiceClient\";\nimport { serviceJobToUIJob, compareTimeRange, compareStatus, extractTimeRange } from \"./utils\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport CancelableRequest, { Task } from \"../../lib/CancelableRequest\";\n\n// MY JOBS TAB\n\nexport interface MyJobsSearch extends Action<ActionType.MY_JOBS_SEARCH> {\n    type: ActionType.MY_JOBS_SEARCH;\n    searchExpression: JobsSearchExpression;\n}\n\nexport interface MyJobsSearchStart extends Action<ActionType.MY_JOBS_SEARCH_START> {\n    type: ActionType.MY_JOBS_SEARCH_START;\n}\n\nexport interface MyJobsSearchSuccess extends Action<ActionType.MY_JOBS_SEARCH_SUCCESS> {\n    type: ActionType.MY_JOBS_SEARCH_SUCCESS;\n    searchExpression: JobsSearchExpression;\n    rawJobs: Array<Job>;\n    jobs: Array<Job>;\n    jobsFetchedAt: EpochTime;\n}\n\nexport interface MyJobsSearchError extends Action<ActionType.MY_JOBS_SEARCH_ERROR> {\n    type: ActionType.MY_JOBS_SEARCH_ERROR;\n    error: AppError;\n}\n\nexport function myJobsSearchStart() {\n    return {\n        type: ActionType.MY_JOBS_SEARCH_START\n    };\n}\n\nexport function myJobsSearchSuccess(\n    rawJobs: Array<Job>,\n    jobs: Array<Job>,\n    jobsFetchedAt: EpochTime,\n    searchExpression: JobsSearchExpression\n): MyJobsSearchSuccess {\n    return {\n        type: ActionType.MY_JOBS_SEARCH_SUCCESS,\n        searchExpression,\n        rawJobs,\n        jobs,\n        jobsFetchedAt\n    };\n}\n\nexport function myJobsSearchError(error: AppError) {\n    return {\n        type: ActionType.MY_JOBS_SEARCH_ERROR,\n        error\n    };\n}\n\ninterface MyJobsParam {\n    token: string;\n    username: string;\n    serviceWizardURL: string;\n    from: number;\n    to: number;\n}\n\ntype MyJobsResult = Array<Job>;\n\nclass MyJobsRequests extends CancelableRequest<MyJobsParam, MyJobsResult> {\n    request({ token, username, serviceWizardURL, from, to }: MyJobsParam): Task<MyJobsResult> {\n        const client = new MetricsServiceClient({\n            url: serviceWizardURL,\n            authorization: token,\n            // version: 'dev',\n            // urlBaseOverride: 'http://localhost:3000',\n            timeout: 60000\n        });\n        const promise = client\n            .getJobs({\n                epoch_range: [from, to],\n                user_ids: [username]\n            })\n            .then(metrics => {\n                const converted = metrics.job_states.map(jobState => {\n                    return serviceJobToUIJob(jobState, username);\n                });\n\n                return converted;\n            })\n            .catch((error) => {\n                console.error('Error fetching job', error);\n                throw error;\n            });\n\n        const task: Task<MyJobsResult> = {\n            id: this.newID(),\n            promise,\n            isCanceled: false\n        };\n        this.pendingTasks.set(task.id, task);\n        return task;\n    }\n}\n\nconst myJobsSearchRequests = new MyJobsRequests();\n\nexport function myJobsSearch(searchExpression: JobsSearchExpression) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(myJobsSearchStart());\n\n        const {\n            auth: { userAuthorization }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                myJobsSearchError({\n                    message: \"Not authorized\",\n                    code: \"unauthorized\"\n                })\n            );\n            return;\n        }\n\n        let {\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url: serviceWizardURL }\n                    }\n                }\n            },\n            views: {\n                myJobsView: { jobsFetchedAt, rawJobs }\n            }\n        } = getState();\n\n        const searchTerms = searchExpression.query.split(/\\s+/).map(term => {\n            return new RegExp(term, \"i\");\n        });\n\n        const [timeRangeStart, timeRangeEnd] = extractTimeRange(searchExpression.timeRange);\n\n        // Umm, there must be other conditions which make a real search happen, or is\n        // forceSearch now the way to do this? ...\n        if (!jobsFetchedAt || searchExpression.forceSearch) {\n            const task = myJobsSearchRequests.spawn({\n                token: userAuthorization.token,\n                username: userAuthorization.username,\n                serviceWizardURL,\n                from: timeRangeStart,\n                to: timeRangeEnd\n            });\n\n            try {\n                rawJobs = await task.promise;\n            } catch (ex) {\n                console.error(\"ERROR\", ex);\n                dispatch(\n                    myJobsSearchError({\n                        code: \"my-jobs-fetch-error\",\n                        message: \"Error fetching jobs: \" + ex.message\n                    })\n                );\n                return;\n            }\n            if (task.isCanceled) {\n                // just do nothing\n                return;\n            }\n            jobsFetchedAt = new Date().getTime();\n            myJobsSearchRequests.done(task);\n            // UPDATE: update the raw jobs\n        }\n\n        const newJobs = rawJobs.filter(job => {\n            return (\n                searchTerms.every(term => {\n                    return term.test(job.appTitle) || term.test(job.narrativeTitle);\n                }) &&\n                compareTimeRange(job, timeRangeStart, timeRangeEnd) &&\n                compareStatus(job, searchExpression.jobStatus)\n            );\n        });\n\n        dispatch(myJobsSearchSuccess(rawJobs, newJobs, jobsFetchedAt, searchExpression));\n    };\n}\n\n// Jobs refetch\n\nexport function myJobsRefreshSearch() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(myJobsSearchStart());\n\n        const {\n            auth: { userAuthorization }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                myJobsSearchError({\n                    message: \"Not authorized\",\n                    code: \"unauthorized\"\n                })\n            );\n            return;\n        }\n\n        const {\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url: serviceWizardURL }\n                    }\n                }\n            },\n            views: {\n                myJobsView: { searchExpression }\n            }\n        } = getState();\n\n        if (!searchExpression) {\n            myJobsSearchError({\n                message: \"No search expression\",\n                code: \"nosearchexpression\"\n            });\n            return;\n        }\n\n        const [timeRangeStart, timeRangeEnd] = extractTimeRange(searchExpression.timeRange);\n\n        const searchTerms = searchExpression.query.split(/\\s+/).map(term => {\n            return new RegExp(term, \"i\");\n        });\n\n        const task = myJobsSearchRequests.spawn({\n            token: userAuthorization.token,\n            username: userAuthorization.username,\n            serviceWizardURL,\n            from: timeRangeStart,\n            to: timeRangeEnd\n        });\n\n        const rawJobs = await task.promise;\n        if (task.isCanceled) {\n            // just do nothing\n            return;\n        }\n        // jobsFetchedAt = new Date().getTime();\n        myJobsSearchRequests.done(task);\n\n        // const rawJobs = await fetchMyJobs(\n        //     userAuthorization.token,\n        //     userAuthorization.username,\n        //     serviceWizardURL,\n        //     timeRangeStart,\n        //     timeRangeEnd\n        // );\n\n        const newJobs = rawJobs.filter(job => {\n            return (\n                searchTerms.every(term => {\n                    return term.test(job.appTitle) || term.test(job.narrativeTitle);\n                }) &&\n                compareTimeRange(\n                    job,\n                    // searchExpression.timeRange,\n                    timeRangeStart,\n                    timeRangeEnd\n                ) &&\n                compareStatus(job, searchExpression.jobStatus)\n            );\n        });\n\n        dispatch(myJobsSearchSuccess(rawJobs, newJobs, Date.now(), searchExpression));\n    };\n}\n\n// JOB CANCELATION\n\n// Job Cancelation\n\nexport interface MyJobsCancelJob {\n    type: ActionType.MY_JOBS_CANCEL;\n    jobID: string;\n}\n\nexport interface MyJobsCancelJobStart {\n    type: ActionType.MY_JOBS_CANCEL_START;\n}\n\nexport interface MyJobsCancelJobSuccess {\n    type: ActionType.MY_JOBS_CANCEL_SUCCESS;\n}\n\nexport interface MyJobsCancelJobError {\n    type: ActionType.MY_JOBS_CANCEL_ERROR;\n    error: AppError;\n}\n\nexport function myJobsCancelJobStart(): MyJobsCancelJobStart {\n    return {\n        type: ActionType.MY_JOBS_CANCEL_START\n    };\n}\n\nexport function myJobsCancelJobSuccess(): MyJobsCancelJobSuccess {\n    return {\n        type: ActionType.MY_JOBS_CANCEL_SUCCESS\n    };\n}\n\nexport function myJobsCancelJobError(error: AppError): MyJobsCancelJobError {\n    return {\n        type: ActionType.MY_JOBS_CANCEL_ERROR,\n        error\n    };\n}\n\nexport function myJobsCancelJob(jobID: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(myJobsCancelJobStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        NarrativeJobService: { url: njsURL }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                myJobsCancelJobError({\n                    message: \"no authorization\",\n                    code: \"no-authorization\"\n                })\n            );\n            return;\n        }\n\n        // do it\n        const njsClient = new NarrativeJobServiceClient({\n            url: njsURL,\n            token: userAuthorization.token,\n            module: \"NarrativeJobService\"\n        });\n        njsClient\n            .cancelJob({ job_id: jobID })\n            .then(() => {\n                dispatch(myJobsCancelJobSuccess());\n                dispatch(myJobsRefreshSearch());\n            })\n            .catch(err => {\n                console.error(\"error canceling job\", err);\n                dispatch(\n                    myJobsCancelJobError({\n                        message: \"error canceling job: \" + err.message,\n                        code: \"error-canceling\"\n                    })\n                );\n            });\n    };\n}\n","import { Dispatch, Action } from \"redux\";\nimport { connect } from \"react-redux\";\nimport MyJobs from \"./view\";\n\nimport { StoreState, Job, JobsSearchExpression, SearchState } from \"../../redux/store\";\nimport { myJobsSearch, myJobsRefreshSearch, myJobsCancelJob } from \"../../redux/actions/myJobs\";\nimport { AppError } from \"@kbase/ui-components\";\n\nexport interface OwnProps { }\n\ninterface StateProps {\n    jobs: Array<Job>;\n    error: AppError | null;\n    searchState: SearchState;\n    showMonitoringControls: boolean;\n}\n\ninterface DispatchProps {\n    search: (searchExpression: JobsSearchExpression) => void;\n    cancelJob: (jobID: string) => void;\n    refreshSearch: () => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        views: {\n            myJobsView: { searchState, jobs, error }\n        }\n    } = state;\n\n    if (!userAuthorization) {\n        throw new Error(\"Not authorized!\");\n    }\n\n    const showMonitoringControls = true;\n\n    return { jobs, error, searchState, showMonitoringControls };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        search: (searchExpression: JobsSearchExpression) => {\n            dispatch(myJobsSearch(searchExpression) as any);\n        },\n        cancelJob: (jobID: string) => {\n            dispatch(myJobsCancelJob(jobID) as any);\n        },\n        refreshSearch: () => {\n            dispatch(myJobsRefreshSearch() as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(MyJobs);\n","import React from 'react';\nimport { AppStat, PublicAppStatsQuery, SearchState } from '../../redux/store';\nimport { Table, Form, Progress, Input, Button, Tooltip } from 'antd';\nimport { NiceTimeDuration } from '@kbase/ui-components';\nimport { PaginationConfig, SorterResult } from 'antd/lib/table';\nimport './style.css';\nimport UILink from '../UILink';\n\nexport interface PublicAppStatsProps {\n    searchState: SearchState;\n    appStats: Array<AppStat>;\n    onSearch: (query: PublicAppStatsQuery) => void;\n}\n\ninterface PublicAppStatsState {\n    appStats: Array<AppStat>;\n}\n\nexport default class PublicAppStats extends React.Component<PublicAppStatsProps, PublicAppStatsState> {\n    currentQuery: string;\n    constructor(props: PublicAppStatsProps) {\n        super(props);\n        this.currentQuery = '';\n    }\n    componentDidMount() {\n        this.props.onSearch({\n            query: this.currentQuery\n        });\n    }\n    onSubmitSearch(event: React.FormEvent) {\n        event.preventDefault();\n        this.props.onSearch({\n            query: this.currentQuery\n        });\n    }\n    onChangeQuery(event: React.ChangeEvent<HTMLInputElement>) {\n        this.currentQuery = event.target.value;\n    }\n    renderControlBar() {\n        return (\n            <Form layout=\"inline\" onSubmit={this.onSubmitSearch.bind(this)}>\n                <Form.Item>\n                    <Input\n                        defaultValue={this.currentQuery}\n                        placeholder=\"Search App Stats (leave empty for all)\"\n                        style={{ width: '20em' }}\n                        onChange={this.onChangeQuery.bind(this)}\n                    />\n                </Form.Item>\n                <Form.Item>\n                    <Button icon=\"search\" type=\"primary\" htmlType=\"submit\" />\n                </Form.Item>\n            </Form>\n        );\n    }\n    onTableChange(pagination: PaginationConfig, filters: any, sorter: SorterResult<AppStat>) { }\n    renderAppStatsTable() {\n        return (\n            <Table<AppStat>\n                dataSource={this.props.appStats}\n                loading={this.props.searchState === SearchState.SEARCHING}\n                rowKey={(stat: AppStat) => {\n                    return stat.appId;\n                }}\n                pagination={{ position: 'bottom', showSizeChanger: true }}\n                // pagination={false}\n                // scroll={{ y: '100%' }}\n                size=\"small\"\n                className=\"PreciseTable ScrollingFlexTable\"\n                onChange={this.onTableChange}\n            >\n                <Table.Column\n                    title=\"Module\"\n                    dataIndex=\"moduleId\"\n                    key=\"moduleId\"\n                    width=\"25%\"\n                    render={(moduleId: string, stat: AppStat) => {\n                        return (\n                            <Tooltip title={stat.moduleTitle}>\n                                <UILink path={`catalog/modules/${moduleId}`}\n                                    openIn='new-tab'>\n                                    {stat.moduleTitle}\n                                </UILink>\n                            </Tooltip>\n                        );\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.moduleTitle.localeCompare(b.moduleTitle);\n                    }}\n                    defaultSortOrder=\"ascend\"\n                />\n                <Table.Column\n                    title=\"Function\"\n                    dataIndex=\"functionId\"\n                    key=\"functionId\"\n                    width=\"25%\"\n                    render={(functionId: string, stat: AppStat) => {\n                        return (\n                            <Tooltip title={stat.functionTitle}>\n                                <UILink path={`catalog/apps/${stat.moduleId}/${stat.functionId}`}\n                                    openIn='new-tab'>\n                                    {stat.functionTitle}\n                                </UILink>\n                            </Tooltip>\n                        );\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.functionTitle.localeCompare(b.functionTitle);\n                    }}\n                />\n                <Table.Column\n                    title=\"Runs\"\n                    dataIndex=\"runCount\"\n                    key=\"runCount\"\n                    width=\"5%\"\n                    align=\"right\"\n                    render={(runCount: number) => {\n                        return (\n                            <div className=\"NumericColumn\">\n                                {new Intl.NumberFormat('en-US', {\n                                    useGrouping: true\n                                }).format(runCount)}\n                            </div>\n                        );\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.runCount - b.runCount;\n                    }}\n                />\n                <Table.Column\n                    title=\"Errors\"\n                    dataIndex=\"errorCount\"\n                    key=\"errorCount\"\n                    width=\"5%\"\n                    align=\"right\"\n                    render={(errorCount: number) => {\n                        return (\n                            <div className=\"NumericColumn\">\n                                {new Intl.NumberFormat('en-US', {\n                                    useGrouping: true\n                                }).format(errorCount)}\n                            </div>\n                        );\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.errorCount - b.errorCount;\n                    }}\n                />\n                <Table.Column\n                    title=\"Success\"\n                    dataIndex=\"successRate\"\n                    key=\"successRate\"\n                    width=\"10%\"\n                    render={(successRate: number) => {\n                        return (\n                            <Progress\n                                percent={successRate * 100}\n                                format={(percent: number | undefined) => {\n                                    return new Intl.NumberFormat('en-US', {\n                                        style: 'percent'\n                                    }).format(successRate);\n                                }}\n                            />\n                        );\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.successRate - b.successRate;\n                    }}\n                />\n                <Table.Column\n                    title=\"Avg Run\"\n                    dataIndex=\"averageRunTime\"\n                    key=\"averageRunTime\"\n                    width=\"10%\"\n                    render={(averageRunTime: number) => {\n                        return <NiceTimeDuration precision={2} duration={averageRunTime * 1000} />;\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.averageRunTime - b.averageRunTime;\n                    }}\n                />\n                <Table.Column\n                    title=\"Avg Queue\"\n                    dataIndex=\"averageQueueTime\"\n                    key=\"averageQueueTime\"\n                    width=\"10%\"\n                    render={(averageQueueTime: number) => {\n                        return <NiceTimeDuration precision={2} duration={averageQueueTime * 1000} />;\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.averageQueueTime - b.averageQueueTime;\n                    }}\n                />\n                <Table.Column\n                    title=\"Total Run\"\n                    dataIndex=\"totalRunTime\"\n                    key=\"totalRunTime\"\n                    width=\"10%\"\n                    render={(totalRunTime: number) => {\n                        return <NiceTimeDuration precision={2} duration={totalRunTime * 1000} />;\n                    }}\n                    sorter={(a: AppStat, b: AppStat) => {\n                        return a.totalRunTime - b.totalRunTime;\n                    }}\n                />\n            </Table>\n        );\n    }\n    render() {\n        return <div className=\"PublicAppStats\">\n            {this.renderControlBar()}\n            {this.renderAppStatsTable()}\n        </div>;\n    }\n}\n","import { Action } from 'redux';\nimport { ActionType } from '.';\nimport { StoreState, AppStat, PublicAppStatsQuery } from '../store';\nimport { CatalogClient } from '@kbase/ui-lib';\nimport { AppError } from '@kbase/ui-components';\n\nimport { ThunkDispatch } from 'redux-thunk';\n\nfunction calcAverage(total: number, count: number) {\n    if (total) {\n        if (count) {\n            return total / count;\n        } else {\n            return null;\n        }\n    } else {\n        if (count) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n}\n\nfunction calcRate(part: number, whole: number) {\n    if (part) {\n        if (whole) {\n            return part / whole;\n        } else {\n            return null;\n        }\n    } else {\n        if (whole) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n}\n\n// Search\n\nexport interface Search extends Action<ActionType.PUBLIC_APP_STATS_SEARCH> {\n    type: ActionType.PUBLIC_APP_STATS_SEARCH;\n    query: PublicAppStatsQuery;\n}\n\nexport interface SearchStart extends Action<ActionType.PUBLIC_APP_STATS_SEARCH_START> {\n    type: ActionType.PUBLIC_APP_STATS_SEARCH_START;\n}\n\nexport interface SearchError extends Action<ActionType.PUBLIC_APP_STATS_SEARCH_ERROR> {\n    type: ActionType.PUBLIC_APP_STATS_SEARCH_ERROR;\n    error: AppError;\n}\n\nexport interface SearchSuccess extends Action<ActionType.PUBLIC_APP_STATS_SEARCH_SUCCESS> {\n    type: ActionType.PUBLIC_APP_STATS_SEARCH_SUCCESS;\n    appStats: Array<AppStat>;\n}\n\nfunction searchStart(): SearchStart {\n    return {\n        type: ActionType.PUBLIC_APP_STATS_SEARCH_START\n    };\n}\n\nfunction searchError(error: AppError): SearchError {\n    return {\n        type: ActionType.PUBLIC_APP_STATS_SEARCH_ERROR,\n        error\n    };\n}\n\nfunction searchSuccess(appStats: Array<AppStat>): SearchSuccess {\n    return {\n        type: ActionType.PUBLIC_APP_STATS_SEARCH_SUCCESS,\n        appStats\n    };\n}\n\nexport function search(query: PublicAppStatsQuery) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        Catalog: { url: catalogUrl }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                searchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        if (!userAuthorization) {\n            dispatch(\n                searchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        const catalogClient = new CatalogClient({\n            module: 'Catalog',\n            token: userAuthorization.token,\n            url: catalogUrl\n        });\n        const rawStats = await catalogClient.getExecAggrStats({});\n        const stats = rawStats.map((stat) => {\n            const [moduleId, functionId] = stat.full_app_id.split('/');\n            if (!moduleId || !functionId) {\n                console.warn('bad app!', stat);\n            }\n            const successRate = calcRate(stat.number_of_calls - stat.number_of_errors, stat.number_of_calls);\n            const averageRunTime = calcAverage(stat.total_exec_time, stat.number_of_calls);\n            const averageQueueTime = calcAverage(stat.total_queue_time, stat.number_of_calls);\n            return {\n                appId: stat.full_app_id,\n                moduleId,\n                functionId: functionId || '',\n                moduleTitle: moduleId,\n                functionTitle: functionId || '',\n                runCount: stat.number_of_calls,\n                errorCount: stat.number_of_errors,\n                successRate,\n                averageRunTime,\n                averageQueueTime,\n                totalRunTime: stat.total_queue_time\n            } as AppStat;\n        });\n\n        const expression = query.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n        const filtered = stats.filter((stat) => {\n            return expression.every((term) => {\n                return (\n                    term.test(stat.moduleTitle) ||\n                    term.test(stat.moduleId) ||\n                    term.test(stat.functionTitle) ||\n                    term.test(stat.functionId)\n                );\n            });\n        });\n\n        dispatch(searchSuccess(filtered));\n    };\n}\n","import { StoreState, AppStat, PublicAppStatsQuery, SearchState } from '../../redux/store';\nimport { Action, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport Component from './view';\nimport { search } from '../../redux/actions/publicAppStats';\n\nexport interface OwnProps {}\n\ninterface StateProps {\n    searchState: SearchState;\n    appStats: Array<AppStat>;\n}\n\ninterface DispatchProps {\n    onSearch: (query: PublicAppStatsQuery) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        views: {\n            publicAppStatsView: { appStats, searchState }\n        }\n    } = state;\n    return {\n        searchState,\n        appStats\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        onSearch: (query: PublicAppStatsQuery) => {\n            dispatch(search(query) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Component);\n","import React from 'react';\nimport { UserRunSummaryStat, SearchState, UserRunSummaryQuery } from '../../redux/store';\nimport { Table, Form, Input, Button, Tooltip } from 'antd';\nimport './style.css';\nimport UILink from '../UILink';\n\nexport interface UserRunSummaryProps {\n    searchState: SearchState;\n    userRunSummary: Array<UserRunSummaryStat>;\n    search: (query: UserRunSummaryQuery) => void;\n}\n\ninterface UserRunSummaryState { }\n\nexport default class UserRunSummary extends React.Component<UserRunSummaryProps, UserRunSummaryState> {\n    currentQuery: UserRunSummaryQuery;\n    constructor(props: UserRunSummaryProps) {\n        super(props);\n        this.currentQuery = {\n            query: ''\n        };\n    }\n    componentDidMount() {\n        this.props.search(this.currentQuery);\n    }\n    onSubmitSearch(event: React.FormEvent) {\n        event.preventDefault();\n        this.props.search(this.currentQuery);\n    }\n    onChangeQuery(event: React.ChangeEvent<HTMLInputElement>) {\n        this.currentQuery.query = event.target.value;\n    }\n    renderControlBar() {\n        return (\n            <Form layout=\"inline\" onSubmit={this.onSubmitSearch.bind(this)}>\n                <Form.Item>\n                    <Input\n                        defaultValue={this.currentQuery.query}\n                        placeholder=\"Search (leave empty for all)\"\n                        style={{ width: '20em' }}\n                        onChange={this.onChangeQuery.bind(this)}\n                    />\n                </Form.Item>\n                <Form.Item>\n                    <Button icon=\"search\" type=\"primary\" htmlType=\"submit\" />\n                </Form.Item>\n            </Form>\n        );\n    }\n    renderTable() {\n        return (\n            <Table<UserRunSummaryStat>\n                dataSource={this.props.userRunSummary}\n                loading={this.props.searchState === SearchState.SEARCHING}\n                rowKey={(stat: UserRunSummaryStat) => {\n                    return [\n                        stat.username,\n                        stat.appId,\n                        stat.moduleName,\n                        stat.functionName\n                    ].join(':');\n                }}\n                pagination={{ position: 'bottom', showSizeChanger: true }}\n                // pagination={false}\n                // scroll={{ y: '100%' }}\n                size=\"small\"\n                className=\"PreciseTable ScrollingFlexTable\"\n            >\n                <Table.Column\n                    title=\"User\"\n                    dataIndex=\"username\"\n                    // key=\"username\"\n                    width=\"30%\"\n                    render={(username: string, stat: UserRunSummaryStat) => {\n                        return (\n                            <Tooltip title={username}>\n                                <UILink path={`people/${username}`}\n                                    openIn='same-window'>\n                                    {username}\n                                </UILink>\n                            </Tooltip>\n                        );\n                    }}\n                    sorter={(a: UserRunSummaryStat, b: UserRunSummaryStat) => {\n                        return a.username.localeCompare(b.username);\n                    }}\n                />\n                <Table.Column\n                    title=\"Module\"\n                    dataIndex=\"moduleName\"\n                    // key=\"moduleId\"\n                    width=\"30%\"\n                    render={(moduleName: string) => {\n                        return (\n                            <Tooltip title={moduleName}>\n                                <UILink path={`catalog/modules/${moduleName}`}\n                                    openIn='same-window'>\n                                    {moduleName}\n                                </UILink>\n                            </Tooltip>\n                        );\n                    }}\n                    sorter={(a: UserRunSummaryStat, b: UserRunSummaryStat) => {\n                        return a.moduleName.localeCompare(b.moduleName);\n                    }}\n                />\n                <Table.Column\n                    title=\"Function\"\n                    dataIndex=\"functionName\"\n                    // key=\"functionId\"\n                    width=\"30%\"\n                    render={(functionName: string, stat: UserRunSummaryStat) => {\n                        return (\n                            <Tooltip title={functionName}>\n                                <UILink path={`catalog/apps/${stat.appId}`}\n                                    openIn='same-window'>\n                                    {functionName}\n                                </UILink>\n                            </Tooltip>\n                        );\n                    }}\n                    sorter={(a: UserRunSummaryStat, b: UserRunSummaryStat) => {\n                        return a.functionName.localeCompare(b.functionName);\n                    }}\n                />\n                <Table.Column\n                    title=\"Runs\"\n                    dataIndex=\"runCount\"\n                    // key=\"runCount\"\n                    width=\"10%\"\n                    align=\"right\"\n                    render={(runCount: number, stat: UserRunSummaryStat) => {\n                        return (\n                            <div className=\"NumericColumn\">\n                                {Intl.NumberFormat('en-US', {\n                                    useGrouping: true\n                                }).format(runCount)}\n                            </div>\n                        );\n                    }}\n                    sorter={(a: UserRunSummaryStat, b: UserRunSummaryStat) => {\n                        return a.runCount - b.runCount;\n                    }}\n                    defaultSortOrder=\"descend\"\n                />\n            </Table>\n        );\n    }\n    render() {\n        return (\n            <div className=\"UserRunSummary\">\n                {this.renderControlBar()}\n                {this.renderTable()}\n            </div>\n        );\n    }\n}\n","import { Action } from 'redux';\nimport { ActionType } from '.';\nimport { StoreState, UserRunSummaryQuery, UserRunSummaryStat } from '../store';\nimport { CatalogClient } from '@kbase/ui-lib';\nimport { AppError } from '@kbase/ui-components';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { } from './utils';\n\n// Search\n\nexport interface Search extends Action<ActionType.USER_RUN_SUMMARY_SEARCH> {\n    type: ActionType.USER_RUN_SUMMARY_SEARCH;\n    query: UserRunSummaryQuery;\n}\n\nexport interface SearchStart extends Action<ActionType.USER_RUN_SUMMARY_SEARCH_START> {\n    type: ActionType.USER_RUN_SUMMARY_SEARCH_START;\n}\n\nexport interface SearchError extends Action<ActionType.USER_RUN_SUMMARY_SEARCH_ERROR> {\n    type: ActionType.USER_RUN_SUMMARY_SEARCH_ERROR;\n    error: AppError;\n}\n\nexport interface SearchSuccess extends Action<ActionType.USER_RUN_SUMMARY_SEARCH_SUCCESS> {\n    type: ActionType.USER_RUN_SUMMARY_SEARCH_SUCCESS;\n    userRunSummary: Array<UserRunSummaryStat>;\n}\n\nfunction searchStart(): SearchStart {\n    return {\n        type: ActionType.USER_RUN_SUMMARY_SEARCH_START\n    };\n}\n\nfunction searchError(error: AppError): SearchError {\n    return {\n        type: ActionType.USER_RUN_SUMMARY_SEARCH_ERROR,\n        error\n    };\n}\n\nfunction searchSuccess(userRunSummary: Array<UserRunSummaryStat>): SearchSuccess {\n    return {\n        type: ActionType.USER_RUN_SUMMARY_SEARCH_SUCCESS,\n        userRunSummary\n    };\n}\n\nexport function search(query: UserRunSummaryQuery) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        Catalog: { url: catalogUrl }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                searchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        if (!userAuthorization) {\n            dispatch(\n                searchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        const catalogClient = new CatalogClient({\n            module: 'Catalog',\n            token: userAuthorization.token,\n            url: catalogUrl\n        });\n        const params = {\n            begin: 0,\n            end: Date.now()\n        };\n        const rawStats = await catalogClient.getExecAggrTable(params);\n        const stats: Array<UserRunSummaryStat> = rawStats.map((stat) => {\n            let appId: string | null = stat.app;\n            if (!appId) {\n                appId = null;\n            }\n\n            return {\n                username: stat.user,\n                isApp: stat.app ? true : false,\n                appId: stat.app || null,\n                moduleName: stat.func_mod,\n                functionName: stat.func,\n                runCount: stat.n\n            } as UserRunSummaryStat;\n        });\n\n        const expression = query.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n        const filtered = stats.filter((stat) => {\n            return expression.every((term) => {\n                return (\n                    (stat.appId && term.test(stat.appId)) ||\n                    term.test(stat.moduleName) ||\n                    term.test(stat.functionName) ||\n                    term.test(stat.username)\n                );\n            });\n        });\n\n        dispatch(searchSuccess(filtered));\n    };\n}\n","import { StoreState, SearchState, UserRunSummaryStat, UserRunSummaryQuery } from '../../redux/store';\nimport { Action, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport Component from './view';\nimport { search } from '../../redux/actions/userRunSummary';\n\nexport interface OwnProps {}\n\ninterface StateProps {\n    searchState: SearchState;\n    userRunSummary: Array<UserRunSummaryStat>;\n}\n\ninterface DispatchProps {\n    search: (query: UserRunSummaryQuery) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        views: {\n            userRunSummaryView: { searchState, userRunSummary }\n        }\n    } = state;\n    return { searchState, userRunSummary };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        search: (query: UserRunSummaryQuery) => {\n            dispatch(search(query) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Component);\n","import React from 'react';\nimport './style.css';\nimport UserJobs from '../UserJobs';\nimport MyJobs from '../MyJobs';\nimport PublicAppStats from '../PublicAppStats';\nimport UserRunSummary from '../UserRunSummary';\nimport { MainParams } from './state';\nimport FlexTabs, { Tab } from '../FlexTabs';\nimport { Icon } from 'antd';\n\nexport interface MainProps {\n    isAdmin: boolean;\n    params: MainParams;\n    view: string;\n    setTitle: (title: string) => void;\n    setView: (view: string) => void;\n    setParams: (params: MainParams) => void;\n}\n\ninterface MainState {\n    activeTabKey: string | null;\n    defaultActiveTabKey: string | null;\n}\n\nexport default class Main extends React.Component<MainProps, MainState> {\n    defaultTabKey: string;\n    constructor(props: MainProps) {\n        super(props);\n        this.defaultTabKey = 'myJobs';\n        this.state = {\n            activeTabKey: this.defaultTabKey,\n            defaultActiveTabKey: this.defaultTabKey\n        };\n    }\n\n    componentDidMount() {\n        this.props.setTitle('Job Browser');\n    }\n\n    componentWillUnmount() {\n        this.setState({\n            activeTabKey: null\n            // defaultActiveTabKey: null\n        });\n    }\n\n    onTabsChange(activeKey: string) {\n        this.setState({ activeTabKey: activeKey });\n        // this.state.activeTabKey = activeKey;\n    }\n\n    renderJobsTab() { }\n\n    renderAdminJobsTab() { }\n\n    renderMyJobsTab() {\n        return <MyJobs />\n    }\n\n    renderUserJobsTab() {\n        return <UserJobs />\n    }\n\n    renderPublicAppStatsTab() {\n        return <PublicAppStats />\n    }\n\n    renderUserRunSummaryTab() {\n        return <UserRunSummary />\n    }\n\n    renderTabs() {\n        const tabs: Array<Tab> = [];\n\n        tabs.push({\n            tab: 'myjobs',\n            title: 'My Jobs',\n            component: this.renderMyJobsTab()\n        });\n\n        if (this.props.isAdmin) {\n            const userJobsTabLabel = (\n                <span>\n                    User Jobs <Icon type=\"unlock\" />\n                </span>\n            );\n            tabs.push({\n                tab: 'userjobs',\n                title: userJobsTabLabel,\n                component: <UserJobs />\n            })\n        }\n\n        tabs.push({\n            tab: 'appstats',\n            title: 'Public AppStats',\n            component: this.renderPublicAppStatsTab()\n        });\n\n        if (this.props.isAdmin) {\n            const tabLabel = (\n                <span>\n                    User Run Summary <Icon type=\"unlock\" />\n                </span>\n            );\n            tabs.push({\n                tab: 'userrunsummary',\n                title: tabLabel,\n                component: <UserRunSummary />\n            })\n        }\n\n        return (\n            <FlexTabs\n                tabs={tabs}\n            />\n        );\n    }\n\n    render() {\n        return <div\n            className=\"Col Col-scrollable\"\n            data-k-b-testhook-plugin=\"job-browser2\"\n        >\n            {this.renderTabs()}\n        </div>;\n    }\n}\n","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\nimport Main from './view';\nimport { StoreState } from '../../redux/store';\nimport { sendTitle, setView, setParams } from '@kbase/ui-components';\nimport { Params } from '@kbase/ui-components/lib/redux/integration/store';\n\nexport interface OwnProps { }\n\nexport type MainParams = Params<'tab'>;\n\ninterface StateProps {\n    isAdmin: boolean;\n    params: MainParams;\n    view: string;\n}\n\ninterface DispatchProps {\n    setTitle: (title: string) => void;\n    setView: (view: string) => void;\n    setParams: (params: MainParams) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        views: {\n            mainView: { isAdmin }\n        },\n        app: {\n            runtime: {\n                navigation: { view, params: rawParams }\n            }\n        }\n    } = state;\n    // TODO: call function to coerce raw params into typed params...\n    const params: MainParams = (rawParams as unknown) as MainParams;\n    return { isAdmin, view, params };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        },\n        setView: (view: string) => {\n            dispatch(setView(view) as any);\n        },\n        setParams: (params: MainParams) => {\n            dispatch(setParams(params) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Main);\n","import { Action } from 'redux';\nimport { ActionType } from '.';\nimport { CatalogClient } from '@kbase/ui-lib';\nimport { AppError } from '@kbase/ui-components';\n\nimport { ThunkDispatch } from 'redux-thunk';\nimport { StoreState } from '../store';\n\n// MAIN Loading\n\nexport interface MainLoad extends Action<ActionType.MAIN_LOAD> {\n    type: ActionType.MAIN_LOAD;\n}\n\nexport interface MainLoadStart extends Action<ActionType.MAIN_LOAD_START> {\n    type: ActionType.MAIN_LOAD_START;\n}\n\nexport interface MainLoadSuccess extends Action<ActionType.MAIN_LOAD_SUCCESS> {\n    type: ActionType.MAIN_LOAD_SUCCESS;\n    isAdmin: boolean;\n}\n\nexport interface MainLoadError extends Action<ActionType.MAIN_LOAD_ERROR> {\n    type: ActionType.MAIN_LOAD_ERROR;\n    error: AppError;\n}\n\nexport interface Unload extends Action<ActionType.MAIN_UNLOAD> {\n    type: ActionType.MAIN_UNLOAD;\n}\n\nexport function mainLoadStart(): MainLoadStart {\n    return {\n        type: ActionType.MAIN_LOAD_START\n    };\n}\n\nexport function mainLoadSuccess(isAdmin: boolean): MainLoadSuccess {\n    return {\n        type: ActionType.MAIN_LOAD_SUCCESS,\n        isAdmin\n    };\n}\n\nexport function mainLoadError(error: AppError): MainLoadError {\n    return {\n        type: ActionType.MAIN_LOAD_ERROR,\n        error\n    };\n}\n\nexport function mainLoad() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(mainLoadStart());\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        Catalog: { url: catalogURL }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                mainLoadError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        // determine auth\n        // TODO: we need a model object for interacting with the outside world\n        const catalogClient = new CatalogClient({\n            token: userAuthorization.token,\n            url: catalogURL,\n            module: 'Catalog'\n        });\n\n        try {\n            const isAdmin = await catalogClient.isAdmin();\n            dispatch(mainLoadSuccess(isAdmin ? true : false));\n        } catch (ex) {\n            dispatch(\n                mainLoadError({\n                    message: ex.message,\n                    code: 'error-checking-admin-status'\n                })\n            );\n        }\n    };\n}\n\nexport function unload() {\n    return {\n        type: ActionType.MAIN_UNLOAD\n    };\n}\n","/**\n * This is a \"loader\" component. It is solely responsible for\n */\nimport * as React from 'react';\nimport { ComponentLoadingState, StoreState, MainView } from '../../redux/store';\nimport Container from './state';\n\n// The redux connection\n\nimport { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { Spin, Alert } from 'antd';\nimport { mainLoad, unload } from '../../redux/actions/app';\n\n// First the loader component, which takes care of a loading view, error view, and the\n// container.\n\nexport interface LoaderProps {\n    view: MainView;\n    onLoad: () => void;\n    unload: () => void;\n}\n\ninterface LoaderState { }\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    renderLoading() {\n        const message = (\n            <div>\n                Loading Main ... <Spin />\n            </div>\n        );\n        return (\n            <Alert\n                type=\"info\"\n                message={message}\n                style={{\n                    width: '20em',\n                    padding: '20px',\n                    margin: '20px auto'\n                }}\n            />\n        );\n    }\n\n    renderError() {\n        if (!this.props.view.error) {\n            return;\n        }\n        return <Alert type=\"error\" message={this.props.view.error.message} />;\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading();\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading();\n            case ComponentLoadingState.ERROR:\n                return this.renderError();\n            case ComponentLoadingState.SUCCESS:\n                return <Container />;\n        }\n    }\n\n    componentDidMount() {\n        // this.props.onLoad();\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad();\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.unload();\n    }\n}\n\n/**\n * This is the redux interface -- the main entry point for the Main Component.\n */\n\nexport interface OwnProps { }\n\ninterface StateProps {\n    view: MainView;\n    token: string;\n}\n\ninterface DispatchProps {\n    onLoad: () => void;\n    unload: () => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        views: { mainView }\n    } = state;\n    return {\n        view: mainView,\n        token: userAuthorization!.token\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, props: OwnProps): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(mainLoad() as any);\n        },\n        unload: () => {\n            dispatch(unload() as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Loader);\n","import React from 'react';\nimport { Alert } from 'antd';\n\nexport interface ErrorBoundaryProps {\n\n}\n\ninterface ErrorBoundaryState {\n    errorMessage: string | null;\n}\n\nexport default class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n    constructor(props: ErrorBoundaryProps) {\n        super(props);\n        this.state = {\n            errorMessage: null\n        }\n    }\n\n    static getDerivedStateFromError(error: Error) {\n        return {\n            errorMessage: error.message\n        }\n    }\n\n    componentDidCatch(error: Error, errorInfo: any) {\n        console.error('ERROR', error, errorInfo);\n    }\n\n    render() {\n        if (this.state.errorMessage) {\n            const message = this.state.errorMessage;\n            return <Alert type=\"error\" message={message} />\n        }\n        return this.props.children;\n    }\n}","/**\n * The top component of the App, named appropriately App.\n *\n * As the top level component of the app, it is responsible for the setting up\n * any top level support such as the KBase integration (kbase-ui's AppBase) and\n * the redux store.\n */\n\n// 3rd party\nimport React from 'react';\nimport { createReduxStore } from './redux/store';\nimport { Provider } from 'react-redux';\n\n// KBase external\nimport { AppBase } from '@kbase/ui-components';\n\nimport { AuthGate } from '@kbase/ui-components';\n\n// project\nimport Main from './components/Main';\nimport ErrorBoundary from './components/ErrorBoundary'\n\n// file\nimport './App.css';\n\n/**\n * The app currently has no props, but we establish\n * a props interface as a placeholder.\n */\nexport interface AppProps { }\n\n/**\n * The app currently has no state, but we establish\n * a state interface as a placeholder.\n */\ninterface AppState { }\n\n// Redux setup\nconst store = createReduxStore();\n\n/**\n * The top level component for the entire web app.\n *\n * @remarks\n * Also see the [kbase-ui] support library, which provides AppBase\n *\n * @public\n */\nexport default class App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <ErrorBoundary>\n                <Provider store={store}>\n                    <AppBase>\n                        <AuthGate required={true}>\n                            <Main />\n                        </AuthGate>\n                    </AppBase>\n                </Provider>\n            </ErrorBoundary>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * index.tsx\n * This is the root code run from the index.html, and is thus the entry point to the\n * app.\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}