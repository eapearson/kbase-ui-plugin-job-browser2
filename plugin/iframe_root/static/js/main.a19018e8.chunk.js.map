{"version":3,"sources":["redux/actions/index.ts","redux/reducers/myJobs.ts","redux/reducers/userJobs.ts","redux/reducers/app.ts","redux/reducers/publicAppStats.ts","redux/reducers/userRunSummary.ts","redux/store.ts","redux/reducers/index.ts","components/JobLog/view.tsx","components/JobLog/state.tsx","components/JobLog/index.ts","components/Monitor.tsx","components/UserJobs/view.tsx","lib/MetricsServiceClient.ts","redux/actions/utils.ts","redux/actions/userJobs.ts","components/UserJobs/index.tsx","components/MyJobs/view.tsx","redux/actions/myJobs.ts","components/MyJobs/index.tsx","components/PublicAppStats/view.tsx","redux/actions/publicAppStats.ts","components/PublicAppStats/index.tsx","components/UserRunSummary/view.tsx","redux/actions/userRunSummary.ts","components/UserRunSummary/index.tsx","components/Main/view.tsx","components/Main/state.ts","redux/actions/app.ts","components/Main/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionType","reducer","state","action","type","MY_JOBS_SEARCH_SUCCESS","_objectSpread","views","myJobsView","searchState","SearchState","SEARCHED","rawJobs","jobs","jobsFetchedAt","searchExpression","myJobsSearchSuccess","MY_JOBS_SEARCH_START","SEARCHING","myJobsSearchStart","MY_JOBS_CANCEL_SUCCESS","myJobsCancelJobSuccess","USER_JOBS_SEARCH_START","userJobs_objectSpread","userJobsView","userJobsSearchStart","USER_JOBS_SEARCH_SUCCESS","userJobsSearchSuccess","USER_JOBS_CANCEL_START","USER_JOBS_CANCEL_SUCCESS","cancelJobSuccess","MAIN_LOAD_SUCCESS","app_objectSpread","mainView","loadingState","ComponentLoadingState","SUCCESS","isAdmin","mainLoadSuccess","MAIN_UNLOAD","NONE","error","unload","PUBLIC_APP_STATS_SEARCH_START","publicAppStats_objectSpread","publicAppStatsView","searchStart","PUBLIC_APP_STATS_SEARCH_SUCCESS","appStats","searchSuccess","JobStatus","USER_RUN_SUMMARY_SEARCH_START","userRunSummary_objectSpread","userRunSummaryView","USER_RUN_SUMMARY_SEARCH_SUCCESS","userRunSummary","baseState","baseReducer","appReducer","myJobsReducer","userJobsReducer","publicAppStatsReducer","makeInitialStoreState","store_objectSpread","makeBaseStoreState","rawAppStats","query","JobLogs","react_default","a","createElement","table","dataSource","this","props","log","lines","size","rowKey","logLine","String","lineNumber","pagination","position","showSizeChanger","rowClassName","line","isError","Column","title","dataIndex","key","width","render","numberDisplay","Intl","NumberFormat","useGrouping","format","className","sorter","b","row","tooltip","renderJobLogLines","React","Component","JobLogsState","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isLoaded","_this2","NarrativeJobServiceClient","token","url","njsURL","module","getJobLogs","job_id","jobId","skip_lines","then","_ref","slicedToArray","map","index","is_error","setState","catch","err","console","view_JobLogs","spin","connect","userAuthorization","auth","app","config","services","NarrativeJobService","Error","dispatch","ownProps","JobLogState","Monitor","monitoringTimer","monitoringStatusTimer","isMonitoring","monitoringStatusCount","startMonitoring","stopMonitoring","window","setInterval","onPoll","clearInterval","monitoringStatus","label","buttonType","progressPercent","react","progress","percent","style","showInfo","es_button","onClick","toggleMonitoring","bind","jobStatusFilterOptions","value","renderJobStatus","status","QUEUED","es_icon","RUNNING","CANCELED","FINISHED","ERRORED","jobStatusLabel","color","jobColor","tag","UserJobs","currentQuery","showDates","currentJobStatusFilter","timeRange","kind","preset","defaultTimeRange","doSearch","start","Date","now","end","event","target","preventDefault","forceSearch","jobStatusFilter","filter","jobStatuses","forEach","push","jobStatusFilterOptionsToJobStatus","jobStatus","search","date","existingTimeRange","valueOf","Infinity","job","_this3","popconfirm","onConfirm","cancelJob","id","okText","cancelText","icon","dateControls","_this4","Fragment","es_form","Item","date_picker","showTime","allowClear","moment","onChange","onRangeFromChange","onRangeToChange","layout","onSubmit","input","defaultValue","placeholder","onChangeQuery","es_select","onChangeTimeRange","dropdownMatchSelectWidth","Option","htmlType","Monitor_Monitor","filters","_this5","_this6","checked","_this7","_this8","_this9","options","fontWeight","marginRight","onClickAny","onClickActive","onClickFinished","es_checkbox","Group","onFilterChange","renderSearchInput","margin","renderFilterInput","_this10","loading","renderControlBar","expandIcon","expanded","e","onExpand","record","expandedRowRender","JobLog","username","href","concat","localeCompare","narrativeID","join","rel","narrativeTitle","appID","appTitle","lib","time","defaultSortOrder","queuedAt","duration","precision","queuedElapsed","runElapsed","clientGroups","renderJobAction","MetricsServiceClient","epoch_range","user_ids","callFunc","result","DynamicServiceClient","serviceJobToUIJob","finishAt","complete","startsWith","getJobStatus","creation_time","exec_start_time","finish_time","wsid","parseInt","message","app_id","narrative_name","runAt","client_groups","user","compareTimeRange","timeRangeStart","timeRangeEnd","some","eventTime","compareStatus","extractTimeRange","endDate","getTime","hourInMilliseconds","getTimeRange","fetchAllUserJobs","_callee4","serviceWizardUrl","from","to","client","regenerator_default","wrap","_context4","prev","next","abrupt","getAppMetrics","metrics","job_states","jobState","stop","userJobsSearchError","USER_JOBS_SEARCH_ERROR","userJobsCancelJobError","USER_JOBS_CANCEL_ERROR","UserJobsReduxAdapter","_state$views$userJobs","asyncToGenerator","mark","_callee","getState","_getState","serviceWizardURL","_getState2","_getState2$views$user","searchTerms","_extractTimeRange","_extractTimeRange2","newJobs","_context","ServiceWizard","code","split","term","RegExp","sent","every","test","_x5","_x6","apply","arguments","userJobsSearch","jobID","_ref3","_callee3","_getState5","_context3","_ref2","_callee2","_getState3","_getState4","_extractTimeRange3","_extractTimeRange4","_context2","_x7","_x8","_x9","_x10","userJobsCancelJob","MyJobs","defaultTimeRangePreset","data-k-b-testhook-button","onJobCancel","data-k-b-testhook-component","es_alert","myJobsSearchError","MY_JOBS_SEARCH_ERROR","fetchMyJobs","myJobsRefreshSearch","myJobsCancelJobError","MY_JOBS_CANCEL_ERROR","_state$views$myJobsVi","_getState2$views$myJo","myJobsSearch","MY_JOBS_CANCEL_START","_x11","myJobsCancelJob","refreshSearch","PublicAppStats","onSearch","onSubmitSearch","stat","appId","onTableChange","moduleId","moduleTitle","functionId","functionTitle","align","runCount","errorCount","successRate","averageRunTime","averageQueueTime","totalRunTime","renderAppStatsTable","calcAverage","total","count","searchError","PUBLIC_APP_STATS_SEARCH_ERROR","_state$views$publicAp","catalogUrl","catalogClient","rawStats","stats","expression","filtered","Catalog","CatalogClient","getExecAggrStats","_stat$full_app_id$spl","full_app_id","_stat$full_app_id$spl2","warn","part","whole","number_of_calls","number_of_errors","total_exec_time","total_queue_time","_x","_x2","UserRunSummary","renderTable","USER_RUN_SUMMARY_SEARCH_ERROR","_state$views$userRunS","params","begin","getExecAggrTable","_stat$app$split","_stat$app$split2","func_mod","func","n","Main","defaultTabKey","activeTabKey","defaultActiveTabKey","setTitle","activeKey","userRunTab","userJobsTab","tabLabel","tabs","TabPane","tab","components_UserRunSummary","userJobsTabLabel","components_UserJobs","animated","undefined","onTabsChange","components_MyJobs","components_PublicAppStats","renderTabs","_state$app$runtime$na","runtime","navigation","view","sendTitle","setView","setParams","mainLoadError","MAIN_LOAD_ERROR","Loader","padding","LOADING","renderLoading","ERROR","renderError","Main_state","onLoad","catalogURL","MAIN_LOAD_START","store","createStore","compose","applyMiddleware","thunk","App","react_redux_es","required","components_Main","Boolean","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a19018e8.chunk.js","sourcesContent":["export enum ActionType {\n    MAIN_LOAD = 'main load',\n    MAIN_LOAD_START = 'main load start',\n    MAIN_LOAD_SUCCESS = 'main load success',\n    MAIN_LOAD_ERROR = 'main load error',\n    MAIN_UNLOAD = 'main/unload',\n\n    MY_JOBS_SEARCH = 'my jobs search',\n    MY_JOBS_SEARCH_START = 'my jobs search start',\n    MY_JOBS_SEARCH_SUCCESS = 'my jobs search success',\n    MY_JOBS_SEARCH_ERROR = 'my jobs search error',\n    My_JOBS_REFRESH_SEARCH = 'my jobs refresh search',\n\n    MY_JOBS_CANCEL = 'my jobs cancel',\n    MY_JOBS_CANCEL_START = 'my jobs cancel start',\n    MY_JOBS_CANCEL_SUCCESS = 'my jobs cancel success',\n    MY_JOBS_CANCEL_ERROR = 'my jobs cancel error',\n\n    USER_JOBS_SEARCH = 'user jobs search',\n    USER_JOBS_SEARCH_START = 'user jobs search start',\n    USER_JOBS_SEARCH_SUCCESS = 'user jobs search success',\n    USER_JOBS_SEARCH_ERROR = 'user jobs search error',\n\n    USER_JOBS_CANCEL = 'user jobs cancel',\n    USER_JOBS_CANCEL_START = 'user jobs cancel start',\n    USER_JOBS_CANCEL_SUCCESS = 'user jobs cancel success',\n    USER_JOBS_CANCEL_ERROR = 'user jobs cancel error',\n\n    PUBLIC_APP_STATS_SEARCH = 'publicAppStats/Search',\n    PUBLIC_APP_STATS_SEARCH_START = 'publicAppStats/Search/Start',\n    PUBLIC_APP_STATS_SEARCH_ERROR = 'publicAppStats/Search/Error',\n    PUBLIC_APP_STATS_SEARCH_SUCCESS = 'publicAppStats/Search/Success',\n\n    USER_RUN_SUMMARY_SEARCH = 'userRunSummary/Search',\n    USER_RUN_SUMMARY_SEARCH_START = 'userRunSummary/Search/Start',\n    USER_RUN_SUMMARY_SEARCH_ERROR = 'userRunSummary/Search/Error',\n    USER_RUN_SUMMARY_SEARCH_SUCCESS = 'userRunSummary/Search/Success'\n}\n\n// function fakeJobs() {\n//     function randomStatus(): JobStatus {\n//         const i = Math.floor(Math.random() * 4);\n//         return [JobStatus.QUEUED, JobStatus.RUNNING, JobStatus.FINISHED, JobStatus.ERRORED][i];\n//     }\n\n//     function createJobs(jobCount: number) {\n//         const testJobs: Array<Job> = [];\n\n//         const dayMs = 1000 * 60 * 60 * 24;\n//         const now = Date.now();\n\n//         for (let i = 0; i < jobCount; i++) {\n//             testJobs.push({\n//                 key: 'narrative_id_' + i,\n//                 narrativeTitle: 'narrative ' + i + ' here',\n//                 narrativeID: i,\n//                 appTitle: 'app here',\n//                 appID: String(i),\n//                 submittedAt: new Date(now - dayMs * (jobCount - i)).getTime(),\n//                 queuedAt: new Date(now - dayMs * (jobCount - i)).getTime(),\n//                 runAt: new Date(now - dayMs * (jobCount - i)).getTime(),\n//                 finishAt: new Date(now - dayMs * (jobCount - i)).getTime(),\n//                 queuedElapsed: 1000 * 100 * Math.random(),\n//                 runElapsed: 1000 * 100 * Math.random(),\n//                 status: randomStatus()\n//             });\n//         }\n\n//         return testJobs;\n//     }\n\n//     const jobCount = Math.floor(Math.random() * 200);\n\n//     return createJobs(jobCount);\n// }\n\n// async function fetchMyJobsx(): Promise<Array<Job>> {\n//     return new Promise((resolve, reject) => {\n//         window.setTimeout(() => {\n//             resolve(fakeJobs());\n//         }, 3000);\n//     });\n// }\n\n// All user jobs, for admins.\n// This is separate, because it exposes different information in the view.\n","import { Reducer } from 'react';\nimport { StoreState, SearchState } from '../store';\nimport { Action } from 'redux';\nimport { MyJobsSearchStart, MyJobsSearchSuccess, MyJobsCancelJobSuccess } from '../actions/myJobs';\nimport { ActionType } from '../actions';\n\nfunction myJobsSearchStart(state: StoreState, action: MyJobsSearchStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            myJobsView: {\n                ...state.views.myJobsView,\n                searchState: SearchState.SEARCHING\n            }\n        }\n    };\n}\n\nfunction myJobsSearchSuccess(state: StoreState, action: MyJobsSearchSuccess): StoreState {\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            myJobsView: {\n                ...state.views.myJobsView,\n                searchState: SearchState.SEARCHED,\n                rawJobs: action.rawJobs,\n                jobs: action.jobs,\n                jobsFetchedAt: action.jobsFetchedAt,\n                searchExpression: action.searchExpression\n            }\n        }\n    };\n    return newState;\n}\n\nfunction myJobsCancelJobSuccess(state: StoreState, action: MyJobsCancelJobSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            myJobsView: {\n                ...state.views.myJobsView\n                // TODO: should twiddle a cancellation status for the job.\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.MY_JOBS_SEARCH_SUCCESS:\n            return myJobsSearchSuccess(state, action as MyJobsSearchSuccess);\n        case ActionType.MY_JOBS_SEARCH_START:\n            return myJobsSearchStart(state, action as MyJobsSearchStart);\n        case ActionType.MY_JOBS_CANCEL_SUCCESS:\n            return myJobsCancelJobSuccess(state, action as MyJobsCancelJobSuccess);\n    }\n};\n\nexport default reducer;\n","import { StoreState, SearchState } from '../store';\nimport {\n    UserJobsSearchStart,\n    UserJobsSearchSuccess,\n    UserJobsCancelJobStart,\n    UserJobsCancelJobSuccess\n} from '../actions/userJobs';\nimport { Reducer } from 'react';\nimport { Action } from 'redux';\nimport { ActionType } from '../actions';\n\nfunction userJobsSearchStart(state: StoreState, action: UserJobsSearchStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userJobsView: {\n                ...state.views.userJobsView,\n                searchState: SearchState.SEARCHING\n            }\n        }\n    };\n}\n\nfunction userJobsSearchSuccess(state: StoreState, action: UserJobsSearchSuccess): StoreState {\n    const newState = {\n        ...state,\n        views: {\n            ...state.views,\n            userJobsView: {\n                ...state.views.userJobsView,\n                searchState: SearchState.SEARCHED,\n                rawJobs: action.rawJobs,\n                jobs: action.jobs,\n                jobsFetchedAt: action.jobsFetchedAt,\n                searchExpression: action.searchExpression\n            }\n        }\n    };\n    return newState;\n}\n\nfunction cancelJobStart(state: StoreState, action: UserJobsCancelJobStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userJobsView: {\n                ...state.views.userJobsView\n                // TODO: need cancelation state...\n            }\n        }\n    };\n}\n\nfunction cancelJobSuccess(state: StoreState, action: UserJobsCancelJobSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userJobsView: {\n                ...state.views.userJobsView\n                // TODO: need cancelation state...\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.USER_JOBS_SEARCH_START:\n            return userJobsSearchStart(state, action as UserJobsSearchStart);\n        case ActionType.USER_JOBS_SEARCH_SUCCESS:\n            return userJobsSearchSuccess(state, action as UserJobsSearchSuccess);\n        case ActionType.USER_JOBS_CANCEL_START:\n            return cancelJobStart(state, action as UserJobsCancelJobStart);\n        case ActionType.USER_JOBS_CANCEL_SUCCESS:\n            return cancelJobSuccess(state, action as UserJobsCancelJobSuccess);\n    }\n};\n\nexport default reducer;\n","import { StoreState, ComponentLoadingState } from '../store';\nimport { MainLoadSuccess, Unload } from '../actions/app';\nimport { Reducer } from 'react';\nimport { Action } from 'redux';\nimport { ActionType } from '../actions';\n\nfunction mainLoadSuccess(state: StoreState, action: MainLoadSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            mainView: {\n                ...state.views.mainView,\n                loadingState: ComponentLoadingState.SUCCESS,\n                isAdmin: action.isAdmin\n            }\n        }\n    };\n}\n\nfunction unload(state: StoreState, action: Unload): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            mainView: {\n                loadingState: ComponentLoadingState.NONE,\n                isAdmin: false,\n                error: null\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.MAIN_LOAD_SUCCESS:\n            return mainLoadSuccess(state, action as MainLoadSuccess);\n        case ActionType.MAIN_UNLOAD:\n            return unload(state, action as Unload);\n    }\n};\n\nexport default reducer;\n","import { StoreState, SearchState } from '../store';\nimport { Reducer } from 'react';\nimport { Action } from 'redux';\nimport { ActionType } from '../actions';\nimport { SearchSuccess, SearchStart } from '../actions/publicAppStats';\n\nfunction searchSuccess(state: StoreState, action: SearchSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            publicAppStatsView: {\n                ...state.views.publicAppStatsView,\n                searchState: SearchState.SEARCHED,\n                appStats: action.appStats\n            }\n        }\n    };\n}\n\nfunction searchStart(state: StoreState, action: SearchStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            publicAppStatsView: {\n                ...state.views.publicAppStatsView,\n                searchState: SearchState.SEARCHING\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.PUBLIC_APP_STATS_SEARCH_START:\n            return searchStart(state, action as SearchStart);\n        case ActionType.PUBLIC_APP_STATS_SEARCH_SUCCESS:\n            return searchSuccess(state, action as SearchSuccess);\n    }\n};\n\nexport default reducer;\n","import { StoreState, SearchState } from '../store';\nimport { Reducer } from 'react';\nimport { Action } from 'redux';\nimport { ActionType } from '../actions';\nimport { SearchSuccess, SearchStart } from '../actions/userRunSummary';\n\nfunction searchSuccess(state: StoreState, action: SearchSuccess): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userRunSummaryView: {\n                ...state.views.userRunSummaryView,\n                searchState: SearchState.SEARCHED,\n                userRunSummary: action.userRunSummary\n            }\n        }\n    };\n}\n\nfunction searchStart(state: StoreState, action: SearchStart): StoreState {\n    return {\n        ...state,\n        views: {\n            ...state.views,\n            userRunSummaryView: {\n                ...state.views.userRunSummaryView,\n                searchState: SearchState.SEARCHING\n            }\n        }\n    };\n}\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        case ActionType.USER_RUN_SUMMARY_SEARCH_START:\n            return searchStart(state, action as SearchStart);\n        case ActionType.USER_RUN_SUMMARY_SEARCH_SUCCESS:\n            return searchSuccess(state, action as SearchSuccess);\n    }\n};\n\nexport default reducer;\n","import { makeBaseStoreState } from '@kbase/ui-lib';\nimport reducer from './reducers';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { AppError } from '@kbase/ui-lib';\nimport { BaseStoreState } from '@kbase/ui-lib';\n\nexport enum JobStatus {\n    QUEUED = 'QUEUED',\n    RUNNING = 'RUNNING',\n    FINISHED = 'FINISHED',\n    ERRORED = 'ERRORED',\n    CANCELED = 'CANCELED'\n}\n\nexport interface JobLogLine {\n    lineNumber: number;\n    line: string;\n    isError: boolean;\n}\n\nexport interface JobLog {\n    isLoaded: boolean;\n    lines: Array<JobLogLine>;\n}\n\nexport interface Job {\n    id: string;\n    key: string;\n    narrativeID: number | null;\n    narrativeTitle: string;\n    appID: string;\n    appTitle: string;\n    queuedAt: EpochTime;\n    runAt: EpochTime | null;\n    finishAt: EpochTime | null;\n    queuedElapsed: number;\n    runElapsed: number | null;\n    status: JobStatus;\n    message: string;\n    clientGroups: Array<string>;\n    username: string;\n    log: JobLog;\n}\n\ninterface JobsState {\n    jobs: Array<Job>;\n}\n\nexport type EpochTime = number;\n\nexport type TimeRangePresets = 'lastHour' | 'last48Hours' | 'lastWeek' | 'lastMonth';\n\nexport interface TimeRangePreset {\n    kind: 'preset';\n    preset: TimeRangePresets;\n}\n\nexport interface TimeRangeLiteral {\n    kind: 'literal';\n    start: EpochTime;\n    end: EpochTime;\n}\n\nexport type TimeRange = TimeRangePreset | TimeRangeLiteral;\n\nexport interface TimeRange2 {\n    preset: TimeRangePresets;\n    start: EpochTime | null;\n    end: EpochTime | null;\n}\n\nexport interface JobsSearchExpression {\n    query: string;\n    timeRange: TimeRange;\n    // timeRangeStart: EpochTime;\n    // timeRangeEnd: EpochTime;\n    jobStatus: Array<JobStatus>;\n    forceSearch: boolean;\n}\n\nexport enum SearchState {\n    NONE = 0,\n    SEARCHING,\n    SEARCHED,\n    ERROR\n}\n\nexport enum ComponentLoadingState {\n    NONE = 0,\n    LOADING,\n    SUCCESS,\n    ERROR\n}\n\n// The Store!\n\nexport interface MainView {\n    loadingState: ComponentLoadingState;\n    error: AppError | null;\n    isAdmin: boolean;\n}\n\nexport interface MyJobsView {\n    searchState: SearchState;\n    searchExpression: JobsSearchExpression | null;\n    jobsFetchedAt: EpochTime | null;\n    rawJobs: Array<Job>;\n    jobs: Array<Job>;\n}\n\nexport interface UserJobsView {\n    searchState: SearchState;\n    searchExpression: JobsSearchExpression | null;\n    jobsFetchedAt: EpochTime | null;\n    rawJobs: Array<Job>;\n    jobs: Array<Job>;\n}\n\nexport interface StoreState extends BaseStoreState {\n    // entities: {\n    //     jobs: {\n    //         byId: Map<string, Job>\n    //     }\n    // },\n    views: {\n        mainView: MainView;\n        myJobsView: MyJobsView;\n        userJobsView: UserJobsView;\n        publicAppStatsView: PublicAppStatsView;\n        userRunSummaryView: UserRunSummaryView;\n    };\n}\n\n// App Stats\n\nexport interface PublicAppStatsQuery {\n    query: string;\n}\n\nexport interface PublicAppStatsView {\n    searchState: SearchState;\n    rawAppStats: Array<AppStat>;\n    appStats: Array<AppStat>;\n    query: PublicAppStatsQuery;\n}\n\nexport interface AppStat {\n    appId: string;\n    functionId: string;\n    functionTitle: string;\n    moduleId: string;\n    moduleTitle: string;\n    runCount: number;\n    errorCount: number;\n    successRate: number;\n    averageRunTime: number;\n    averageQueueTime: number;\n    totalRunTime: number;\n}\n\n/**\n * User Run Summary types\n */\n\nexport interface UserRunSummaryQuery {\n    query: string;\n}\n\nexport interface UserRunSummaryStat {\n    username: string;\n    appId: string;\n    moduleId: string;\n    functionId: string;\n    runCount: number;\n}\n\nexport interface UserRunSummaryView {\n    searchState: SearchState;\n    userRunSummary: Array<UserRunSummaryStat>;\n    query: UserRunSummaryQuery;\n}\n\nexport function makeInitialStoreState(): StoreState {\n    const jobs: Array<Job> = [];\n    const baseState = makeBaseStoreState();\n    return {\n        ...baseState,\n        views: {\n            mainView: {\n                loadingState: ComponentLoadingState.NONE,\n                error: null,\n                isAdmin: false\n            },\n            myJobsView: {\n                searchState: SearchState.NONE,\n                searchExpression: null,\n                jobsFetchedAt: null,\n                rawJobs: jobs,\n                jobs\n            },\n            userJobsView: {\n                searchState: SearchState.NONE,\n                searchExpression: null,\n                jobsFetchedAt: null,\n                rawJobs: jobs,\n                jobs\n            },\n            publicAppStatsView: {\n                searchState: SearchState.NONE,\n                rawAppStats: [],\n                appStats: [],\n                query: {\n                    query: ''\n                }\n            },\n            userRunSummaryView: {\n                searchState: SearchState.NONE,\n                userRunSummary: [],\n                query: {\n                    query: ''\n                }\n            }\n        }\n    };\n}\n\nexport function createReduxStore() {\n    return createStore(reducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n}\n","import { Action, Reducer } from 'redux';\nimport { StoreState } from '../store';\n\nimport { baseReducer } from '@kbase/ui-lib';\nimport { BaseStoreState } from '@kbase/ui-lib';\nimport myJobsReducer from './myJobs';\nimport userJobsReducer from './userJobs';\nimport appReducer from './app';\nimport publicAppStatsReducer from './publicAppStats';\nimport userRunSummary from './userRunSummary';\n\n// export default function reducer<StoreState, Action>(state: StoreState, action: Action): StoreState {\n//     return state;\n// }\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    // TODO: we cast state to baseStore state, which should be fine since StoreState extends BaseStoreState.\n    // and then we recast to store state when returning to make ts happy; the actual state object which passes\n    // into and ...\n    // WARNING: this may break if a base reducer (app or auth) does not copy all the state with ...state.\n    // we probably need to use combine reducers?\n    const baseState = baseReducer(state as BaseStoreState, action);\n    if (baseState) {\n        return baseState as StoreState;\n    }\n    return (\n        appReducer(state, action) ||\n        myJobsReducer(state, action) ||\n        userJobsReducer(state, action) ||\n        publicAppStatsReducer(state, action) ||\n        userRunSummary(state, action) ||\n        state\n    );\n};\n\nexport default reducer;\n","import React from 'react';\nimport './style.css';\nimport { JobLog, JobLogLine } from '../../redux/store';\nimport { Table, Tooltip } from 'antd';\n\nexport interface JobLogProps {\n    log: JobLog;\n}\n\ninterface JobLogState {}\n\nexport default class JobLogs extends React.Component<JobLogProps, JobLogState> {\n    renderJobLogLines() {\n        return (\n            <Table\n                dataSource={this.props.log.lines}\n                size=\"small\"\n                // scroll={{ y: 400 }}\n                rowKey={(logLine: JobLogLine) => {\n                    return String(logLine.lineNumber);\n                }}\n                pagination={{ position: 'top', showSizeChanger: true }}\n                rowClassName={(line: JobLogLine) => {\n                    if (line.isError) {\n                        return 'JobLog-errorRow';\n                    } else {\n                        return 'JobLog-normalRow';\n                    }\n                }}\n            >\n                <Table.Column\n                    title=\"Row\"\n                    dataIndex=\"lineNumber\"\n                    key=\"lineNumber\"\n                    width=\"8%\"\n                    render={(lineNumber: number, logLine: JobLogLine) => {\n                        const numberDisplay = new Intl.NumberFormat('en-US', { useGrouping: true }).format(lineNumber);\n                        if (logLine.isError) {\n                            return <span className=\"JobLog-errorText\">{numberDisplay}</span>;\n                        }\n                        return numberDisplay;\n                    }}\n                    sorter={(a: JobLogLine, b: JobLogLine) => {\n                        return a.lineNumber - b.lineNumber;\n                    }}\n                />\n                <Table.Column\n                    title=\"Log line\"\n                    dataIndex=\"line\"\n                    key=\"line\"\n                    width=\"92%\"\n                    render={(line: string, logLine: JobLogLine) => {\n                        let row;\n                        if (logLine.isError) {\n                            row = <span className=\"JobLog-errorText\">{line}</span>;\n                        } else {\n                            row = <span>{line}</span>;\n                        }\n                        return <Tooltip title={line}>{row}</Tooltip>;\n                    }}\n                />\n            </Table>\n        );\n    }\n    render() {\n        return <div className=\"JobLog\">{this.renderJobLogLines()}</div>;\n    }\n}\n","import React from 'react';\nimport { JobLog, JobLogLine } from '../../redux/store';\nimport JobLogComponent from './view';\nimport { Spin } from 'antd';\nimport { NarrativeJobServiceClient } from '@kbase/ui-lib';\n\n// A simple state wrapper for job logs.\n\nexport interface JobLogsStateProps {\n    jobId: string;\n    token: string;\n    njsURL: string;\n}\n\ninterface JobLogsStateState {\n    log: JobLog;\n}\n\nexport default class JobLogsState extends React.Component<JobLogsStateProps, JobLogsStateState> {\n    constructor(props: JobLogsStateProps) {\n        super(props);\n\n        this.state = {\n            log: {\n                isLoaded: false,\n                lines: []\n            }\n        };\n    }\n\n    componentDidMount() {\n        const njsClient = new NarrativeJobServiceClient({\n            token: this.props.token,\n            url: this.props.njsURL,\n            module: 'NarrativeJobService'\n        });\n\n        njsClient\n            .getJobLogs({ job_id: this.props.jobId, skip_lines: 0 })\n            .then(([jobLog]) => {\n                const lines: Array<JobLogLine> = jobLog.lines.map((line, index) => {\n                    return {\n                        lineNumber: index + 1,\n                        line: line.line,\n                        isError: line.is_error ? true : false\n                    };\n                });\n                this.setState({\n                    log: {\n                        isLoaded: true,\n                        lines\n                    }\n                });\n            })\n            .catch((err) => {\n                console.error('boo', err);\n            });\n    }\n\n    render() {\n        if (!this.state.log.isLoaded) {\n            return (\n                <div>\n                    Loading ... <Spin />\n                </div>\n            );\n        }\n        return <JobLogComponent log={this.state.log} />;\n    }\n}\n","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\nimport JobLogState from './state';\nimport { StoreState } from '../../redux/store';\n\nexport interface OwnProps {\n    jobId: string;\n}\n\ninterface StateProps {\n    token: string;\n    njsURL: string;\n}\n\ninterface DispatchProps {}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: {\n            config: {\n                services: {\n                    NarrativeJobService: { url: njsURL }\n                }\n            }\n        }\n    } = state;\n\n    let token;\n    if (!userAuthorization) {\n        throw new Error('Invalid state: token required');\n    } else {\n        token = userAuthorization.token;\n    }\n\n    return { token, njsURL };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(JobLogState);\n","import * as React from 'react';\nimport { Progress, Button } from 'antd';\n\nconst MONITORING_INTERVAL = 10000;\nconst MONITORING_STATUS_INTERVAL = 100;\n\nexport interface MonitorProps {\n    startMonitoring: boolean;\n    onPoll: () => void;\n}\n\nexport interface MonitorState {\n    /** Support for job monitoring */\n    isMonitoring: boolean;\n\n    /** Monitoring progress */\n    monitoringStatusCount: number;\n}\n\nexport default class Monitor extends React.Component<MonitorProps, MonitorState> {\n    monitoringTimer: number | null;\n    monitoringStatusTimer: number | null;\n\n    constructor(props: MonitorProps) {\n        super(props);\n\n        this.monitoringTimer = null;\n        this.monitoringStatusTimer = null;\n        this.state = {\n            isMonitoring: false,\n            monitoringStatusCount: 0\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.startMonitoring) {\n            this.startMonitoring();\n        }\n    }\n\n    componentWillUnmount() {\n        this.stopMonitoring();\n    }\n\n    startMonitoring() {\n        this.monitoringTimer = window.setInterval(() => {\n            this.props.onPoll();\n            this.setState({\n                monitoringStatusCount: 0\n            });\n        }, MONITORING_INTERVAL);\n        this.setState({\n            monitoringStatusCount: 0,\n            isMonitoring: true\n        });\n        this.monitoringStatusTimer = window.setInterval(() => {\n            this.setState({\n                monitoringStatusCount: this.state.monitoringStatusCount + 1\n            });\n        }, MONITORING_STATUS_INTERVAL);\n    }\n\n    stopMonitoring() {\n        if (this.monitoringTimer) {\n            window.clearInterval(this.monitoringTimer);\n        }\n        if (this.monitoringStatusTimer) {\n            window.clearInterval(this.monitoringStatusTimer);\n        }\n        this.setState({\n            monitoringStatusCount: 0,\n            isMonitoring: false\n        });\n    }\n\n    toggleMonitoring() {\n        if (this.state.isMonitoring) {\n            this.stopMonitoring();\n        } else {\n            this.startMonitoring();\n        }\n    }\n\n    render() {\n        let monitoringStatus;\n        let label = 'Start Monitoring';\n        let buttonType: 'default' | 'danger' = 'default';\n        if (this.state.isMonitoring) {\n            label = 'Stop Monitoring';\n            buttonType = 'danger';\n            const progressPercent =\n                (100 * this.state.monitoringStatusCount) / (MONITORING_INTERVAL / MONITORING_STATUS_INTERVAL);\n            monitoringStatus = (\n                <span>\n                    {' '}\n                    <Progress percent={progressPercent} style={{ width: '10em' }} showInfo={false} />\n                </span>\n            );\n        }\n        return (\n            <span>\n                <Button onClick={this.toggleMonitoring.bind(this)} type={buttonType}>\n                    {label}\n                </Button>\n                {monitoringStatus}\n            </span>\n        );\n    }\n}\n","/**\n * A component for browsing through (search, filter, sort) jobs submitted by\n * the current user.\n */\n\n// 3rd party imports\nimport React from 'react';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport { ExpandIconProps } from 'antd/lib/table';\nimport { Table, Form, Input, Button, Tag, Icon, Checkbox, Select, DatePicker, Popconfirm, Tooltip } from 'antd';\nimport moment, { Moment } from 'moment';\n\n// project imports (should be shared lib)\nimport { NiceRelativeTime } from '@kbase/ui-lib';\nimport { NiceTimeDuration } from '@kbase/ui-lib';\n\n// project imports\nimport { Job, JobStatus, JobsSearchExpression, SearchState, TimeRange, TimeRangePresets } from '../../redux/store';\nimport JobLog from '../JobLog';\n\n// file imports\nimport './style.css';\nimport Monitor from '../Monitor';\n\n/*\n    Props and State\n*/\n\ntype JobStatusFilterKey = 'queued' | 'running' | 'canceled' | 'success' | 'error';\n\ninterface JobStatusFilterOption {\n    label: string;\n    value: JobStatusFilterKey;\n}\n\nconst jobStatusFilterOptions: Array<JobStatusFilterOption> = [\n    {\n        label: 'Queued',\n        value: 'queued'\n    },\n    {\n        label: 'Running',\n        value: 'running'\n    },\n    {\n        label: 'Canceled',\n        value: 'canceled'\n    },\n    {\n        label: 'Success',\n        value: 'success'\n    },\n    {\n        label: 'Error',\n        value: 'error'\n    }\n];\n\nfunction jobStatusFilterOptionsToJobStatus(filter: Array<JobStatusFilterKey>): Array<JobStatus> {\n    let jobStatuses: Array<JobStatus> = [];\n    filter.forEach((status) => {\n        switch (status) {\n            case 'queued':\n                jobStatuses.push(JobStatus.QUEUED);\n                break;\n            case 'running':\n                jobStatuses.push(JobStatus.RUNNING);\n                break;\n            case 'canceled':\n                jobStatuses.push(JobStatus.CANCELED);\n                break;\n            case 'success':\n                jobStatuses.push(JobStatus.FINISHED);\n                break;\n            case 'error':\n                jobStatuses.push(JobStatus.ERRORED);\n                break;\n        }\n    });\n    return jobStatuses;\n}\n\nfunction jobStatusLabel(status: JobStatus) {\n    switch (status) {\n        case JobStatus.QUEUED:\n            return (\n                <span>\n                    <Icon type=\"loading\" spin /> Queued\n                </span>\n            );\n        case JobStatus.RUNNING:\n            return (\n                <span>\n                    <Icon type=\"loading-3-quarters\" spin /> Running\n                </span>\n            );\n        case JobStatus.CANCELED:\n            return 'Canceled';\n        case JobStatus.FINISHED:\n            return 'Success';\n        case JobStatus.ERRORED:\n            return 'Errored';\n        default:\n            return 'UNKNOWN (' + status + ')';\n    }\n}\n\nfunction jobColor(status: JobStatus): string {\n    switch (status) {\n        case JobStatus.QUEUED:\n            return 'orange';\n        case JobStatus.RUNNING:\n            return 'blue';\n        case JobStatus.CANCELED:\n            return 'gray';\n        case JobStatus.FINISHED:\n            return 'green';\n        case JobStatus.ERRORED:\n            return 'red';\n        default:\n            return 'UNKNOWN';\n    }\n}\n\nfunction renderJobStatus(status: JobStatus) {\n    let label = jobStatusLabel(status);\n    let color = jobColor(status);\n\n    return <Tag color={color}>{label}</Tag>;\n}\n\nexport interface UserJobsProps {\n    jobs: Array<Job>;\n    searchState: SearchState;\n    search: (searchExpression: JobsSearchExpression) => void;\n    cancelJob: (jobID: string) => void;\n}\n\ninterface UserJobsState {\n    showDates: boolean;\n    currentJobStatusFilter: Array<JobStatusFilterKey>;\n    timeRange: TimeRange;\n}\n\nexport default class UserJobs extends React.Component<UserJobsProps, UserJobsState> {\n    currentQuery?: string;\n\n    static defaultTimeRange: TimeRangePresets = 'lastWeek';\n\n    constructor(props: UserJobsProps) {\n        super(props);\n\n        this.currentQuery = '';\n\n        this.state = {\n            showDates: false,\n            currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error'],\n            timeRange: { kind: 'preset', preset: UserJobs.defaultTimeRange }\n        };\n    }\n\n    componentDidMount() {\n        this.doSearch(true);\n    }\n\n    onChangeTimeRange(value: string) {\n        // TODO: should narrow the string value\n        if (value === 'customRange') {\n            this.setState({\n                showDates: true,\n                timeRange: { kind: 'literal', start: Date.now(), end: Date.now() }\n            });\n            // nothing else to do.\n            return;\n        } else {\n            this.setState(\n                {\n                    showDates: false,\n                    timeRange: { kind: 'preset', preset: value as TimeRangePresets }\n                },\n                () => {\n                    this.doSearch(true);\n                }\n            );\n        }\n    }\n\n    onChangeQuery(event: React.ChangeEvent<HTMLInputElement>) {\n        this.currentQuery = event.target.value;\n    }\n\n    onSubmit(event: React.FormEvent) {\n        event.preventDefault();\n        this.doSearch(true);\n    }\n\n    doSearch(forceSearch: boolean) {\n        if (typeof this.currentQuery === 'undefined') {\n            return;\n        }\n\n        const jobStatusFilter = jobStatusFilterOptionsToJobStatus(this.state.currentJobStatusFilter);\n\n        const searchExpression: JobsSearchExpression = {\n            query: this.currentQuery,\n            timeRange: this.state.timeRange,\n            jobStatus: jobStatusFilter,\n            forceSearch\n        };\n\n        this.props.search(searchExpression);\n        return false;\n    }\n\n    onRangeFromChange(date: Moment) {\n        // handle logic of switching from 'preset' to 'literal'\n        let existingTimeRange = this.state.timeRange;\n        let timeRange: TimeRange;\n        switch (existingTimeRange.kind) {\n            case 'preset':\n                timeRange = {\n                    kind: 'literal',\n                    start: date.valueOf(),\n                    end: Infinity\n                };\n                break;\n            case 'literal':\n                timeRange = {\n                    kind: 'literal',\n                    start: date.valueOf(),\n                    end: existingTimeRange.end\n                };\n                break;\n            default:\n                return;\n        }\n\n        this.setState({\n            timeRange\n        });\n    }\n\n    onRangeToChange(date: Moment) {\n        let existingTimeRange = this.state.timeRange;\n        let timeRange: TimeRange;\n        switch (existingTimeRange.kind) {\n            case 'preset':\n                timeRange = {\n                    kind: 'literal',\n                    start: Infinity,\n                    end: date.valueOf()\n                };\n                break;\n            case 'literal':\n                timeRange = {\n                    kind: 'literal',\n                    start: existingTimeRange.start,\n                    end: date.valueOf()\n                };\n                break;\n            default:\n                return;\n        }\n\n        this.setState({\n            timeRange\n        });\n    }\n\n    renderJobAction(job: Job) {\n        switch (job.status) {\n            case JobStatus.QUEUED:\n            case JobStatus.RUNNING:\n                return (\n                    <Popconfirm\n                        title=\"Cancel this job?\"\n                        onConfirm={() => {\n                            this.props.cancelJob(job.id);\n                        }}\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                    >\n                        <Button icon=\"close\" type=\"danger\" />\n                    </Popconfirm>\n                );\n            default:\n                return;\n        }\n    }\n\n    renderSearchInput() {\n        let dateControls;\n        if (this.state.showDates) {\n            const timeRange = this.state.timeRange;\n            if (timeRange.kind === 'literal') {\n                dateControls = (\n                    <React.Fragment>\n                        <Form.Item label=\"From\">\n                            <DatePicker\n                                showTime={true}\n                                allowClear={false}\n                                value={moment(timeRange.start)}\n                                onChange={this.onRangeFromChange.bind(this)}\n                            />\n                        </Form.Item>\n                        <Form.Item label=\"To\">\n                            <DatePicker\n                                showTime={true}\n                                allowClear={false}\n                                value={moment(timeRange.end)}\n                                onChange={this.onRangeToChange.bind(this)}\n                            />\n                        </Form.Item>\n                    </React.Fragment>\n                );\n            }\n        }\n        return (\n            <Form layout=\"inline\" onSubmit={this.onSubmit.bind(this)}>\n                <Form.Item>\n                    <Input\n                        defaultValue={this.currentQuery}\n                        placeholder=\"Search jobs\"\n                        style={{ width: '15em' }}\n                        onChange={this.onChangeQuery.bind(this)}\n                    />\n                </Form.Item>\n\n                <Form.Item label=\"TimeRange\" />\n                <Form.Item>\n                    <Select\n                        defaultValue={UserJobs.defaultTimeRange}\n                        onChange={this.onChangeTimeRange.bind(this)}\n                        dropdownMatchSelectWidth={true}\n                        style={{ width: '11em' }}\n                    >\n                        <Select.Option value=\"lastHour\">Previous Hour</Select.Option>\n                        <Select.Option value=\"last48Hours\">Previous 48 Hours</Select.Option>\n                        <Select.Option value=\"lastWeek\">Previous Week</Select.Option>\n                        <Select.Option value=\"lastMonth\">Previous Month</Select.Option>\n                        <Select.Option value=\"customRange\">Custom Range</Select.Option>\n                    </Select>\n                </Form.Item>\n                {dateControls}\n\n                <Form.Item>\n                    <Button icon=\"search\" type=\"primary\" htmlType=\"submit\" />\n                </Form.Item>\n\n                <Form.Item>\n                    <Monitor\n                        onPoll={() => {\n                            this.doSearch(true);\n                        }}\n                        startMonitoring={true}\n                    />\n                </Form.Item>\n            </Form>\n        );\n    }\n\n    onFilterChange(filters: Array<CheckboxValueType>) {\n        const filter = filters as Array<JobStatusFilterKey>;\n\n        this.setState(\n            {\n                currentJobStatusFilter: filter\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onChangeJobStatusAny(event: CheckboxChangeEvent) {\n        if (event.target.checked) {\n            this.setState(\n                {\n                    currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error']\n                },\n                () => {\n                    this.doSearch(false);\n                }\n            );\n        }\n    }\n\n    onClickAny() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onClickFinished() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['canceled', 'success', 'error']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onClickActive() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['queued', 'running']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    renderFilterInput() {\n        const options = jobStatusFilterOptions;\n        return (\n            <div>\n                <div>\n                    <span style={{ color: 'gray', fontWeight: 'bold', marginRight: '10px' }}>Filter by Job Status</span>\n                    <Button size=\"small\" onClick={this.onClickAny.bind(this)}>\n                        <i>Any</i>\n                    </Button>{' '}\n                    <Button size=\"small\" onClick={this.onClickActive.bind(this)}>\n                        <i>Active</i>\n                    </Button>{' '}\n                    <Button size=\"small\" onClick={this.onClickFinished.bind(this)} style={{ marginRight: '10px' }}>\n                        <i>Finished</i>\n                    </Button>\n                    <Checkbox.Group\n                        options={options}\n                        onChange={this.onFilterChange.bind(this)}\n                        value={this.state.currentJobStatusFilter}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    renderControlBar() {\n        return (\n            <div className=\"Col\">\n                <div className=\"Row\">{this.renderSearchInput()}</div>\n                <div className=\"Row\" style={{ margin: '10px auto' }}>\n                    {this.renderFilterInput()}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        const loading = this.props.searchState === SearchState.SEARCHING;\n        return (\n            <div>\n                <div>{this.renderControlBar()}</div>\n                <div>\n                    <Table\n                        dataSource={this.props.jobs}\n                        loading={loading}\n                        rowKey={(job: Job) => {\n                            return job.id;\n                        }}\n                        pagination={{ position: 'bottom', showSizeChanger: true }}\n                        size=\"small\"\n                        className=\"UserJobs-table\"\n                        expandIcon={(props: ExpandIconProps<Job>) => {\n                            let icon;\n                            if (props.expanded) {\n                                icon = <Icon type=\"folder-open\" />;\n                            } else {\n                                icon = <Icon type=\"folder\" />;\n                            }\n                            return (\n                                <Button\n                                    type=\"link\"\n                                    className=\"expand-row-icon\"\n                                    onClick={(e) => {\n                                        return props.onExpand(props.record, (e as unknown) as MouseEvent);\n                                    }}\n                                >\n                                    {icon}\n                                </Button>\n                            );\n                        }}\n                        expandedRowRender={(job: Job) => {\n                            return <JobLog jobId={job.id} />;\n                        }}\n                    >\n                        <Table.Column\n                            title=\"User\"\n                            dataIndex=\"username\"\n                            key=\"username\"\n                            width=\"10%\"\n                            render={(username: string) => {\n                                return <a href={`#people/${username}`}>{username}</a>;\n                            }}\n                            sorter={(a: Job, b: Job) => {\n                                return a.username.localeCompare(b.username);\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Narrative\"\n                            dataIndex=\"narrativeTitle\"\n                            key=\"narrativeTitle\"\n                            width=\"17%\"\n                            // style={cellStyle}\n                            render={(title: string, job: Job): any => {\n                                if (!title || !job.narrativeID) {\n                                    return 'n/a';\n                                }\n                                const href = ['/narrative', job.narrativeID].join('/');\n                                return (\n                                    <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n                                        {title}\n                                    </a>\n                                );\n                            }}\n                            sorter={(a: Job, b: Job) => {\n                                if (!a.narrativeTitle) {\n                                    if (!b.narrativeTitle) {\n                                        return 0;\n                                    }\n                                    return -1;\n                                } else {\n                                    if (!b.narrativeTitle) {\n                                        return 1;\n                                    }\n                                    return a.narrativeTitle.localeCompare(b.narrativeTitle);\n                                }\n                            }}\n                        />\n                        <Table.Column\n                            title=\"App\"\n                            dataIndex=\"appTitle\"\n                            key=\"appTitle\"\n                            width=\"18%\"\n                            // style={cellStyle}\n                            render={(title: string, job: Job): any => {\n                                if (!title) {\n                                    return 'n/a';\n                                }\n                                const href = '/#catalog/apps/' + job.appID;\n                                return (\n                                    <Tooltip title={title}>\n                                        <a href={href}>{title}</a>\n                                    </Tooltip>\n                                );\n                            }}\n                            sorter={(a: Job, b: Job) => {\n                                if (!a.appTitle) {\n                                    if (!b.appTitle) {\n                                        return 0;\n                                    }\n                                    return -1;\n                                } else {\n                                    if (!b.appTitle) {\n                                        return 1;\n                                    }\n                                    return a.appTitle.localeCompare(b.appTitle);\n                                }\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Submitted\"\n                            dataIndex=\"queuedAt\"\n                            key=\"queuedAt\"\n                            width=\"8%\"\n                            render={(date: number, job: Job) => {\n                                if (!date) {\n                                    return <span>** empty **</span>;\n                                }\n                                return <NiceRelativeTime time={new Date(date)} />;\n                            }}\n                            defaultSortOrder=\"descend\"\n                            sorter={(a: Job, b: Job) => {\n                                if (a.queuedAt === null) {\n                                    if (b.queuedAt === null) {\n                                        return 0;\n                                    }\n                                    return -1;\n                                } else {\n                                    if (b.queuedAt === null) {\n                                        return 1;\n                                    }\n                                    return a.queuedAt - b.queuedAt;\n                                }\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Queued for\"\n                            dataIndex=\"queuedElapsed\"\n                            key=\"queuedElapsed\"\n                            width=\"8%\"\n                            render={(duration: number) => {\n                                return <NiceTimeDuration duration={duration} precision={2} />;\n                            }}\n                            sorter={(a: Job, b: Job) => {\n                                if (a.queuedElapsed === null) {\n                                    if (b.queuedElapsed === null) {\n                                        return 0;\n                                    }\n                                    return -1;\n                                } else {\n                                    if (b.queuedElapsed === null) {\n                                        return 1;\n                                    }\n                                    return a.queuedElapsed - b.queuedElapsed;\n                                }\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Run for\"\n                            dataIndex=\"runElapsed\"\n                            key=\"runElapsed\"\n                            width=\"8%\"\n                            render={(duration: number | null) => {\n                                if (duration === null) {\n                                    return '-';\n                                }\n                                return <NiceTimeDuration duration={duration} precision={2} />;\n                            }}\n                            sorter={(a: Job, b: Job) => {\n                                if (a.runElapsed === null) {\n                                    if (b.runElapsed === null) {\n                                        return 0;\n                                    }\n                                    return -1;\n                                } else {\n                                    if (b.runElapsed === null) {\n                                        return 1;\n                                    }\n                                    return a.runElapsed - b.runElapsed;\n                                }\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Status\"\n                            dataIndex=\"status\"\n                            key=\"status\"\n                            width=\"8%\"\n                            render={(status: JobStatus) => {\n                                return renderJobStatus(status);\n                            }}\n                            sorter={(a: Job, b: Job) => {\n                                if (a.status === b.status) {\n                                    return 0;\n                                }\n                                if (a.status === JobStatus.QUEUED) {\n                                    return -1;\n                                }\n                                if (a.status === JobStatus.RUNNING) {\n                                    if (b.status === JobStatus.QUEUED) {\n                                        return 1;\n                                    }\n                                    return -1;\n                                }\n                                if (a.status === JobStatus.FINISHED) {\n                                    if (b.status === JobStatus.QUEUED || b.status === JobStatus.RUNNING) {\n                                        return 1;\n                                    }\n                                    return -1;\n                                }\n                                if (a.status === JobStatus.ERRORED) {\n                                    if (b.status === JobStatus.CANCELED) {\n                                        return -1;\n                                    }\n                                    return 1;\n                                }\n                                return 1;\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Server Type\"\n                            dataIndex=\"clientGroups\"\n                            key=\"clientGroups\"\n                            width=\"8%\"\n                            render={(clientGroups: Array<string>) => {\n                                return clientGroups.join(',');\n                            }}\n                            sorter={(a: Job, b: Job) => {\n                                // TODO: sort client groups first...\n                                return a.clientGroups.join(',').localeCompare(b.clientGroups.join(','));\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Cancel\"\n                            dataIndex=\"action\"\n                            key=\"action\"\n                            width=\"5%\"\n                            render={(status: JobStatus, job: Job) => {\n                                return this.renderJobAction(job);\n                            }}\n                        />\n                    </Table>\n                </div>\n            </div>\n        );\n    }\n}\n","import { DynamicServiceClient, DynamicServiceClientParams } from '@kbase/ui-lib';\n\n// Metrics client --\n// TODO: move\n// TODO: use a more dynamic dynamic service client??\n\ninterface MetricsServiceParams extends DynamicServiceClientParams {}\n\ninterface GetAppMetricsParam {\n    epoch_range: [number, number];\n    user_ids: Array<string>;\n}\n\nexport interface JobState {\n    app_id: string;\n    client_groups: Array<string>;\n    user?: string;\n\n    complete: boolean;\n    error: boolean;\n    status: string;\n\n    creation_time: number;\n    exec_start_time?: number;\n    modification_time?: number;\n    finish_time?: number;\n\n    job_id: string;\n    method: string;\n\n    wsid: string;\n    narrative_objNo: number;\n\n    narrative_name: string;\n    workspace_name: string;\n}\n\ninterface GetAppMetricsResult {\n    job_states: Array<JobState>;\n}\n\nexport default class MetricsServiceClient extends DynamicServiceClient {\n    static module: string = 'kb_Metrics';\n\n    async getAppMetrics({ epoch_range, user_ids }: GetAppMetricsParam): Promise<GetAppMetricsResult> {\n        const [result] = await this.callFunc<[GetAppMetricsResult]>('get_app_metrics', [\n            {\n                epoch_range,\n                user_ids\n            }\n        ]);\n\n        return result;\n    }\n}\n","import { JobStatus, Job, EpochTime, TimeRangePresets, TimeRange } from '../store';\nimport { JobState } from '../../lib/MetricsServiceClient';\n\nfunction getJobStatus(job: JobState): JobStatus {\n    // Use most reliable fields first.\n    if (job.complete) {\n        if (job.error) {\n            return JobStatus.ERRORED;\n        } else {\n            if (job.status === 'done') {\n                return JobStatus.FINISHED;\n            }\n            if (job.status.startsWith('canceled')) {\n                return JobStatus.CANCELED;\n            }\n            if (job.status === 'Unknown error') {\n                return JobStatus.ERRORED;\n            }\n            return JobStatus.ERRORED;\n            // TODO: handle this error by creating a new job state - UNKNOWN\n            // console.log('detection error', job);\n            // throw new Error('Cannot detect job state');\n        }\n    } else {\n        if (!job.status || job.status === 'queued') {\n            return JobStatus.QUEUED;\n        }\n        // Various status values indicate the job is running, but\n        // we don't need any more evidence because that is the only possible\n        // other job state.\n        // E.g. 'in-progress', 'running', 'starting job so that it can be finished'\n\n        return JobStatus.RUNNING;\n    }\n\n    // if (job.status === 'Unknown error') {\n    //     return JobStatus.ERRORED;\n    // }\n    // console.log('detection error', job);\n    // throw new Error('Cannot detect job state');\n}\n\nexport function serviceJobToUIJob(job: JobState, username: string): Job {\n    let now = Date.now();\n\n    const status = getJobStatus(job);\n\n    let queuedElapsed;\n    let runElapsed;\n    let finishAt;\n\n    switch (status) {\n        case JobStatus.QUEUED:\n            queuedElapsed = now - job.creation_time;\n            runElapsed = null;\n            finishAt = null;\n            break;\n        case JobStatus.RUNNING:\n            queuedElapsed = job.exec_start_time! - job.creation_time;\n            runElapsed = now - job.exec_start_time!;\n            finishAt = null;\n            break;\n        case JobStatus.FINISHED:\n        case JobStatus.ERRORED:\n        case JobStatus.CANCELED:\n            queuedElapsed = job.exec_start_time! - job.creation_time;\n            runElapsed = job.finish_time! - job.exec_start_time!;\n            finishAt = job.finish_time!;\n            break;\n        default:\n            throw new Error('Invalid job status: ' + job.status);\n    }\n\n    // let finishAt;\n    // if (job.complete) {\n    //     finishAt = job.finish_time || null;\n    // } else {\n    //     finishAt = null;\n    // }\n\n    // if (job.exec_start_time) {\n    //     queuedElapsed = job.exec_start_time - job.creation_time;\n    // } else {\n    //     queuedElapsed = now - job.exec_start_time!;\n    // }\n\n    // if (finishAt) {\n    //     runElapsed = finishAt - job.exec_start_time!;\n    // } else if (job.exec_start_time) {\n    //     runElapsed = now - job.exec_start_time;\n    // } else {\n    //     runElapsed = null;\n    // }\n\n    let narrativeID;\n    if (job.wsid) {\n        narrativeID = parseInt(job.wsid, 10);\n    } else {\n        narrativeID = null;\n    }\n\n    return {\n        key: job.job_id,\n        id: job.job_id,\n        status,\n        message: job.status,\n        appID: job.app_id,\n        appTitle: job.app_id,\n        narrativeID,\n        narrativeTitle: job.narrative_name,\n        queuedAt: job.creation_time,\n        runAt: job.exec_start_time! || null,\n        finishAt,\n        queuedElapsed,\n        runElapsed,\n        clientGroups: job.client_groups,\n        // TODO: a more affirmative method of providing current username\n        // for querying for own...?\n        username: job.user || username,\n        log: {\n            isLoaded: false,\n            lines: []\n        }\n    };\n}\n\nexport function compareTimeRange(job: Job, timeRangeStart: EpochTime, timeRangeEnd: EpochTime) {\n    // if any of the timestamps fall within the time range, we are good\n    if (\n        [job.queuedAt, job.runAt, job.finishAt].some((eventTime) => {\n            if (!eventTime) {\n                return false;\n            }\n            return eventTime > timeRangeStart && eventTime < timeRangeEnd;\n        })\n    ) {\n        return true;\n    }\n\n    // If the timestamps span the time range, we are also good.\n    if (!job.queuedAt) {\n        return false;\n    }\n    // if start past the end time, no match.\n    if (job.queuedAt > timeRangeEnd) {\n        return false;\n    }\n    // If start after or on start time, then, we have a match.\n    if (job.queuedAt >= timeRangeStart) {\n        return true;\n    }\n\n    // Otherwise, the job started (queued) before out time range, but\n    // there is still hope, maybe it is still queued or started after the\n    // start date.\n    if (!job.runAt) {\n        // Not run yet, a match.\n        return true;\n    }\n    // Otherwise, if it starts after the range start, a match\n    if (job.runAt >= timeRangeStart) {\n        return true;\n    }\n\n    // Otherwise, yes, there is still hope...\n\n    // If not finished yet, a match.\n    if (!job.finishAt) {\n        return true;\n    }\n\n    // Otherwise, if it finished after the range start, a match\n    if (job.finishAt >= timeRangeStart) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function compareStatus(job: Job, jobStatus?: Array<JobStatus>) {\n    if (!jobStatus) {\n        return true;\n    }\n    return jobStatus.some((status) => {\n        return job.status === status;\n    });\n}\n\nexport function calcAverage(total: number, count: number) {\n    if (total) {\n        if (count) {\n            return total / count;\n        } else {\n            return null;\n        }\n    } else {\n        if (count) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n}\n\nexport function calcRate(part: number, whole: number) {\n    if (part) {\n        if (whole) {\n            return part / whole;\n        } else {\n            return null;\n        }\n    } else {\n        if (whole) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n}\n\nexport function getTimeRange(preset: TimeRangePresets): [EpochTime, EpochTime] {\n    const hourInMilliseconds = 1000 * 60 * 60;\n    const endDate = new Date().getTime();\n    switch (preset) {\n        case 'lastHour':\n            return [endDate - hourInMilliseconds, endDate];\n        case 'last48Hours':\n            return [endDate - hourInMilliseconds * 24 * 2, endDate];\n        case 'lastWeek':\n            return [endDate - hourInMilliseconds * 24 * 7, endDate];\n        case 'lastMonth':\n            return [endDate - hourInMilliseconds * 24 * 30, endDate];\n    }\n}\n\nexport function extractTimeRange(timeRange: TimeRange): [EpochTime, EpochTime] {\n    switch (timeRange.kind) {\n        case 'preset':\n            return getTimeRange(timeRange.preset);\n        case 'literal':\n            return [timeRange.start, timeRange.end];\n        default:\n            throw new Error('Invalid time range kind value (should be impossible');\n    }\n}\n","import { Job, JobsSearchExpression, EpochTime, StoreState } from '../store';\nimport MetricsServiceClient from '../../lib/MetricsServiceClient';\nimport { serviceJobToUIJob, compareTimeRange, compareStatus, extractTimeRange } from './utils';\nimport { Action } from 'redux';\nimport { ActionType } from '.';\nimport { AppError, NarrativeJobServiceClient } from '@kbase/ui-lib';\nimport { ThunkDispatch } from 'redux-thunk';\n\nasync function fetchAllUserJobs(\n    token: string,\n    serviceWizardUrl: string,\n    from: number,\n    to: number\n): Promise<Array<Job>> {\n    const client = new MetricsServiceClient({\n        url: serviceWizardUrl,\n        token: token\n    });\n    return client\n        .getAppMetrics({\n            epoch_range: [from, to],\n            user_ids: []\n        })\n        .then((metrics) => {\n            const converted = metrics.job_states.map((jobState) => {\n                return serviceJobToUIJob(jobState, 'UNKNOWN');\n            });\n            return converted;\n            // return fakeJobs();\n        });\n}\n\nexport interface UserJobsSearch extends Action<ActionType.USER_JOBS_SEARCH> {\n    type: ActionType.USER_JOBS_SEARCH;\n    searchExpression: JobsSearchExpression;\n}\n\nexport interface UserJobsSearchStart extends Action<ActionType.USER_JOBS_SEARCH_START> {\n    type: ActionType.USER_JOBS_SEARCH_START;\n}\n\nexport interface UserJobsSearchSuccess extends Action<ActionType.USER_JOBS_SEARCH_SUCCESS> {\n    type: ActionType.USER_JOBS_SEARCH_SUCCESS;\n    searchExpression: JobsSearchExpression;\n    rawJobs: Array<Job>;\n    jobs: Array<Job>;\n    jobsFetchedAt: EpochTime;\n}\n\nexport interface UserJobsSearchError extends Action<ActionType.USER_JOBS_SEARCH_ERROR> {\n    type: ActionType.USER_JOBS_SEARCH_ERROR;\n    error: AppError;\n}\n\nexport function userJobsSearchStart(): UserJobsSearchStart {\n    return {\n        type: ActionType.USER_JOBS_SEARCH_START\n    };\n}\n\nexport function userJobsSearchSuccess(\n    rawJobs: Array<Job>,\n    jobs: Array<Job>,\n    jobsFetchedAt: EpochTime,\n    searchExpression: JobsSearchExpression\n): UserJobsSearchSuccess {\n    return {\n        type: ActionType.USER_JOBS_SEARCH_SUCCESS,\n        searchExpression,\n        rawJobs,\n        jobs,\n        jobsFetchedAt\n    };\n}\n\nexport function userJobsSearchError(error: AppError): UserJobsSearchError {\n    return {\n        type: ActionType.USER_JOBS_SEARCH_ERROR,\n        error\n    };\n}\n\nexport function userJobsSearch(searchExpression: JobsSearchExpression) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(userJobsSearchStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url: serviceWizardURL }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                userJobsSearchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        let {\n            views: {\n                userJobsView: { jobsFetchedAt, rawJobs }\n            }\n        } = getState();\n\n        const searchTerms = searchExpression.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n\n        const [timeRangeStart, timeRangeEnd] = extractTimeRange(searchExpression.timeRange);\n\n        if (!jobsFetchedAt || searchExpression.forceSearch) {\n            rawJobs = await fetchAllUserJobs(userAuthorization.token, serviceWizardURL, timeRangeStart, timeRangeEnd);\n            jobsFetchedAt = new Date().getTime();\n            // UPDATE: update the raw jobs\n        }\n\n        const newJobs = rawJobs.filter((job) => {\n            return (\n                searchTerms.every((term) => {\n                    return term.test(job.appTitle) || term.test(job.narrativeTitle) || term.test(job.id);\n                }) &&\n                compareTimeRange(\n                    job,\n                    // searchExpression.timeRange,\n                    timeRangeStart,\n                    timeRangeEnd\n                ) &&\n                compareStatus(job, searchExpression.jobStatus)\n            );\n        });\n\n        dispatch(userJobsSearchSuccess(rawJobs, newJobs, jobsFetchedAt, searchExpression));\n    };\n}\n\nexport function userJobsRefreshSearch() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(userJobsSearchStart());\n\n        const {\n            auth: { userAuthorization }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                userJobsSearchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        const {\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url: serviceWizardURL }\n                    }\n                }\n            },\n            views: {\n                userJobsView: { searchExpression }\n            }\n        } = getState();\n\n        if (!searchExpression) {\n            userJobsSearchError({\n                message: 'No search expression',\n                code: 'nosearchexpression'\n            });\n            return;\n        }\n\n        const searchTerms = searchExpression.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n\n        const [timeRangeStart, timeRangeEnd] = extractTimeRange(searchExpression.timeRange);\n\n        const rawJobs = await fetchAllUserJobs(userAuthorization.token, serviceWizardURL, timeRangeStart, timeRangeEnd);\n\n        const newJobs = rawJobs.filter((job) => {\n            return (\n                searchTerms.every((term) => {\n                    return term.test(job.appTitle) || term.test(job.narrativeTitle);\n                }) &&\n                compareTimeRange(\n                    job,\n                    // searchExpression.timeRange,\n                    timeRangeStart,\n                    timeRangeEnd\n                ) &&\n                compareStatus(job, searchExpression.jobStatus)\n            );\n        });\n\n        dispatch(userJobsSearchSuccess(rawJobs, newJobs, Date.now(), searchExpression));\n    };\n}\n\n// user job cancellation...\n// Job Cancelation\n\nexport interface UserJobsCancelJob {\n    type: ActionType.USER_JOBS_CANCEL;\n    jobID: string;\n}\n\nexport interface UserJobsCancelJobStart {\n    type: ActionType.USER_JOBS_CANCEL_START;\n}\n\nexport interface UserJobsCancelJobSuccess {\n    type: ActionType.USER_JOBS_CANCEL_SUCCESS;\n}\n\nexport interface UserJobsCancelJobError {\n    type: ActionType.USER_JOBS_CANCEL_ERROR;\n    error: AppError;\n}\n\nexport function userJobsCancelJobStart(): UserJobsCancelJobStart {\n    return {\n        type: ActionType.USER_JOBS_CANCEL_START\n    };\n}\n\nexport function userJobsCancelJobSuccess(): UserJobsCancelJobSuccess {\n    return {\n        type: ActionType.USER_JOBS_CANCEL_SUCCESS\n    };\n}\n\nexport function userJobsCancelJobError(error: AppError): UserJobsCancelJobError {\n    return {\n        type: ActionType.USER_JOBS_CANCEL_ERROR,\n        error\n    };\n}\n\nexport function userJobsCancelJob(jobID: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(userJobsCancelJobStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        NarrativeJobService: { url: njsURL }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                userJobsCancelJobError({\n                    message: 'no authorization',\n                    code: 'no-authorization'\n                })\n            );\n            return;\n        }\n\n        // do it\n        const njsClient = new NarrativeJobServiceClient({\n            url: njsURL,\n            token: userAuthorization.token,\n            module: 'NarrativeJobService'\n        });\n        njsClient\n            .cancelJob({ job_id: jobID })\n            .then(() => {\n                dispatch(userJobsCancelJobSuccess());\n                dispatch(userJobsRefreshSearch());\n            })\n            .catch((err) => {\n                console.error('error canceling job', err);\n                dispatch(\n                    userJobsCancelJobError({\n                        message: 'error canceling job: ' + err.message,\n                        code: 'error-canceling'\n                    })\n                );\n            });\n    };\n}\n","/**\n * A redux adapter container for the User Jobs view component.\n *\n * For those not familiar with redux-based apps: Redux exists as a parallel system to the react component hierarchy. The react \"store\" (database)\n * is established in the top level `App` component. A component can access the store data and the store actions through what is commonly\n * referred to as a \"container\" module. We prefer to call them \"redux adapters\", to be more specific.\n *\n * A redux adapter is a separate component file. It essentially creates a component (via the `connect` function) which \"wraps\" the underlying\n * view component. It extracts the data and action generators and supplies them to the view component.\n */\n\n/**\n * Imports, ignore\n */\n// 3rd party\nimport { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\n\n// project\nimport UserJobs from './view';\nimport { StoreState, Job, JobsSearchExpression, SearchState } from '../../redux/store';\nimport { userJobsSearch, userJobsCancelJob } from '../../redux/actions/userJobs';\n\n/**\n * The props which this redux adapter requires in it's invocation.\n *\n * Current empty\n */\nexport interface OwnProps {}\n\n/**\n * The props this redux adapter extracts from the store and injects in\n * its call to the child component, UserJobs.\n *\n * @note These properties must exist in UserJobs.\n */\ninterface StateProps {\n    jobs: Array<Job>;\n    searchState: SearchState;\n    // searchExpression: JobsSearchExpression;\n}\n\n/**\n * The props this redux adapter extracts from actions and injects into\n * its call to the child component, UserJobs.\n *\n * @note These properties must exist in UserJobs.\n */\ninterface DispatchProps {\n    search: (searchExpression: JobsSearchExpression) => void;\n    cancelJob: (jobID: string) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        views: {\n            userJobsView: { searchState, jobs }\n        }\n    } = state;\n    return { jobs, searchState };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        search: (searchExpression: JobsSearchExpression) => {\n            dispatch(userJobsSearch(searchExpression) as any);\n        },\n        cancelJob: (jobID: string) => {\n            dispatch(userJobsCancelJob(jobID) as any);\n        }\n    };\n}\n\nconst UserJobsReduxAdapter = connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserJobs);\n\nexport default UserJobsReduxAdapter;\n","/**\n * A component for browsing through (search, filter, sort) jobs submitted by\n * the current user.\n */\n\n/** imports */\n// 3rd party imports\nimport React from 'react';\nimport { Table, Form, Input, Button, Tag, Icon, Checkbox, Select, DatePicker, Alert, Popconfirm, Tooltip } from 'antd';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport moment, { Moment } from 'moment';\n\n// project imports\nimport { Job, JobStatus, JobsSearchExpression, SearchState, TimeRangePresets, TimeRange } from '../../redux/store';\n\n// kbase imports (or should be kbase imports)\nimport { NiceRelativeTime } from '@kbase/ui-lib';\nimport { NiceTimeDuration } from '@kbase/ui-lib';\n\n// project imoprts\nimport JobLog from '../JobLog';\nimport { ExpandIconProps } from 'antd/lib/table';\n\n// file imports\nimport './style.css';\nimport Monitor from '../Monitor';\n\n/**\n * This version of the job status defines the set of strings that may be used\n * in the ui controls.\n *\n */\ntype JobStatusFilterKey = 'queued' | 'running' | 'canceled' | 'success' | 'error';\n\n/**\n * This interface describes a single option for the available job status filter options.\n *\n * Job status filter options are used to populate the checkboxgroup.\n * Note that the value of each option is a job status filter key.\n */\ninterface JobStatusFilterOption {\n    label: string;\n    value: JobStatusFilterKey;\n}\n\n/**\n * A set of job status filter options used to populate and control a set of checkboxes provided\n * for the user to be able to filter jobs according to their job status.\n *\n * Note that this is a set of options because the antd checkboxgroup simplifies a set of checkboxes\n * through sets of options.\n */\nconst jobStatusFilterOptions: Array<JobStatusFilterOption> = [\n    {\n        label: 'Queued',\n        value: 'queued'\n    },\n    {\n        label: 'Running',\n        value: 'running'\n    },\n    {\n        label: 'Canceled',\n        value: 'canceled'\n    },\n    {\n        label: 'Success',\n        value: 'success'\n    },\n    {\n        label: 'Error',\n        value: 'error'\n    }\n];\n\n/**\n * Translates an array of job status filter keys, as provided by the ui job status\n * filter checkboxes, to an array of job statuses suitable for passing to the job\n * status search.\n *\n * @param filter - an array of job status filter keys\n *\n * @note Since the switch is over an enum, we don't have to worry about the default case\n *\n * @returns an array of job statuses\n */\nfunction jobStatusFilterOptionsToJobStatus(filter: Array<JobStatusFilterKey>): Array<JobStatus> {\n    let jobStatuses: Array<JobStatus> = [];\n    filter.forEach((status) => {\n        switch (status) {\n            case 'queued':\n                jobStatuses.push(JobStatus.QUEUED);\n                break;\n            case 'running':\n                jobStatuses.push(JobStatus.RUNNING);\n                break;\n            case 'canceled':\n                jobStatuses.push(JobStatus.CANCELED);\n                break;\n            case 'success':\n                jobStatuses.push(JobStatus.FINISHED);\n                break;\n            case 'error':\n                jobStatuses.push(JobStatus.ERRORED);\n                break;\n        }\n    });\n    return jobStatuses;\n}\n\n/**\n * Translates a job status value to a label, with optional icon, suitable for\n * display as the child of the job status tag.\n *\n * @param status - the status of the job\n *\n * @note Since the switch is over an enum, we don't have to worry about the default case\n */\nfunction jobStatusLabel(status: JobStatus) {\n    switch (status) {\n        case JobStatus.QUEUED:\n            return (\n                <span>\n                    <Icon type=\"loading\" spin /> Queued\n                </span>\n            );\n        case JobStatus.RUNNING:\n            return (\n                <span>\n                    <Icon type=\"loading-3-quarters\" spin /> Running\n                </span>\n            );\n        case JobStatus.CANCELED:\n            return 'Canceled';\n        case JobStatus.FINISHED:\n            return 'Success';\n        case JobStatus.ERRORED:\n            return 'Errored';\n    }\n}\n\n/**\n * Translates a job status value to a color value acceptable for the color\n * prop for the job status tag.\n *\n * @param status - the status of the job\n */\nfunction jobColor(status: JobStatus): string {\n    switch (status) {\n        case JobStatus.QUEUED:\n            return 'orange';\n        case JobStatus.RUNNING:\n            return 'blue';\n        case JobStatus.CANCELED:\n            return 'gray';\n        case JobStatus.FINISHED:\n            return 'green';\n        case JobStatus.ERRORED:\n            return 'red';\n    }\n}\n\n/**\n * Renders the job status tag for usage in the job status column.\n */\nfunction renderJobStatus(status: JobStatus) {\n    let label = jobStatusLabel(status);\n    let color = jobColor(status);\n\n    return <Tag color={color}>{label}</Tag>;\n}\n\n/**\n * Semantic aliasing of for epoch time in milliseconds, as produced\n * by Date.now(), new Date().getTime(), etc.\n *\n * @todo move to a common location\n */\ntype EpochTime = number;\n\n/**\n * Props for the MyJobs component\n */\nexport interface MyJobsProps {\n    /** The list of jobs to display */\n    jobs: Array<Job>;\n    /** The current search state, used to control the primary display (none, searching, searched, error) */\n    searchState: SearchState;\n    /** Triggers a redux action to search of the user's jobs according to the given search expression\n     * @remarks Since at present the service used to fetch the jobs can suffer performance issues, the\n     * default search action does not fetch search results each time (rather ??).\n     * @todo when job search is more performant, this function may be removed and redirected to the\n     * search function.\n     */\n    search: (searchExpression: JobsSearchExpression) => void;\n    /** Triggers a redux action to cancel the indicated job */\n    cancelJob: (jobID: string) => void;\n}\n\n/**\n * State for the MyJobs component\n */\ninterface MyJobsState {\n    /** Flag to show the date controls */\n    showDates: boolean;\n    /** Contains the current selection of job statuses in the checkbox control */\n    currentJobStatusFilter: Array<JobStatusFilterKey>;\n    /** Contains the initial timestamp (ms epoch time) for time range */\n    // rangeFrom: EpochTime;\n    // /** The ending timestamp (ms epoch time) for the time range */\n    // rangeTo: EpochTime;\n    timeRange: TimeRange;\n}\n\n/**\n * A View Component for browsing through the current user's jobs.\n *\n * @remarks\n * This component is really just a tabular view into a user's jobs. It provides\n * support for free text searching, filtering by job state, and date ranges.\n *\n */\nexport default class MyJobs extends React.Component<MyJobsProps, MyJobsState> {\n    currentQuery?: string;\n\n    static defaultTimeRangePreset: TimeRangePresets = 'lastWeek';\n\n    constructor(props: MyJobsProps) {\n        super(props);\n\n        this.currentQuery = '';\n\n        this.state = {\n            showDates: false,\n            currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error'],\n            timeRange: { kind: 'preset', preset: MyJobs.defaultTimeRangePreset }\n        };\n    }\n\n    componentDidMount() {\n        this.doSearch(true);\n    }\n\n    onChangeTimeRange(value: string) {\n        // TODO: should narrow the string value\n        if (value === 'customRange') {\n            this.setState({\n                showDates: true,\n                timeRange: { kind: 'literal', start: Date.now(), end: Date.now() }\n            });\n            // nothing else to do.\n            return;\n        } else {\n            this.setState(\n                {\n                    showDates: false,\n                    timeRange: { kind: 'preset', preset: value as TimeRangePresets }\n                },\n                () => {\n                    this.doSearch(true);\n                }\n            );\n        }\n    }\n\n    onChangeQuery(event: React.ChangeEvent<HTMLInputElement>) {\n        this.currentQuery = event.target.value;\n    }\n\n    onSubmit(event: React.FormEvent) {\n        event.preventDefault();\n        this.doSearch(true);\n    }\n\n    doSearch(forceSearch: boolean) {\n        if (typeof this.currentQuery === 'undefined') {\n            return;\n        }\n\n        const jobStatusFilter = jobStatusFilterOptionsToJobStatus(this.state.currentJobStatusFilter);\n\n        const searchExpression: JobsSearchExpression = {\n            query: this.currentQuery,\n            timeRange: this.state.timeRange,\n            jobStatus: jobStatusFilter,\n            forceSearch\n        };\n\n        this.props.search(searchExpression);\n        return false;\n    }\n\n    onRangeFromChange(date: Moment) {\n        // handle logic of switching from 'preset' to 'literal'\n        let existingTimeRange = this.state.timeRange;\n        let timeRange: TimeRange;\n        switch (existingTimeRange.kind) {\n            case 'preset':\n                timeRange = {\n                    kind: 'literal',\n                    start: date.valueOf(),\n                    end: Infinity\n                };\n                break;\n            case 'literal':\n                timeRange = {\n                    kind: 'literal',\n                    start: date.valueOf(),\n                    end: existingTimeRange.end\n                };\n                break;\n            default:\n                return;\n        }\n\n        this.setState({\n            timeRange\n        });\n    }\n\n    onRangeToChange(date: Moment) {\n        let existingTimeRange = this.state.timeRange;\n        let timeRange: TimeRange;\n        switch (existingTimeRange.kind) {\n            case 'preset':\n                timeRange = {\n                    kind: 'literal',\n                    start: Infinity,\n                    end: date.valueOf()\n                };\n                break;\n            case 'literal':\n                timeRange = {\n                    kind: 'literal',\n                    start: existingTimeRange.start,\n                    end: date.valueOf()\n                };\n                break;\n            default:\n                return;\n        }\n\n        this.setState({\n            timeRange\n        });\n    }\n\n    renderSearchInput() {\n        let dateControls;\n        if (this.state.showDates) {\n            const timeRange = this.state.timeRange;\n            if (timeRange.kind === 'literal') {\n                dateControls = (\n                    <React.Fragment>\n                        <Form.Item label=\"From\">\n                            <DatePicker\n                                showTime={true}\n                                allowClear={false}\n                                value={moment(timeRange.start)}\n                                onChange={this.onRangeFromChange.bind(this)}\n                            />\n                        </Form.Item>\n                        <Form.Item label=\"To\">\n                            <DatePicker\n                                showTime={true}\n                                allowClear={false}\n                                value={moment(timeRange.end)}\n                                onChange={this.onRangeToChange.bind(this)}\n                            />\n                        </Form.Item>\n                    </React.Fragment>\n                );\n            }\n        }\n        return (\n            <Form layout=\"inline\" onSubmit={this.onSubmit.bind(this)}>\n                <Form.Item>\n                    <Input\n                        defaultValue={this.currentQuery}\n                        placeholder=\"Search jobs\"\n                        style={{ width: '15em' }}\n                        onChange={this.onChangeQuery.bind(this)}\n                    />\n                </Form.Item>\n\n                <Form.Item label=\"TimeRange\" />\n                <Form.Item>\n                    <Select\n                        defaultValue={MyJobs.defaultTimeRangePreset}\n                        onChange={this.onChangeTimeRange.bind(this)}\n                        dropdownMatchSelectWidth={true}\n                        style={{ width: '11em' }}\n                    >\n                        <Select.Option value=\"lastHour\">Previous Hour</Select.Option>\n                        <Select.Option value=\"last48Hours\">Previous 48 Hours</Select.Option>\n                        <Select.Option value=\"lastWeek\">Previous Week</Select.Option>\n                        <Select.Option value=\"lastMonth\">Previous Month</Select.Option>\n                        <Select.Option value=\"customRange\">Custom Range</Select.Option>\n                    </Select>\n                </Form.Item>\n                {dateControls}\n\n                <Form.Item>\n                    <Button icon=\"search\" type=\"primary\" htmlType=\"submit\" />\n                </Form.Item>\n\n                <Form.Item>\n                    <Monitor\n                        onPoll={() => {\n                            this.doSearch(true);\n                        }}\n                        startMonitoring={true}\n                    />\n                </Form.Item>\n            </Form>\n        );\n    }\n\n    onFilterChange(filters: Array<CheckboxValueType>) {\n        const filter = filters as Array<JobStatusFilterKey>;\n        this.setState(\n            {\n                currentJobStatusFilter: filter\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onChangeJobStatusAny(event: CheckboxChangeEvent) {\n        if (event.target.checked) {\n            this.setState(\n                {\n                    currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error']\n                },\n                () => {\n                    this.doSearch(false);\n                }\n            );\n        }\n    }\n\n    onClickAny() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['queued', 'running', 'canceled', 'success', 'error']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onClickFinished() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['canceled', 'success', 'error']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    onClickActive() {\n        this.setState(\n            {\n                currentJobStatusFilter: ['queued', 'running']\n            },\n            () => {\n                this.doSearch(false);\n            }\n        );\n    }\n\n    renderFilterInput() {\n        const options = jobStatusFilterOptions;\n        return (\n            <div>\n                <div>\n                    <span style={{ color: 'gray', fontWeight: 'bold', marginRight: '10px' }}>Filter by Job Status</span>\n                    <Button size=\"small\" onClick={this.onClickAny.bind(this)} data-k-b-testhook-button=\"any\">\n                        <i>Any</i>\n                    </Button>{' '}\n                    <Button size=\"small\" onClick={this.onClickActive.bind(this)} data-k-b-testhook-button=\"active\">\n                        <i>Active</i>\n                    </Button>{' '}\n                    <Button\n                        size=\"small\"\n                        onClick={this.onClickFinished.bind(this)}\n                        style={{ marginRight: '10px' }}\n                        data-k-b-testhook-button=\"finished\"\n                    >\n                        <i>Finished</i>\n                    </Button>\n                    <Checkbox.Group\n                        options={options}\n                        onChange={this.onFilterChange.bind(this)}\n                        value={this.state.currentJobStatusFilter}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    renderControlBar() {\n        return (\n            <div className=\"Col\">\n                <div className=\"Row\">{this.renderSearchInput()}</div>\n                <div className=\"Row\" style={{ margin: '10px auto' }}>\n                    {this.renderFilterInput()}\n                </div>\n            </div>\n        );\n    }\n\n    onJobCancel(job: Job) {\n        this.props.cancelJob(job.id);\n    }\n\n    renderJobAction(job: Job) {\n        switch (job.status) {\n            case JobStatus.QUEUED:\n            case JobStatus.RUNNING:\n                return (\n                    <Popconfirm\n                        title=\"Cancel this job?\"\n                        onConfirm={() => {\n                            this.onJobCancel(job);\n                        }}\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                    >\n                        <Button\n                            icon=\"close\"\n                            type=\"danger\"\n                            // onClick={() => {\n                            //     this.onJobCancel(job);\n                            // }}\n                            data-k-b-testhook-button=\"cancel\"\n                        />\n                    </Popconfirm>\n                );\n            default:\n                return;\n        }\n    }\n\n    render() {\n        const loading = this.props.searchState === SearchState.SEARCHING;\n        return (\n            <div data-k-b-testhook-component=\"MyJobs\">\n                <div>{this.renderControlBar()}</div>\n                <div>\n                    <Table\n                        size=\"small\"\n                        className=\"MyJobs-table\"\n                        dataSource={this.props.jobs}\n                        loading={loading}\n                        rowKey={(job: Job) => {\n                            return job.id;\n                        }}\n                        pagination={{ position: 'bottom', showSizeChanger: true }}\n                        expandIcon={(props: ExpandIconProps<Job>) => {\n                            let icon;\n                            if (props.expanded) {\n                                icon = <Icon type=\"folder-open\" />;\n                            } else {\n                                icon = <Icon type=\"folder\" />;\n                            }\n                            return (\n                                <Button\n                                    type=\"link\"\n                                    className=\"expand-row-icon\"\n                                    onClick={(e) => {\n                                        return props.onExpand(props.record, (e as unknown) as MouseEvent);\n                                    }}\n                                >\n                                    {icon}\n                                </Button>\n                            );\n                        }}\n                        expandedRowRender={(job: Job) => {\n                            if (job.status === JobStatus.QUEUED) {\n                                const message = 'Sorry, job log is not available until the job starts running.';\n                                return <Alert type=\"warning\" message={message} />;\n                            }\n                            return <JobLog jobId={job.id} />;\n                        }}\n                    >\n                        <Table.Column\n                            title=\"Narrative\"\n                            dataIndex=\"narrativeTitle\"\n                            key=\"narrativeTitle\"\n                            width=\"17%\"\n                            render={(title: string, job: Job): any => {\n                                if (!title || !job.narrativeID) {\n                                    return 'n/a';\n                                }\n                                return (\n                                    <Tooltip title={title}>\n                                        <a\n                                            href={`/narrative/${job.narrativeID}`}\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                        >\n                                            {title}\n                                        </a>\n                                    </Tooltip>\n                                );\n                            }}\n                            sorter={(a: Job, b: Job) => {\n                                return a.narrativeTitle.localeCompare(b.narrativeTitle);\n                            }}\n                        />\n                        <Table.Column\n                            title=\"App\"\n                            dataIndex=\"appTitle\"\n                            key=\"appTitle\"\n                            width=\"18%\"\n                            render={(title: string, job: Job): any => {\n                                if (!title) {\n                                    return 'n/a';\n                                }\n                                const href = '/#catalog/apps/' + job.appID;\n                                return (\n                                    <Tooltip title={title}>\n                                        <a href={href}>{title}</a>\n                                    </Tooltip>\n                                );\n                            }}\n                            sorter={(a: Job, b: Job) => {\n                                return a.appTitle.localeCompare(b.appTitle);\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Submitted\"\n                            dataIndex=\"queuedAt\"\n                            key=\"queuedAt\"\n                            width=\"10%\"\n                            render={(date: number, job: Job) => {\n                                if (!date) {\n                                    return <span>** empty **</span>;\n                                }\n                                return <NiceRelativeTime time={new Date(date)} />;\n                            }}\n                            defaultSortOrder=\"descend\"\n                            sorter={(a: Job, b: Job) => {\n                                if (a.queuedAt === null) {\n                                    if (b.queuedAt === null) {\n                                        return 0;\n                                    }\n                                    return -1;\n                                } else {\n                                    if (b.queuedAt === null) {\n                                        return 1;\n                                    }\n                                    return a.queuedAt - b.queuedAt;\n                                }\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Queued for\"\n                            dataIndex=\"queuedElapsed\"\n                            key=\"queuedElapsed\"\n                            width=\"10%\"\n                            render={(duration: number) => {\n                                return <NiceTimeDuration duration={duration} precision={2} />;\n                            }}\n                            sorter={(a: Job, b: Job) => {\n                                if (a.queuedElapsed === null) {\n                                    if (b.queuedElapsed === null) {\n                                        return 0;\n                                    }\n                                    return -1;\n                                } else {\n                                    if (b.queuedElapsed === null) {\n                                        return 1;\n                                    }\n                                    return a.queuedElapsed - b.queuedElapsed;\n                                }\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Run for\"\n                            dataIndex=\"runElapsed\"\n                            key=\"runElapsed\"\n                            width=\"10%\"\n                            render={(duration: number | null) => {\n                                if (duration === null) {\n                                    return '-';\n                                }\n                                return <NiceTimeDuration duration={duration} precision={2} />;\n                            }}\n                            sorter={(a: Job, b: Job) => {\n                                if (a.runElapsed === null) {\n                                    if (b.runElapsed === null) {\n                                        return 0;\n                                    }\n                                    return -1;\n                                } else {\n                                    if (b.runElapsed === null) {\n                                        return 1;\n                                    }\n                                    return a.runElapsed - b.runElapsed;\n                                }\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Status\"\n                            dataIndex=\"status\"\n                            key=\"status\"\n                            width=\"10%\"\n                            render={(status: JobStatus) => {\n                                return renderJobStatus(status);\n                            }}\n                            sorter={(a: Job, b: Job) => {\n                                if (a.status === b.status) {\n                                    return 0;\n                                }\n                                if (a.status === JobStatus.QUEUED) {\n                                    return -1;\n                                }\n                                if (a.status === JobStatus.RUNNING) {\n                                    if (b.status === JobStatus.QUEUED) {\n                                        return 1;\n                                    }\n                                    return -1;\n                                }\n                                if (a.status === JobStatus.FINISHED) {\n                                    if (b.status === JobStatus.QUEUED || b.status === JobStatus.RUNNING) {\n                                        return 1;\n                                    }\n                                    return -1;\n                                }\n                                if (a.status === JobStatus.ERRORED) {\n                                    if (b.status === JobStatus.CANCELED) {\n                                        return -1;\n                                    }\n                                    return 1;\n                                }\n                                return 1;\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Server Type\"\n                            dataIndex=\"clientGroups\"\n                            key=\"clientGroups\"\n                            width=\"10%\"\n                            render={(clientGroups: Array<string>) => {\n                                return clientGroups.join(',');\n                            }}\n                            sorter={(a: Job, b: Job) => {\n                                // TODO: sort client groups first...\n                                return a.clientGroups.join(',').localeCompare(b.clientGroups.join(','));\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Cancel\"\n                            dataIndex=\"action\"\n                            key=\"action\"\n                            width=\"5%\"\n                            render={(status: JobStatus, job: Job) => {\n                                return this.renderJobAction(job);\n                            }}\n                        />\n                    </Table>\n                </div>\n            </div>\n        );\n    }\n}\n","import { Action } from 'redux';\nimport { ActionType } from '.';\nimport { JobsSearchExpression, Job, EpochTime, StoreState } from '../store';\nimport { AppError, NarrativeJobServiceClient } from '@kbase/ui-lib';\nimport MetricsServiceClient from '../../lib/MetricsServiceClient';\nimport { serviceJobToUIJob, compareTimeRange, compareStatus, extractTimeRange } from './utils';\nimport { ThunkDispatch } from 'redux-thunk';\n\n// MY JOBS TAB\n\nexport interface MyJobsSearch extends Action<ActionType.MY_JOBS_SEARCH> {\n    type: ActionType.MY_JOBS_SEARCH;\n    searchExpression: JobsSearchExpression;\n}\n\nexport interface MyJobsSearchStart extends Action<ActionType.MY_JOBS_SEARCH_START> {\n    type: ActionType.MY_JOBS_SEARCH_START;\n}\n\nexport interface MyJobsSearchSuccess extends Action<ActionType.MY_JOBS_SEARCH_SUCCESS> {\n    type: ActionType.MY_JOBS_SEARCH_SUCCESS;\n    searchExpression: JobsSearchExpression;\n    rawJobs: Array<Job>;\n    jobs: Array<Job>;\n    jobsFetchedAt: EpochTime;\n}\n\nexport interface MyJobsSearchError extends Action<ActionType.MY_JOBS_SEARCH_ERROR> {\n    type: ActionType.MY_JOBS_SEARCH_ERROR;\n    error: AppError;\n}\n\nexport function myJobsSearchStart() {\n    return {\n        type: ActionType.MY_JOBS_SEARCH_START\n    };\n}\n\nexport function myJobsSearchSuccess(\n    rawJobs: Array<Job>,\n    jobs: Array<Job>,\n    jobsFetchedAt: EpochTime,\n    searchExpression: JobsSearchExpression\n) {\n    return {\n        type: ActionType.MY_JOBS_SEARCH_SUCCESS,\n        searchExpression,\n        rawJobs,\n        jobs,\n        jobsFetchedAt\n    };\n}\n\nexport function myJobsSearchError(error: AppError) {\n    return {\n        type: ActionType.MY_JOBS_SEARCH_ERROR,\n        error\n    };\n}\n\nasync function fetchMyJobs(\n    token: string,\n    username: string,\n    serviceWizardUrl: string,\n    from: number,\n    to: number\n): Promise<Array<Job>> {\n    const client = new MetricsServiceClient({\n        url: serviceWizardUrl,\n        token: token\n    });\n    return client\n        .getAppMetrics({\n            epoch_range: [from, to],\n            user_ids: [username]\n        })\n        .then((metrics) => {\n            const converted = metrics.job_states.map((jobState) => {\n                return serviceJobToUIJob(jobState, username);\n            });\n            return converted;\n            // return fakeJobs();\n        });\n}\n\nexport function myJobsSearch(searchExpression: JobsSearchExpression) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(myJobsSearchStart());\n\n        const {\n            auth: { userAuthorization }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                myJobsSearchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        let {\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url: serviceWizardURL }\n                    }\n                }\n            },\n            views: {\n                myJobsView: { jobsFetchedAt, rawJobs }\n            }\n        } = getState();\n\n        const searchTerms = searchExpression.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n\n        const [timeRangeStart, timeRangeEnd] = extractTimeRange(searchExpression.timeRange);\n\n        if (!jobsFetchedAt || searchExpression.forceSearch) {\n            rawJobs = await fetchMyJobs(\n                userAuthorization.token,\n                userAuthorization.username,\n                serviceWizardURL,\n                timeRangeStart,\n                timeRangeEnd\n            );\n            jobsFetchedAt = new Date().getTime();\n            // UPDATE: update the raw jobs\n        }\n\n        const newJobs = rawJobs.filter((job) => {\n            return (\n                searchTerms.every((term) => {\n                    return term.test(job.appTitle) || term.test(job.narrativeTitle);\n                }) &&\n                compareTimeRange(job, timeRangeStart, timeRangeEnd) &&\n                compareStatus(job, searchExpression.jobStatus)\n            );\n        });\n\n        dispatch(myJobsSearchSuccess(rawJobs, newJobs, jobsFetchedAt, searchExpression));\n    };\n}\n\n// Jobs refetch\n\nexport function myJobsRefreshSearch() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(myJobsSearchStart());\n\n        const {\n            auth: { userAuthorization }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                myJobsSearchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        const {\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url: serviceWizardURL }\n                    }\n                }\n            },\n            views: {\n                myJobsView: { searchExpression }\n            }\n        } = getState();\n\n        if (!searchExpression) {\n            myJobsSearchError({\n                message: 'No search expression',\n                code: 'nosearchexpression'\n            });\n            return;\n        }\n\n        const [timeRangeStart, timeRangeEnd] = extractTimeRange(searchExpression.timeRange);\n\n        const searchTerms = searchExpression.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n\n        const rawJobs = await fetchMyJobs(\n            userAuthorization.token,\n            userAuthorization.username,\n            serviceWizardURL,\n            timeRangeStart,\n            timeRangeEnd\n        );\n\n        const newJobs = rawJobs.filter((job) => {\n            return (\n                searchTerms.every((term) => {\n                    return term.test(job.appTitle) || term.test(job.narrativeTitle);\n                }) &&\n                compareTimeRange(\n                    job,\n                    // searchExpression.timeRange,\n                    timeRangeStart,\n                    timeRangeEnd\n                ) &&\n                compareStatus(job, searchExpression.jobStatus)\n            );\n        });\n\n        dispatch(myJobsSearchSuccess(rawJobs, newJobs, Date.now(), searchExpression));\n    };\n}\n\n// JOB CANCELATION\n\n// Job Cancelation\n\nexport interface MyJobsCancelJob {\n    type: ActionType.MY_JOBS_CANCEL;\n    jobID: string;\n}\n\nexport interface MyJobsCancelJobStart {\n    type: ActionType.MY_JOBS_CANCEL_START;\n}\n\nexport interface MyJobsCancelJobSuccess {\n    type: ActionType.MY_JOBS_CANCEL_SUCCESS;\n}\n\nexport interface MyJobsCancelJobError {\n    type: ActionType.MY_JOBS_CANCEL_ERROR;\n    error: AppError;\n}\n\nexport function myJobsCancelJobStart(): MyJobsCancelJobStart {\n    return {\n        type: ActionType.MY_JOBS_CANCEL_START\n    };\n}\n\nexport function myJobsCancelJobSuccess(): MyJobsCancelJobSuccess {\n    return {\n        type: ActionType.MY_JOBS_CANCEL_SUCCESS\n    };\n}\n\nexport function myJobsCancelJobError(error: AppError): MyJobsCancelJobError {\n    return {\n        type: ActionType.MY_JOBS_CANCEL_ERROR,\n        error\n    };\n}\n\nexport function myJobsCancelJob(jobID: string) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(myJobsCancelJobStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        NarrativeJobService: { url: njsURL }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                myJobsCancelJobError({\n                    message: 'no authorization',\n                    code: 'no-authorization'\n                })\n            );\n            return;\n        }\n\n        // do it\n        const njsClient = new NarrativeJobServiceClient({\n            url: njsURL,\n            token: userAuthorization.token,\n            module: 'NarrativeJobService'\n        });\n        njsClient\n            .cancelJob({ job_id: jobID })\n            .then(() => {\n                dispatch(myJobsCancelJobSuccess());\n                dispatch(myJobsRefreshSearch());\n            })\n            .catch((err) => {\n                console.error('error canceling job', err);\n                dispatch(\n                    myJobsCancelJobError({\n                        message: 'error canceling job: ' + err.message,\n                        code: 'error-canceling'\n                    })\n                );\n            });\n    };\n}\n","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\nimport MyJobs from './view';\n\nimport { StoreState, Job, JobsSearchExpression, SearchState } from '../../redux/store';\nimport { myJobsSearch, myJobsRefreshSearch, myJobsCancelJob } from '../../redux/actions/myJobs';\n\nexport interface OwnProps {}\n\ninterface StateProps {\n    jobs: Array<Job>;\n    searchState: SearchState;\n}\n\ninterface DispatchProps {\n    search: (searchExpression: JobsSearchExpression) => void;\n    cancelJob: (jobID: string) => void;\n    refreshSearch: () => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        views: {\n            myJobsView: { searchState, jobs }\n        }\n    } = state;\n    return { jobs, searchState };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        search: (searchExpression: JobsSearchExpression) => {\n            dispatch(myJobsSearch(searchExpression) as any);\n        },\n        cancelJob: (jobID: string) => {\n            dispatch(myJobsCancelJob(jobID) as any);\n        },\n        refreshSearch: () => {\n            dispatch(myJobsRefreshSearch() as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(MyJobs);\n","import React from 'react';\nimport { AppStat, PublicAppStatsQuery, SearchState } from '../../redux/store';\nimport { Table, Form, Progress, Input, Button, Tooltip } from 'antd';\nimport { NiceTimeDuration } from '@kbase/ui-lib';\nimport { PaginationConfig, SorterResult } from 'antd/lib/table';\n\nexport interface PublicAppStatsProps {\n    searchState: SearchState;\n    appStats: Array<AppStat>;\n    onSearch: (query: PublicAppStatsQuery) => void;\n}\n\ninterface PublicAppStatsState {\n    appStats: Array<AppStat>;\n}\n\nexport default class PublicAppStats extends React.Component<PublicAppStatsProps, PublicAppStatsState> {\n    currentQuery: string;\n    constructor(props: PublicAppStatsProps) {\n        super(props);\n        this.currentQuery = '';\n    }\n    componentDidMount() {\n        this.props.onSearch({\n            query: this.currentQuery\n        });\n    }\n    onSubmitSearch(event: React.FormEvent) {\n        event.preventDefault();\n        this.props.onSearch({\n            query: this.currentQuery\n        });\n    }\n    onChangeQuery(event: React.ChangeEvent<HTMLInputElement>) {\n        this.currentQuery = event.target.value;\n    }\n    renderControlBar() {\n        return (\n            <Form layout=\"inline\" onSubmit={this.onSubmitSearch.bind(this)}>\n                <Form.Item>\n                    <Input\n                        defaultValue={this.currentQuery}\n                        placeholder=\"Search App Stats (leave empty for all)\"\n                        style={{ width: '20em' }}\n                        onChange={this.onChangeQuery.bind(this)}\n                    />\n                </Form.Item>\n                <Form.Item>\n                    <Button icon=\"search\" type=\"primary\" htmlType=\"submit\" />\n                </Form.Item>\n            </Form>\n        );\n    }\n    onTableChange(pagination: PaginationConfig, filters: any, sorter: SorterResult<AppStat>) {}\n    renderAppStatsTable() {\n        return (\n            <div>\n                <div>{this.renderControlBar()}</div>\n                <div>\n                    <Table<AppStat>\n                        dataSource={this.props.appStats}\n                        loading={this.props.searchState === SearchState.SEARCHING}\n                        rowKey={(stat: AppStat) => {\n                            return stat.appId;\n                        }}\n                        pagination={{ position: 'bottom', showSizeChanger: true }}\n                        size=\"small\"\n                        className=\"PreciseTable\"\n                        onChange={this.onTableChange}\n                    >\n                        <Table.Column\n                            title=\"Module\"\n                            dataIndex=\"moduleId\"\n                            key=\"moduleId\"\n                            width=\"25%\"\n                            render={(moduleId: string, stat: AppStat) => {\n                                return (\n                                    <Tooltip title={stat.moduleTitle}>\n                                        <a href={`#catalog/module/${moduleId}`}>{stat.moduleTitle}</a>\n                                    </Tooltip>\n                                );\n                            }}\n                            sorter={(a: AppStat, b: AppStat) => {\n                                return a.moduleTitle.localeCompare(b.moduleTitle);\n                            }}\n                            defaultSortOrder=\"ascend\"\n                        />\n                        <Table.Column\n                            title=\"Function\"\n                            dataIndex=\"functionId\"\n                            key=\"functionId\"\n                            width=\"25%\"\n                            render={(functionId: string, stat: AppStat) => {\n                                return (\n                                    <Tooltip title={stat.functionTitle}>\n                                        <a href={`#catalog/apps/${stat.moduleId}/${stat.functionId}`}>\n                                            {stat.functionTitle}\n                                        </a>\n                                    </Tooltip>\n                                );\n                            }}\n                            sorter={(a: AppStat, b: AppStat) => {\n                                return a.functionTitle.localeCompare(b.functionTitle);\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Runs\"\n                            dataIndex=\"runCount\"\n                            key=\"runCount\"\n                            width=\"5%\"\n                            align=\"right\"\n                            render={(runCount: number) => {\n                                return (\n                                    <div className=\"NumericColumn\">\n                                        {new Intl.NumberFormat('en-US', {\n                                            useGrouping: true\n                                        }).format(runCount)}\n                                    </div>\n                                );\n                            }}\n                            sorter={(a: AppStat, b: AppStat) => {\n                                return a.runCount - b.runCount;\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Errors\"\n                            dataIndex=\"errorCount\"\n                            key=\"errorCount\"\n                            width=\"5%\"\n                            align=\"right\"\n                            render={(errorCount: number) => {\n                                return (\n                                    <div className=\"NumericColumn\">\n                                        {new Intl.NumberFormat('en-US', {\n                                            useGrouping: true\n                                        }).format(errorCount)}\n                                    </div>\n                                );\n                            }}\n                            sorter={(a: AppStat, b: AppStat) => {\n                                return a.errorCount - b.errorCount;\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Success Rate\"\n                            dataIndex=\"successRate\"\n                            key=\"successRate\"\n                            width=\"10%\"\n                            render={(successRate: number) => {\n                                return (\n                                    <Progress\n                                        percent={successRate * 100}\n                                        format={(percent: number | undefined) => {\n                                            return new Intl.NumberFormat('en-US', {\n                                                style: 'percent'\n                                            }).format(successRate);\n                                        }}\n                                    />\n                                );\n                            }}\n                            sorter={(a: AppStat, b: AppStat) => {\n                                return a.successRate - b.successRate;\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Avg Run Time\"\n                            dataIndex=\"averageRunTime\"\n                            key=\"averageRunTime\"\n                            width=\"10%\"\n                            render={(averageRunTime: number) => {\n                                return <NiceTimeDuration precision={2} duration={averageRunTime * 1000} />;\n                            }}\n                            sorter={(a: AppStat, b: AppStat) => {\n                                return a.averageRunTime - b.averageRunTime;\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Avg Queue Time\"\n                            dataIndex=\"averageQueueTime\"\n                            key=\"averageQueueTime\"\n                            width=\"10%\"\n                            render={(averageQueueTime: number) => {\n                                return <NiceTimeDuration precision={2} duration={averageQueueTime * 1000} />;\n                            }}\n                            sorter={(a: AppStat, b: AppStat) => {\n                                return a.averageQueueTime - b.averageQueueTime;\n                            }}\n                        />\n                        <Table.Column\n                            title=\"Total Run Time\"\n                            dataIndex=\"totalRunTime\"\n                            key=\"totalRunTime\"\n                            width=\"10%\"\n                            render={(totalRunTime: number) => {\n                                return <NiceTimeDuration precision={2} duration={totalRunTime * 1000} />;\n                            }}\n                            sorter={(a: AppStat, b: AppStat) => {\n                                return a.totalRunTime - b.totalRunTime;\n                            }}\n                        />\n                    </Table>\n                </div>\n            </div>\n        );\n    }\n    render() {\n        return <div>{this.renderAppStatsTable()}</div>;\n    }\n}\n","import { Action } from 'redux';\nimport { ActionType } from '.';\nimport { StoreState, AppStat, PublicAppStatsQuery } from '../store';\nimport { AppError, CatalogClient } from '@kbase/ui-lib';\nimport { ThunkDispatch } from 'redux-thunk';\n\nfunction calcAverage(total: number, count: number) {\n    if (total) {\n        if (count) {\n            return total / count;\n        } else {\n            return null;\n        }\n    } else {\n        if (count) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n}\n\nfunction calcRate(part: number, whole: number) {\n    if (part) {\n        if (whole) {\n            return part / whole;\n        } else {\n            return null;\n        }\n    } else {\n        if (whole) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n}\n\n// Search\n\nexport interface Search extends Action<ActionType.PUBLIC_APP_STATS_SEARCH> {\n    type: ActionType.PUBLIC_APP_STATS_SEARCH;\n    query: PublicAppStatsQuery;\n}\n\nexport interface SearchStart extends Action<ActionType.PUBLIC_APP_STATS_SEARCH_START> {\n    type: ActionType.PUBLIC_APP_STATS_SEARCH_START;\n}\n\nexport interface SearchError extends Action<ActionType.PUBLIC_APP_STATS_SEARCH_ERROR> {\n    type: ActionType.PUBLIC_APP_STATS_SEARCH_ERROR;\n    error: AppError;\n}\n\nexport interface SearchSuccess extends Action<ActionType.PUBLIC_APP_STATS_SEARCH_SUCCESS> {\n    type: ActionType.PUBLIC_APP_STATS_SEARCH_SUCCESS;\n    appStats: Array<AppStat>;\n}\n\nfunction searchStart(): SearchStart {\n    return {\n        type: ActionType.PUBLIC_APP_STATS_SEARCH_START\n    };\n}\n\nfunction searchError(error: AppError): SearchError {\n    return {\n        type: ActionType.PUBLIC_APP_STATS_SEARCH_ERROR,\n        error\n    };\n}\n\nfunction searchSuccess(appStats: Array<AppStat>): SearchSuccess {\n    return {\n        type: ActionType.PUBLIC_APP_STATS_SEARCH_SUCCESS,\n        appStats\n    };\n}\n\nexport function search(query: PublicAppStatsQuery) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        Catalog: { url: catalogUrl }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                searchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        if (!userAuthorization) {\n            dispatch(\n                searchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        const catalogClient = new CatalogClient({\n            module: 'Catalog',\n            token: userAuthorization.token,\n            url: catalogUrl\n        });\n        const rawStats = await catalogClient.getExecAggrStats({});\n        const stats = rawStats.map((stat) => {\n            const [moduleId, functionId] = stat.full_app_id.split('/');\n            if (!moduleId || !functionId) {\n                console.warn('bad app!', stat);\n            }\n            const successRate = calcRate(stat.number_of_calls - stat.number_of_errors, stat.number_of_calls);\n            const averageRunTime = calcAverage(stat.total_exec_time, stat.number_of_calls);\n            const averageQueueTime = calcAverage(stat.total_queue_time, stat.number_of_calls);\n            return {\n                appId: stat.full_app_id,\n                moduleId,\n                functionId: functionId || '',\n                moduleTitle: moduleId,\n                functionTitle: functionId || '',\n                runCount: stat.number_of_calls,\n                errorCount: stat.number_of_errors,\n                successRate,\n                averageRunTime,\n                averageQueueTime,\n                totalRunTime: stat.total_queue_time\n            } as AppStat;\n        });\n\n        const expression = query.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n        const filtered = stats.filter((stat) => {\n            return expression.every((term) => {\n                return (\n                    term.test(stat.moduleTitle) ||\n                    term.test(stat.moduleId) ||\n                    term.test(stat.functionTitle) ||\n                    term.test(stat.functionId)\n                );\n            });\n        });\n\n        dispatch(searchSuccess(filtered));\n    };\n}\n","import { StoreState, AppStat, PublicAppStatsQuery, SearchState } from '../../redux/store';\nimport { Action, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport Component from './view';\nimport { search } from '../../redux/actions/publicAppStats';\n\nexport interface OwnProps {}\n\ninterface StateProps {\n    searchState: SearchState;\n    appStats: Array<AppStat>;\n}\n\ninterface DispatchProps {\n    onSearch: (query: PublicAppStatsQuery) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        views: {\n            publicAppStatsView: { appStats, searchState }\n        }\n    } = state;\n    return {\n        searchState,\n        appStats\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        onSearch: (query: PublicAppStatsQuery) => {\n            dispatch(search(query) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Component);\n","import React from 'react';\n\nimport { UserRunSummaryStat, SearchState, UserRunSummaryQuery } from '../../redux/store';\nimport { Table, Form, Input, Button, Tooltip } from 'antd';\n\nexport interface UserRunSummaryProps {\n    searchState: SearchState;\n    userRunSummary: Array<UserRunSummaryStat>;\n    search: (query: UserRunSummaryQuery) => void;\n}\n\ninterface UserRunSummaryState {}\n\nexport default class UserRunSummary extends React.Component<UserRunSummaryProps, UserRunSummaryState> {\n    currentQuery: UserRunSummaryQuery;\n    constructor(props: UserRunSummaryProps) {\n        super(props);\n        this.currentQuery = {\n            query: ''\n        };\n    }\n    componentDidMount() {\n        this.props.search(this.currentQuery);\n    }\n    onSubmitSearch(event: React.FormEvent) {\n        event.preventDefault();\n        this.props.search(this.currentQuery);\n    }\n    onChangeQuery(event: React.ChangeEvent<HTMLInputElement>) {\n        this.currentQuery.query = event.target.value;\n    }\n    renderControlBar() {\n        return (\n            <Form layout=\"inline\" onSubmit={this.onSubmitSearch.bind(this)}>\n                <Form.Item>\n                    <Input\n                        defaultValue={this.currentQuery.query}\n                        placeholder=\"Search (leave empty for all)\"\n                        style={{ width: '20em' }}\n                        onChange={this.onChangeQuery.bind(this)}\n                    />\n                </Form.Item>\n                <Form.Item>\n                    <Button icon=\"search\" type=\"primary\" htmlType=\"submit\" />\n                </Form.Item>\n            </Form>\n        );\n    }\n    renderTable() {\n        return (\n            <Table<UserRunSummaryStat>\n                dataSource={this.props.userRunSummary}\n                loading={this.props.searchState === SearchState.SEARCHING}\n                rowKey={(stat: UserRunSummaryStat) => {\n                    return stat.username + '.' + stat.appId;\n                }}\n                pagination={{ position: 'bottom', showSizeChanger: true }}\n                size=\"small\"\n                className=\"PreciseTable\"\n            >\n                <Table.Column\n                    title=\"User\"\n                    dataIndex=\"username\"\n                    key=\"username\"\n                    width=\"30%\"\n                    render={(username: string, stat: UserRunSummaryStat) => {\n                        return (\n                            <Tooltip title={username}>\n                                <a href={`#people/${username}`} target=\"_parent\">\n                                    {username}\n                                </a>\n                            </Tooltip>\n                        );\n                    }}\n                    sorter={(a: UserRunSummaryStat, b: UserRunSummaryStat) => {\n                        return a.username.localeCompare(b.username);\n                    }}\n                />\n                <Table.Column\n                    title=\"Module\"\n                    dataIndex=\"moduleId\"\n                    key=\"moduleId\"\n                    width=\"30%\"\n                    render={(moduleId: string) => {\n                        return (\n                            <Tooltip title={moduleId}>\n                                <a href={`#catalog/module/${moduleId}`} target=\"_parent\">\n                                    {moduleId}\n                                </a>\n                            </Tooltip>\n                        );\n                    }}\n                    sorter={(a: UserRunSummaryStat, b: UserRunSummaryStat) => {\n                        return a.moduleId.localeCompare(b.moduleId);\n                    }}\n                />\n                <Table.Column\n                    title=\"Function\"\n                    dataIndex=\"functionId\"\n                    key=\"functionId\"\n                    width=\"30%\"\n                    render={(functionId: string, stat: UserRunSummaryStat) => {\n                        return (\n                            <Tooltip title={functionId}>\n                                <a href={`#catalog/apps/${stat.appId}`} target=\"_parent\">\n                                    {functionId}\n                                </a>\n                            </Tooltip>\n                        );\n                    }}\n                    sorter={(a: UserRunSummaryStat, b: UserRunSummaryStat) => {\n                        return a.functionId.localeCompare(b.functionId);\n                    }}\n                />\n                <Table.Column\n                    title=\"Runs\"\n                    dataIndex=\"runCount\"\n                    key=\"runCount\"\n                    width=\"10%\"\n                    align=\"right\"\n                    render={(runCount: number, stat: UserRunSummaryStat) => {\n                        return (\n                            <div className=\"NumericColumn\">\n                                {Intl.NumberFormat('en-US', {\n                                    useGrouping: true\n                                }).format(runCount)}\n                            </div>\n                        );\n                    }}\n                    sorter={(a: UserRunSummaryStat, b: UserRunSummaryStat) => {\n                        return a.runCount - b.runCount;\n                    }}\n                    defaultSortOrder=\"descend\"\n                />\n            </Table>\n        );\n    }\n    render() {\n        return (\n            <div>\n                <div>{this.renderControlBar()}</div>\n                <div> {this.renderTable()}</div>\n            </div>\n        );\n    }\n}\n","import { Action } from 'redux';\nimport { ActionType } from '.';\nimport { StoreState, UserRunSummaryQuery, UserRunSummaryStat } from '../store';\nimport { AppError, CatalogClient } from '@kbase/ui-lib';\nimport { ThunkDispatch } from 'redux-thunk';\nimport {} from './utils';\n\n// Search\n\nexport interface Search extends Action<ActionType.USER_RUN_SUMMARY_SEARCH> {\n    type: ActionType.USER_RUN_SUMMARY_SEARCH;\n    query: UserRunSummaryQuery;\n}\n\nexport interface SearchStart extends Action<ActionType.USER_RUN_SUMMARY_SEARCH_START> {\n    type: ActionType.USER_RUN_SUMMARY_SEARCH_START;\n}\n\nexport interface SearchError extends Action<ActionType.USER_RUN_SUMMARY_SEARCH_ERROR> {\n    type: ActionType.USER_RUN_SUMMARY_SEARCH_ERROR;\n    error: AppError;\n}\n\nexport interface SearchSuccess extends Action<ActionType.USER_RUN_SUMMARY_SEARCH_SUCCESS> {\n    type: ActionType.USER_RUN_SUMMARY_SEARCH_SUCCESS;\n    userRunSummary: Array<UserRunSummaryStat>;\n}\n\nfunction searchStart(): SearchStart {\n    return {\n        type: ActionType.USER_RUN_SUMMARY_SEARCH_START\n    };\n}\n\nfunction searchError(error: AppError): SearchError {\n    return {\n        type: ActionType.USER_RUN_SUMMARY_SEARCH_ERROR,\n        error\n    };\n}\n\nfunction searchSuccess(userRunSummary: Array<UserRunSummaryStat>): SearchSuccess {\n    return {\n        type: ActionType.USER_RUN_SUMMARY_SEARCH_SUCCESS,\n        userRunSummary\n    };\n}\n\nexport function search(query: UserRunSummaryQuery) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(searchStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        Catalog: { url: catalogUrl }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                searchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        if (!userAuthorization) {\n            dispatch(\n                searchError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        const catalogClient = new CatalogClient({\n            module: 'Catalog',\n            token: userAuthorization.token,\n            url: catalogUrl\n        });\n        const params = {\n            begin: 0,\n            end: Date.now()\n        };\n        const rawStats = await catalogClient.getExecAggrTable(params);\n        const stats = rawStats.map((stat) => {\n            let appId, moduleId, functionId;\n            if (!stat.app) {\n                moduleId = stat.func_mod;\n                functionId = stat.func;\n                appId = [moduleId, functionId].join('/');\n            } else {\n                [moduleId, functionId] = stat.app.split('/');\n                appId = stat.app;\n            }\n\n            if (!moduleId || !functionId) {\n                console.warn('bad app!', stat);\n            }\n\n            return {\n                username: stat.user,\n                appId: appId,\n                moduleId: moduleId,\n                functionId: functionId,\n                runCount: stat.n\n            } as UserRunSummaryStat;\n        });\n\n        const expression = query.query.split(/\\s+/).map((term) => {\n            return new RegExp(term, 'i');\n        });\n        const filtered = stats.filter((stat) => {\n            return expression.every((term) => {\n                return (\n                    term.test(stat.appId) ||\n                    term.test(stat.moduleId) ||\n                    term.test(stat.functionId) ||\n                    term.test(stat.username)\n                );\n            });\n        });\n\n        dispatch(searchSuccess(filtered));\n    };\n}\n","import { StoreState, SearchState, UserRunSummaryStat, UserRunSummaryQuery } from '../../redux/store';\nimport { Action, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport Component from './view';\nimport { search } from '../../redux/actions/userRunSummary';\n\nexport interface OwnProps {}\n\ninterface StateProps {\n    searchState: SearchState;\n    userRunSummary: Array<UserRunSummaryStat>;\n}\n\ninterface DispatchProps {\n    search: (query: UserRunSummaryQuery) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        views: {\n            userRunSummaryView: { searchState, userRunSummary }\n        }\n    } = state;\n    return { searchState, userRunSummary };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        search: (query: UserRunSummaryQuery) => {\n            dispatch(search(query) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Component);\n","import React from 'react';\nimport { Tabs, Icon } from 'antd';\nimport './style.css';\nimport UserJobs from '../UserJobs';\nimport MyJobs from '../MyJobs';\nimport PublicAppStats from '../PublicAppStats';\nimport UserRunSummary from '../UserRunSummary';\nimport { MainParams } from './state';\n\nexport interface MainProps {\n    isAdmin: boolean;\n    params: MainParams;\n    view: string;\n    setTitle: (title: string) => void;\n    setView: (view: string) => void;\n    setParams: (params: MainParams) => void;\n}\n\ninterface MainState {\n    activeTabKey: string | null;\n    defaultActiveTabKey: string | null;\n}\n\nexport default class Main extends React.Component<MainProps, MainState> {\n    defaultTabKey: string;\n    constructor(props: MainProps) {\n        super(props);\n        this.defaultTabKey = 'myJobs';\n        this.state = {\n            activeTabKey: this.defaultTabKey,\n            defaultActiveTabKey: this.defaultTabKey\n        };\n    }\n\n    componentDidMount() {\n        this.props.setTitle('Job Browser');\n\n        // window.setTimeout(() => {\n        //     this.props.setParams({ tab: 'userJobs' });\n        // }, 1000);\n    }\n\n    componentWillUnmount() {\n        this.setState({\n            activeTabKey: null\n            // defaultActiveTabKey: null\n        });\n    }\n\n    onTabsChange(activeKey: string) {\n        // console.log('tabs changed', activeKey, this.activeTabKey);\n        this.setState({ activeTabKey: activeKey });\n        // this.state.activeTabKey = activeKey;\n    }\n\n    renderJobsTab() {}\n\n    renderAdminJobsTab() {}\n\n    renderTabs() {\n        let userRunTab;\n        let userJobsTab;\n        // console.log('rendering, admin?', this.props.isAdmin);\n        if (this.props.isAdmin) {\n            const tabLabel = (\n                <span>\n                    User Run Summary <Icon type=\"unlock\" />\n                </span>\n            );\n            userRunTab = (\n                <Tabs.TabPane tab={tabLabel} key=\"userRunSummary\">\n                    <UserRunSummary />\n                </Tabs.TabPane>\n            );\n            const userJobsTabLabel = (\n                <span>\n                    User Jobs <Icon type=\"unlock\" />\n                </span>\n            );\n            userJobsTab = (\n                <Tabs.TabPane tab={userJobsTabLabel} key=\"userJobs\">\n                    <UserJobs />\n                </Tabs.TabPane>\n            );\n        }\n\n        // FIXME: The animated flag is set to false below because for some reason antd (on safari at least) is not\n        // correctly rendering any tab other than the first one with animation enabled (which is default).\n        // Please investigate and either find what we have done wrong or antd has.\n        // console.log('default active tab key?', this.state.defaultActiveTabKey);\n        return (\n            <Tabs\n                animated={false}\n                // defaultActiveKey={this.state.activeTabKey || undefined}\n                activeKey={this.props.params.tab || this.state.activeTabKey || undefined}\n                className=\"FlexTabs\"\n                onChange={this.onTabsChange.bind(this)}\n            >\n                <Tabs.TabPane tab=\"My Jobs\" key=\"myJobs\">\n                    <MyJobs />\n                </Tabs.TabPane>\n\n                <Tabs.TabPane tab=\"Public App Stats\" key=\"publicAppStats\">\n                    <PublicAppStats />\n                </Tabs.TabPane>\n\n                {userJobsTab}\n                {userRunTab}\n            </Tabs>\n        );\n    }\n\n    render() {\n        return <div className=\"Col Col-scrollable\">{this.renderTabs()}</div>;\n    }\n}\n","import { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\nimport Main from './view';\nimport { StoreState } from '../../redux/store';\nimport { sendTitle, setView, setParams } from '@kbase/ui-lib';\n\nexport interface OwnProps {}\n\nexport interface MainParams {\n    tab: string;\n}\n\ninterface StateProps {\n    isAdmin: boolean;\n    params: MainParams;\n    view: string;\n}\n\ninterface DispatchProps {\n    setTitle: (title: string) => void;\n    setView: (view: string) => void;\n    setParams: (params: MainParams) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        views: {\n            mainView: { isAdmin }\n        },\n        app: {\n            runtime: {\n                navigation: { view, params: rawParams }\n            }\n        }\n    } = state;\n    // TODO: call function to coerce raw params into typed params...\n    const params: MainParams = (rawParams as unknown) as MainParams;\n    return { isAdmin, view, params };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        },\n        setView: (view: string) => {\n            dispatch(setView(view) as any);\n        },\n        setParams: (params: MainParams) => {\n            dispatch(setParams(params) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Main);\n","import { Action } from 'redux';\nimport { ActionType } from '.';\nimport { AppError, CatalogClient } from '@kbase/ui-lib';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { StoreState } from '../store';\n\n// MAIN Loading\n\nexport interface MainLoad extends Action<ActionType.MAIN_LOAD> {\n    type: ActionType.MAIN_LOAD;\n}\n\nexport interface MainLoadStart extends Action<ActionType.MAIN_LOAD_START> {\n    type: ActionType.MAIN_LOAD_START;\n}\n\nexport interface MainLoadSuccess extends Action<ActionType.MAIN_LOAD_SUCCESS> {\n    type: ActionType.MAIN_LOAD_SUCCESS;\n    isAdmin: boolean;\n}\n\nexport interface MainLoadError extends Action<ActionType.MAIN_LOAD_ERROR> {\n    type: ActionType.MAIN_LOAD_ERROR;\n    error: AppError;\n}\n\nexport interface Unload extends Action<ActionType.MAIN_UNLOAD> {\n    type: ActionType.MAIN_UNLOAD;\n}\n\nexport function mainLoadStart(): MainLoadStart {\n    return {\n        type: ActionType.MAIN_LOAD_START\n    };\n}\n\nexport function mainLoadSuccess(isAdmin: boolean): MainLoadSuccess {\n    return {\n        type: ActionType.MAIN_LOAD_SUCCESS,\n        isAdmin\n    };\n}\n\nexport function mainLoadError(error: AppError): MainLoadError {\n    return {\n        type: ActionType.MAIN_LOAD_ERROR,\n        error\n    };\n}\n\nexport function mainLoad() {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(mainLoadStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        Catalog: { url: catalogURL }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            dispatch(\n                mainLoadError({\n                    message: 'Not authorized',\n                    code: 'unauthorized'\n                })\n            );\n            return;\n        }\n\n        // determine auth\n        // TODO: we need a model object for interacting with the outside world\n        const catalogClient = new CatalogClient({\n            token: userAuthorization.token,\n            url: catalogURL,\n            module: 'Catalog'\n        });\n        catalogClient\n            .isAdmin()\n            .then((isAdmin) => {\n                dispatch(mainLoadSuccess(isAdmin ? true : false));\n            })\n            .catch((err) => {\n                dispatch(\n                    mainLoadError({\n                        message: err.message,\n                        code: 'error-checking-admin-status'\n                    })\n                );\n            });\n    };\n}\n\nexport function unload() {\n    return {\n        type: ActionType.MAIN_UNLOAD\n    };\n}\n","/**\n * This is a \"loader\" component. It is solely responsible for\n */\nimport * as React from 'react';\nimport { ComponentLoadingState, StoreState, MainView } from '../../redux/store';\nimport Container from './state';\n\n// The redux connection\n\nimport { Dispatch, Action } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { Spin, Alert } from 'antd';\nimport { mainLoad, unload } from '../../redux/actions/app';\n\n// First the loader component, which takes care of a loading view, error view, and the\n// container.\n\nexport interface LoaderProps {\n    view: MainView;\n    onLoad: () => void;\n    unload: () => void;\n}\n\ninterface LoaderState {}\n\nclass Loader extends React.Component<LoaderProps, LoaderState> {\n    renderLoading() {\n        const message = (\n            <div>\n                Loading ... <Spin />\n            </div>\n        );\n        return (\n            <Alert\n                type=\"info\"\n                message={message}\n                style={{\n                    width: '20em',\n                    padding: '20px',\n                    margin: '20px auto'\n                }}\n            />\n        );\n    }\n\n    renderError() {\n        if (!this.props.view.error) {\n            return;\n        }\n        return <Alert type=\"error\" message={this.props.view.error.message} />;\n    }\n\n    render() {\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                return this.renderLoading();\n            case ComponentLoadingState.LOADING:\n                return this.renderLoading();\n            case ComponentLoadingState.ERROR:\n                return this.renderError();\n            case ComponentLoadingState.SUCCESS:\n                return <Container />;\n        }\n    }\n\n    componentDidMount() {\n        // console.log('did mount?', this.props.view.loadingState);\n        // this.props.onLoad();\n        switch (this.props.view.loadingState) {\n            case ComponentLoadingState.NONE:\n                // should only appear briefly as the LOAD event is processed.\n                this.props.onLoad();\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.unload();\n    }\n}\n\n/**\n * This is the redux interface -- the main entry point for the Main Component.\n */\n\nexport interface OwnProps {}\n\ninterface StateProps {\n    view: MainView;\n    token: string;\n}\n\ninterface DispatchProps {\n    onLoad: () => void;\n    unload: () => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        views: { mainView }\n    } = state;\n    return {\n        view: mainView,\n        token: userAuthorization!.token\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, props: OwnProps): DispatchProps {\n    return {\n        onLoad: () => {\n            dispatch(mainLoad() as any);\n        },\n        unload: () => {\n            dispatch(unload() as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Loader);\n","/**\n * The top component of the App, named appropriately App.\n *\n * As the top level component of the app, it is responsible for the setting up\n * any top level support such as the KBase integration (kbase-ui's AppBase) and\n * the redux store.\n */\n\n// 3rd party\nimport React from 'react';\nimport { createReduxStore } from './redux/store';\nimport { Provider } from 'react-redux';\n\n// KBase external\nimport { AppBase } from '@kbase/ui-lib';\n\nimport { AuthGate } from '@kbase/ui-lib';\n\n// project\nimport Main from './components/Main';\n\n// file\nimport './App.css';\n\n/**\n * The app currently has no props, but we establish\n * a props interface as a placeholder.\n */\nexport interface AppProps {}\n\n/**\n * The app currently has no state, but we establish\n * a state interface as a placeholder.\n */\ninterface AppState {}\n\n// Redux setup\nconst store = createReduxStore();\n\n/**\n * The top level component for the entire web app.\n *\n * @remarks\n * Also see the [kbase-ui] support library, which provides AppBase\n *\n * @public\n */\nexport default class App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <Provider store={store}>\n                <AppBase>\n                    <AuthGate required={true}>\n                        <Main />\n                    </AuthGate>\n                </AppBase>\n            </Provider>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * index.tsx\n * This is the root code run from the index.html, and is thus the entry point to the\n * app.\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}